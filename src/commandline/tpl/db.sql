


-- SOURCE FILE: ./src//000-basics/000.func-generateGUID.sql 

DELIMITER //
DROP FUNCTION IF EXISTS generateGUID //
CREATE FUNCTION generateGUID (length integer)
RETURNS varchar(255) DETERMINISTIC
BEGIN
    DECLARE result varchar(255);
    SET result = '';


    WHILE length(result)<length DO
        SET result = concat(result, char( 90-floor(rand()*26)) );
    END WHILE;

    return result;

END //


DROP FUNCTION IF EXISTS umlaute_ersetzen //
CREATE FUNCTION umlaute_ersetzen (str varchar(255))
RETURNS varchar(255) DETERMINISTIC
BEGIN
   
    SET str = replace(str,'ä','ae' );
    SET str = replace(str,'ö','oe' );
    SET str = replace(str,'ü','ue' );
    SET str = replace(str,'Ä','Ae' );
    SET str = replace(str,'Ö','Oe' );
    SET str = replace(str,'Ü','Ue' );
    SET str = replace(str,'ß','ss' );
    SET str = replace(str,'á','a' );
    SET str = replace(str,'à','a' );
    SET str = replace(str,'é','e' );
    SET str = replace(str,'è','e' );

    return str;

END //

-- SOURCE FILE: ./src//000-basics/000.func-sessions-xxx.sql 
DELIMITER ;

create view IF NOT EXISTS VIEW_SESSION_GROUPS AS 
SELECT '_default_' `group`
;

DELIMITER $$
DROP FUNCTION IF EXISTS getSessionUser $$
CREATE FUNCTION getSessionUser ()
RETURNS varchar(100) DETERMINISTIC
RETURN (
    SELECT @sessionuser
)
$$


DELIMITER $$
DROP FUNCTION IF EXISTS getSessionID $$
CREATE FUNCTION getSessionID ()
RETURNS varchar(100) DETERMINISTIC
RETURN (
    SELECT @sessionid
)
$$


DROP FUNCTION IF EXISTS getSessionUserFullName $$
CREATE FUNCTION getSessionUserFullName ()
RETURNS varchar(255) DETERMINISTIC
RETURN (
    SELECT @sessionuserfullname
)


$$



DROP FUNCTION IF EXISTS getPartnerID $$
CREATE FUNCTION getPartnerID ()
RETURNS varchar(255) DETERMINISTIC
BEGIN
  DECLARE resid varchar(255);
  DECLARE default_table varchar(255);
  DECLARE by_user_table varchar(255);

  SET default_table=NULL;
  SET by_user_table=NULL;
  SET resid=NULL;

  SELECT table_name INTO default_table  FROM information_schema.tables WHERE table_schema = database()  AND table_name = 'sv_setup_partner_default';
  SELECT table_name INTO by_user_table  FROM information_schema.tables WHERE table_schema = database()  AND table_name = 'sv_setup_partner_by_user';

  IF by_user_table is not null THEN
    SET resid=(select max(id) from sv_setup_partner_by_user where login=getSessionUser() );
  END IF;

  IF default_table is not null THEN
    SET resid=(select max(id) from sv_setup_partner_default);
  END IF;

  IF resid is null THEN
    SET resid='PARTNERNOTSET';
  END IF;

  RETURN resid;
END
$$
-- SOURCE FILE: ./src//000-basics/000.func-uuid_v4.sql 

DELIMITER //

DROP FUNCTION IF EXISTS uuid_v4 //
CREATE FUNCTION uuid_v4()
    RETURNS CHAR(36)
NO SQL
BEGIN
    -- Generate 8 2-byte strings that we will combine into a UUIDv4
    SET @h1 = LPAD(HEX(FLOOR(RAND() * 0xffff)), 4, '0');
    SET @h2 = LPAD(HEX(FLOOR(RAND() * 0xffff)), 4, '0');
    SET @h3 = LPAD(HEX(FLOOR(RAND() * 0xffff)), 4, '0');
    SET @h6 = LPAD(HEX(FLOOR(RAND() * 0xffff)), 4, '0');
    SET @h7 = LPAD(HEX(FLOOR(RAND() * 0xffff)), 4, '0');
    SET @h8 = LPAD(HEX(FLOOR(RAND() * 0xffff)), 4, '0');

    -- 4th section will start with a 4 indicating the version
    SET @h4 = CONCAT('4', LPAD(HEX(FLOOR(RAND() * 0x0fff)), 3, '0'));

    -- 5th section first half-byte can only be 8, 9 A or B
    SET @h5 = CONCAT(HEX(FLOOR(RAND() * 4 + 8)),
                LPAD(HEX(FLOOR(RAND() * 0x0fff)), 3, '0'));

    -- Build the complete UUID
    RETURN LOWER(CONCAT(
        @h1, @h2, '-', @h3, '-', @h4, '-', @h5, '-', @h6, @h7, @h8
    ));
END
//



DROP FUNCTION IF EXISTS value_uuid //
CREATE FUNCTION value_uuid(column_name varchar(64))
    RETURNS CHAR(36)
NO SQL
BEGIN
    DECLARE h8 char(4);
    SET h8 = LPAD(HEX(FLOOR(RAND() * 0xffff)), 4, '0');
    RETURN LOWER(CONCAT(md5(column_name), @h8));
END
//


-- SOURCE FILE: ./src//000-basics/000.proc-addfieldifnotexists.sql 

DELIMITER $$
DROP PROCEDURE IF EXISTS addFieldIfNotExists $$
DROP FUNCTION IF EXISTS isFieldExisting $$

CREATE FUNCTION isFieldExisting (table_name_IN VARCHAR(100), field_name_IN VARCHAR(100))
RETURNS INT DETERMINISTIC
RETURN (
    SELECT COUNT(COLUMN_NAME)
    FROM INFORMATION_SCHEMA.columns
    WHERE TABLE_SCHEMA = DATABASE()
    AND TABLE_NAME = table_name_IN
    AND COLUMN_NAME = field_name_IN
)
$$

CREATE OR REPLACE PROCEDURE addFieldIfNotExists (
    IN table_name_IN VARCHAR(100)
    , IN field_name_IN VARCHAR(100)
    , IN field_definition_IN VARCHAR(100)
)
MODIFIES SQL DATA
BEGIN
    SET @isFieldThere = isFieldExisting(table_name_IN, field_name_IN);
    IF (@isFieldThere = 0) THEN

        SET @ddl = CONCAT('ALTER TABLE ', table_name_IN);
        SET @ddl = CONCAT(@ddl, ' ', 'ADD COLUMN') ;
        SET @ddl = CONCAT(@ddl, ' ', '`',field_name_IN,'`');
        SET @ddl = CONCAT(@ddl, ' ', field_definition_IN);
        PREPARE stmt FROM @ddl;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;
    END IF;

END;
$$


-- SOURCE FILE: ./src//000-basics/000.proc-addforeignkeyifnotexists.sql 

DELIMITER $$
DROP PROCEDURE IF EXISTS addForeignKeyIfNotExists $$
CREATE PROCEDURE addForeignKeyIfNotExists (
    IN in_table_name VARCHAR(128), 
    IN in_referenced_table_name VARCHAR(128), 
    IN in_constraint_name VARCHAR(128),
    
    IN in_foreign_key VARCHAR(255),
    IN in_referenced_key VARCHAR(255),
    
    IN in_update_rule varchar(10),
    IN in_delete_rule varchar(10)
)
MODIFIES SQL DATA
BEGIN
    
    IF NOT EXISTS(
      SELECT
        RC.TABLE_NAME
      FROM
        INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC
      WHERE 
        RC.CONSTRAINT_SCHEMA=database()
        AND RC.CONSTRAINT_NAME = in_constraint_name
    ) THEN

      SET @ddl = CONCAT('
        ALTER TABLE `in_table_name`
        ADD CONSTRAINT `in_constraint_name`
        FOREIGN KEY (in_foreign_key) REFERENCES `in_referenced_table_name` (in_referenced_key)
        ON DELETE in_delete_rule
        ON UPDATE in_update_rule
      ');
      SET @ddl = REPLACE(@ddl, 'in_table_name', in_table_name);
      SET @ddl = REPLACE(@ddl, 'in_constraint_name', in_constraint_name);
      SET @ddl = REPLACE(@ddl, 'in_foreign_key', in_foreign_key);
      SET @ddl = REPLACE(@ddl, 'in_referenced_table_name', in_referenced_table_name);
      SET @ddl = REPLACE(@ddl, 'in_referenced_key', in_referenced_key);
      SET @ddl = REPLACE(@ddl, 'in_delete_rule', in_delete_rule);
      SET @ddl = REPLACE(@ddl, 'in_update_rule', in_update_rule);


      PREPARE stmt FROM @ddl;
      EXECUTE stmt;
      DEALLOCATE PREPARE stmt;

    END IF;

END;
$$


-- SOURCE FILE: ./src//000-basics/000.proc-correct_view_definer.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `correctViewDefiner` //
CREATE PROCEDURE `correctViewDefiner`( in test_only boolean)
MODIFIES SQL DATA
COMMENT '
Procedure correctViewDefiner find views with none existing definer an recreate them.
The new definer will be the current logged in user. If the given parameter test_only 
is true no changes will be made, only all matching view will be listed.
'
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE use_table_schema VARCHAR(64);
    DECLARE use_table_name VARCHAR(64);
    DECLARE use_view_definition longtext;

    DECLARE cur CURSOR FOR select table_schema,table_name,view_definition from information_schema.views where definer not in (select concat(user,'@',host) from mysql.user ) and table_schema= database();
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    set global table_definition_cache = 4000;

    SET @debug=1;
    IF test_only=true THEN
        call `debug_message`('Test only: No changes will be made');
    END IF;


    OPEN cur;
    read_loop: LOOP
        FETCH cur INTO use_table_schema,use_table_name,use_view_definition;
        IF done THEN
            LEAVE read_loop;
        END IF;
        SET @d=concat('DROP VIEW `',use_table_schema,'`.`',use_table_name,'`');
        SET @s=concat('CREATE VIEW `',use_table_schema,'`.`',use_table_name,'` AS  ',use_view_definition);

        call `debug_message`(substring(@s,1,100));

        IF test_only=false THEN
        select @s;
            call `debug_message`('prepare');
            PREPARE stmt1 FROM @d;
            execute stmt1;
            DEALLOCATE PREPARE stmt1;

            PREPARE stmt1 FROM @s;
            execute stmt1;
            DEALLOCATE PREPARE stmt1;
            call `debug_message`('OK');
        END IF;

    END LOOP;
    CLOSE cur;
END //
-- SOURCE FILE: ./src//000-basics/000.proc-create_index.sql 
DELIMITER $$

DROP PROCEDURE IF EXISTS `create_index` $$
CREATE PROCEDURE `create_index`
(
    given_database VARCHAR(64),
    given_table    VARCHAR(64),
    given_index    VARCHAR(64),
    given_columns  VARCHAR(64)
)
BEGIN

    DECLARE IndexIsThere INTEGER;

    SELECT COUNT(1) INTO IndexIsThere
    FROM INFORMATION_SCHEMA.STATISTICS
    WHERE table_schema = given_database
    AND   table_name   = given_table
    AND   index_name   = given_index;

    IF IndexIsThere = 0 THEN
        SET @sqlstmt = CONCAT('CREATE INDEX ',given_index,' ON ',
        given_database,'.',given_table,' (',given_columns,')');
        PREPARE st FROM @sqlstmt;
        EXECUTE st;
        DEALLOCATE PREPARE st;
    ELSE
        SELECT CONCAT('Index ',given_index,' already exists on Table ',
        given_database,'.',given_table) CreateindexErrorMessage;
    END IF;

END $$




DROP PROCEDURE IF EXISTS `create__unique_index` $$
CREATE PROCEDURE `create__unique_index`
(
given_database VARCHAR(64),
given_table    VARCHAR(64),
given_index    VARCHAR(64),
given_columns  VARCHAR(64)
)
BEGIN

DECLARE IndexIsThere INTEGER;

SELECT COUNT(1) INTO IndexIsThere
FROM INFORMATION_SCHEMA.STATISTICS
WHERE table_schema = given_database
AND   table_name   = given_table
AND   index_name   = given_index;

IF IndexIsThere = 0 THEN
    SET @sqlstmt = CONCAT('CREATE UNIQUE INDEX ',given_index,' ON ',
    given_database,'.',given_table,' (',given_columns,')');
    PREPARE st FROM @sqlstmt;
    EXECUTE st;
    DEALLOCATE PREPARE st;
    
END IF;

END $$



DROP PROCEDURE IF EXISTS `create__fulltext_index` $$
CREATE PROCEDURE `create__fulltext_index`
(
    given_database VARCHAR(64),
    given_table    VARCHAR(64),
    given_index    VARCHAR(64),
    given_columns  VARCHAR(64)
)
BEGIN

DECLARE IndexIsThere INTEGER;

SELECT COUNT(1) INTO IndexIsThere
FROM INFORMATION_SCHEMA.STATISTICS
WHERE table_schema = given_database
AND   table_name   = given_table
AND   index_name   = given_index;

IF IndexIsThere = 0 THEN

    SET @sqlstmt = CONCAT('ALTER TABLE `',given_database,'`.`',given_table,'` ADD FULLTEXT `',given_index,'` (`',given_columns,'`) ');
    PREPARE st FROM @sqlstmt;
    EXECUTE st;
    DEALLOCATE PREPARE st;

    
END IF;

END $$
-- SOURCE FILE: ./src//000-basics/000.proc-switch_to_xxx.sql 

DELIMITER $$
DROP PROCEDURE IF EXISTS `SWITCH_TO_INNODB`$$
CREATE PROCEDURE `SWITCH_TO_INNODB`(
  IN in_dbname varchar(150)
)
    MODIFIES SQL DATA
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE loop_t_name VARCHAR(50);

    DECLARE cur CURSOR FOR select table_name from information_schema.tables where table_schema=in_dbname and engine<>'INNODB';
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;


    OPEN cur;
    read_loop: LOOP
    FETCH cur INTO loop_t_name;
    IF done THEN
        LEAVE read_loop;
    END IF;
    select concat('switch ',in_dbname,'.',loop_t_name,' to innodb') msg;
    SET @s=concat('alter table ',in_dbname,'.',loop_t_name,' engine innodb');
    PREPARE stmt1 FROM @s;
    execute stmt1;
    DEALLOCATE PREPARE stmt1;

    END LOOP;
    CLOSE cur;

    select concat('tables not innodb on ',in_dbname) msg;
    select table_name from information_schema.tables where table_schema=in_dbname and engine<>'INNODB';

    END $$
DELIMITER ;

DELIMITER $$
DROP PROCEDURE IF EXISTS `SWITCH_TO_UTF8` $$
CREATE PROCEDURE `SWITCH_TO_UTF8`(
  IN in_dbname varchar(150)
)
    MODIFIES SQL DATA
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE loop_t_name VARCHAR(255);
    DECLARE collate_name VARCHAR(150);
    DECLARE cur CURSOR FOR select table_name from information_schema.tables where table_schema=in_dbname and TABLE_TYPE='BASE TABLE';
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    select COLLATION_NAME into collate_name from INFORMATION_SCHEMA.COLLATIONS WHERE CHARACTER_SET_NAME = 'utf8' and `is_default` ='Yes' ;


    SET foreign_key_checks = 0;

    OPEN cur;
    read_loop: LOOP
    FETCH cur INTO loop_t_name;
    IF done THEN
        LEAVE read_loop;
    END IF;

    select loop_t_name msg;
    SET @s=concat('ALTER TABLE ',in_dbname,'.',loop_t_name, ' CONVERT TO CHARACTER SET utf8 COLLATE ',collate_name,' ');
    select @s msg;
    PREPARE stmt1 FROM @s;
    execute stmt1;
    DEALLOCATE PREPARE stmt1;

    END LOOP;
    CLOSE cur;

    SET @s=concat('YOU SHOULD CALL: ',char(10),'ALTER DATABASE ',in_dbname,' CHARACTER SET utf8 COLLATE ',collate_name,' ');
    select @s msg;
    /*
    PREPARE stmt1 FROM @s;
    execute stmt1;
    DEALLOCATE PREPARE stmt1;
    */
    SET foreign_key_checks = 1;


END $$


DROP  PROCEDURE  IF EXISTS `SWITCH_TO_UTF8MB4` $$
CREATE  PROCEDURE `SWITCH_TO_UTF8MB4`(
  IN in_dbname varchar(150)
)
    MODIFIES SQL DATA
BEGIN
DECLARE done INT DEFAULT FALSE;
DECLARE loop_t_name VARCHAR(255);
DECLARE collate_name VARCHAR(150);
DECLARE cur CURSOR FOR select table_name from information_schema.tables where table_schema=in_dbname and TABLE_TYPE='BASE TABLE' and table_collation <>'utf8mb4_general_ci';
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

select COLLATION_NAME into collate_name from INFORMATION_SCHEMA.COLLATIONS WHERE CHARACTER_SET_NAME = 'utf8mb4' and `is_default` ='Yes' ;


SET foreign_key_checks = 0;

OPEN cur;
read_loop: LOOP
  FETCH cur INTO loop_t_name;
  IF done THEN
    LEAVE read_loop;
  END IF;

  select loop_t_name msg;
  SET @s=concat('ALTER TABLE ',in_dbname,'.',loop_t_name, ' CONVERT TO CHARACTER SET utf8mb4 COLLATE ',collate_name,' ');
  select @s msg;
  PREPARE stmt1 FROM @s;
  execute stmt1;
  DEALLOCATE PREPARE stmt1;

END LOOP;
CLOSE cur;

SET foreign_key_checks = 1;

END $$

DROP  PROCEDURE  IF EXISTS `SWITCH_TO_LATIN1` $$
CREATE  PROCEDURE `SWITCH_TO_LATIN1`(
  IN in_dbname varchar(150)
)
    MODIFIES SQL DATA
BEGIN
DECLARE done INT DEFAULT FALSE;
DECLARE loop_t_name VARCHAR(50);
DECLARE collate_name VARCHAR(150);
DECLARE cur CURSOR FOR select table_name from information_schema.tables where table_schema=in_dbname and TABLE_TYPE='BASE TABLE' and table_collation <>'latin1_swedish_ci';
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;



SET foreign_key_checks = 0;

OPEN cur;
read_loop: LOOP
  FETCH cur INTO loop_t_name;
  IF done THEN
    LEAVE read_loop;
  END IF;

  select loop_t_name msg;
  SET @s=concat('ALTER TABLE ',in_dbname,'.',loop_t_name, ' CONVERT TO CHARACTER SET latin1 COLLATE latin1_swedish_ci ');
  select @s msg;
  PREPARE stmt1 FROM @s;
  execute stmt1;
  DEALLOCATE PREPARE stmt1;

END LOOP;
CLOSE cur;

SET foreign_key_checks = 1;

END $$
-- SOURCE FILE: ./src//000-basics/002.ds.definition.sql 

DELIMITER ;





CREATE TABLE IF NOT EXISTS `ds` (
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `title` varchar(255) DEFAULT NULL,
  `reorderfield` varchar(255) DEFAULT NULL,
  `use_history` tinyint(4) DEFAULT '0',
  `searchfield` varchar(255) DEFAULT NULL,
  `displayfield` varchar(255) DEFAULT NULL,
  `sortfield` varchar(50) DEFAULT NULL,
  `searchany` tinyint(4) DEFAULT '1',
  `hint` longtext,
  `overview_tpl` longtext,
  `sync_table` varchar(255) DEFAULT NULL,
  `writetable` varchar(255) DEFAULT NULL,
  `globalsearch` tinyint(4) DEFAULT '0',
  PRIMARY KEY (`table_name`)
);

CREATE TABLE IF NOT EXISTS `ds_access` (
  `role` varchar(100) NOT NULL DEFAULT '',
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `read` tinyint(4) DEFAULT '0',
  `write` tinyint(4) DEFAULT '0',
  `delete` tinyint(4) DEFAULT '0',
  `append` tinyint(4) DEFAULT '0',
  PRIMARY KEY (`role`,`table_name`)
);

delete from ds_access where table_name not in (select table_name from ds);

call addForeignKeyIfNotExists(    
    'ds_access',
    'ds', 
    'fk_ds_access_ds',
    'table_name',
    'table_name',
    'cascade',
    'cascade'
);

CREATE TABLE IF NOT EXISTS `ds_column` (
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `column_name` varchar(100) NOT NULL DEFAULT '',
  `default_value` varchar(255) DEFAULT NULL,
  `default_max_value` bigint(20) DEFAULT '10000000',
  `default_min_value` bigint(20) DEFAULT '0',
  `update_value` varchar(255) DEFAULT NULL,

  `is_primary` tinyint(4) DEFAULT '0',
  PRIMARY KEY (`table_name`,`column_name`)
);

CREATE TABLE IF NOT EXISTS `ds_column_dialog_label` (
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `column_name` varchar(100) NOT NULL DEFAULT '',
  `language` varchar(3) NOT NULL DEFAULT 'DE',
  `label` varchar(255) NOT NULL,
  `text` longtext,
  `position` int(11) DEFAULT NULL,
  `field_path` varchar(255) NOT NULL,
  PRIMARY KEY (`table_name`,`column_name`,`language`)
);


CREATE TABLE IF NOT EXISTS `ds_column_form_label` (
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `column_name` varchar(100) NOT NULL DEFAULT '',
  `language` varchar(3) NOT NULL DEFAULT 'DE',
  `label` varchar(255) NOT NULL,
  `xtype` varchar(255) DEFAULT NULL,
  `field_path` varchar(255) NOT NULL DEFAULT '',
  `position` int(11) DEFAULT '0',
  PRIMARY KEY (`table_name`,`column_name`,`language`)
);

CREATE TABLE IF NOT EXISTS `ds_column_list_label` (
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `column_name` varchar(100) NOT NULL DEFAULT '',
  `language` varchar(3) NOT NULL DEFAULT 'DE',
  `label` varchar(255) NOT NULL,
  `xtype` varchar(255) DEFAULT 'gridcolumn',
  `editor` varchar(255) DEFAULT NULL,
  `position` int(11) DEFAULT '0',
  PRIMARY KEY (`table_name`,`column_name`,`language`)
);




CREATE TABLE IF NOT EXISTS `ds_column_types` (
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `column_name` varchar(100) NOT NULL DEFAULT '',
  `xtype` varchar(255) NOT NULL,
  `default_value` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`table_name`,`column_name`)
);


CREATE TABLE IF NOT EXISTS `ds_contextmenu` (
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `name` varchar(100) NOT NULL DEFAULT '',
  `component` varchar(255) NOT NULL,
  `paramfield` varchar(255) NOT NULL,
  `position` int(11) DEFAULT '0',
  PRIMARY KEY (`table_name`,`name`),
  CONSTRAINT `fk_ds_ctx_ds` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE IF NOT EXISTS `ds_contextmenu_groups` (
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `name` varchar(50) NOT NULL DEFAULT '',
  `group` varchar(50) NOT NULL DEFAULT '',
  PRIMARY KEY (`table_name`,`name`,`group`),
  CONSTRAINT `fk_ds_ctx_gr_ds_ctx` FOREIGN KEY (`table_name`, `name`) REFERENCES `ds_contextmenu` (`table_name`, `name`) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE IF NOT EXISTS `ds_contextmenu_params` (
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `name` varchar(50) NOT NULL DEFAULT '',
  `param` varchar(50) NOT NULL DEFAULT '',
  PRIMARY KEY (`table_name`,`name`,`param`),
  CONSTRAINT `fk_ds_ctx_pr_ds_ctx` FOREIGN KEY (`table_name`, `name`) REFERENCES `ds_contextmenu` (`table_name`, `name`) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE IF NOT EXISTS `ds_contextmenu_session_groups` (
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `name` varchar(50) NOT NULL DEFAULT '',
  `group` varchar(50) NOT NULL DEFAULT '',
  PRIMARY KEY (`table_name`,`name`,`group`),
  CONSTRAINT `fk_ds_ctx_sgr_ds_ctx` FOREIGN KEY (`table_name`, `name`) REFERENCES `ds_contextmenu` (`table_name`, `name`) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE IF NOT EXISTS `ds_dropdownfields` (
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `name` varchar(100) NOT NULL DEFAULT '',
  `idfield` varchar(255) DEFAULT NULL,
  `displayfield` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`table_name`,`name`)
);



CREATE TABLE IF NOT EXISTS `ds_preview_form_label` (
  `table_name` varchar(64) NOT NULL,
  `column_name` varchar(64) NOT NULL,
  `language` varchar(3) NOT NULL DEFAULT 'DE',
  `label` varchar(255) NOT NULL,
  `xtype` varchar(255) DEFAULT NULL,
  `field_path` varchar(255) NOT NULL DEFAULT '',
  `position` int(11) DEFAULT '0',
  PRIMARY KEY (`table_name`,`column_name`,`language`)
);

CREATE TABLE IF NOT EXISTS `ds_reference_tables` (
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `reference_table_name` varchar(100) NOT NULL DEFAULT '',
  `columnsdef` longtext DEFAULT NULL,
  PRIMARY KEY (`table_name`,`reference_table_name`)
);

call addFieldIfNotExists('ds_reference_tables','position','integer default 0');


CREATE TABLE IF NOT EXISTS `ds_contextmenu_groups` (
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `name` varchar(50) NOT NULL DEFAULT '',
  `group` varchar(50) NOT NULL DEFAULT '',
  PRIMARY KEY (`table_name`,`name`,`group`),
  CONSTRAINT `fk_ds_ctx_gr_ds_ctx` FOREIGN KEY (`table_name`, `name`) REFERENCES `ds_contextmenu` (`table_name`, `name`) ON DELETE CASCADE ON UPDATE CASCADE
);







CREATE TABLE IF NOT EXISTS `ds_trigger` (
  `type` varchar(100) NOT NULL DEFAULT '',
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `program` varchar(255) NOT NULL,
  PRIMARY KEY (`type`,`table_name`),
  KEY `fk_ds_trigger_ds` (`table_name`),
  CONSTRAINT `fk_ds_trigger_ds` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE
);



create table IF NOT EXISTS ds_sync_data (
  `id` integer not null primary key,

  table_name varchar(64) not null,
  foreign_table_name varchar(64) not null,
  url varchar(255) not null,
  name varchar(255) not null,
  sync_id varchar(255) not null,
  get_oauth varchar(255) not null ,
  set_oauth varchar(255) not null ,
  checkssl tinyint not null default 1
);


create table IF NOT EXISTS log_ds_sync
(
  `id` integer not null auto_increment,
  `type` varchar(10) not null,
  `table_name` varchar(64) not null ,
  `sync_id` varchar(50) not null,
  `createtime` datetime not null,
  `msg` varchar(255) not null,
  primary key (`id`),
  KEY `idx_log_ds_sync_table_name` (`table_name`)
);


call addFieldIfNotExists('ds','sortfield','varchar(50) default \'\'');

call addFieldIfNotExists('ds_column_list_label','summaryrenderer','varchar(255) default \'\'');
call addFieldIfNotExists('ds_column_list_label','renderer','varchar(255) default \'\'');
call addFieldIfNotExists('ds_column_list_label','listfiltertype','varchar(255) default \'\'');


call addFieldIfNotExists('ds_column_list_label','summarytype','varchar(255) default \'\'');
call addFieldIfNotExists('ds','listselectionmodel','varchar(100) default \'cellmodel\'');
call addFieldIfNotExists('ds','sync_table','varchar(255) DEFAULT NULL');
call addFieldIfNotExists('ds','sync_view','varchar(255) DEFAULT NULL');
call addFieldIfNotExists('ds','writetable','varchar(255) DEFAULT NULL');
call addFieldIfNotExists('ds','globalsearch','tinyint(4) DEFAULT 0');

call addFieldIfNotExists('ds_column','update_value','varchar(255) DEFAULT NULL');
call addFieldIfNotExists('ds_column','update_value','varchar(255) DEFAULT NULL');

call addFieldIfNotExists('ds','syncable','tinyint(4) DEFAULT 0');
call addFieldIfNotExists('ds_column','syncable','tinyint(4) DEFAULT 0');
call addFieldIfNotExists('ds_column','is_primary','tinyint(4) DEFAULT 0');
-- call addFieldIfNotExists('ds_column','is_nullable','tinyint(4) DEFAULT 0');
call addFieldIfNotExists('ds_reference_tables','columnsdef','varchar(1000) DEFAULT NULL');
call addFieldIfNotExists('ds_reference_tables','constraint_name',"varchar(64) default '' ");



call addFieldIfNotExists('ds_column','referenced_table','varchar(50) DEFAULT NULL');
call addFieldIfNotExists('ds_column','referenced_column_name','varchar(50) DEFAULT NULL');


call addFieldIfNotExists('ds_column','is_nullable','varchar(20) DEFAULT NULL');
call addFieldIfNotExists('ds_column','is_referenced','varchar(20) DEFAULT NULL');

DELIMITER ;



create table if not exists ds_genericbarcode(
  table_name varchar(100) not null,
  column_name varchar(100) not null,
  result_column_name varchar(100) not null,
  barcode_type varchar(100) default 'int25',
  pxwidth integer default 260,
  pxheight integer default 130,
  outputtype varchar(5) default 'png',
  primary key (table_name,column_name)
);


call addFieldIfNotExists('ds_column_list_label','hidden','tinyint default 0');
call addFieldIfNotExists('ds_column_list_label','active','tinyint default 1');

call addFieldIfNotExists('ds_column_form_label','hidden','tinyint default 0');
call addFieldIfNotExists('ds_column_form_label','active','tinyint default 1');

call addFieldIfNotExists('ds_preview_form_label','active','tinyint default 1');

call addFieldIfNotExists('ds','cssstyle','varchar(100)');

call addFieldIfNotExists('ds_preview_form_label','editor','varchar(100)');





CREATE TABLE IF NOT EXISTS `ds_checkboxreference_tables` (
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `columnsdef` varchar(1000) DEFAULT NULL,

  `mid_table_name` varchar(32) NOT NULL DEFAULT '',

  `reference_table_name` varchar(255) NOT NULL DEFAULT '',
  `reference_columnsdef` varchar(1000) DEFAULT NULL,

  PRIMARY KEY (`table_name`,`mid_table_name`)
);

CREATE TABLE IF NOT EXISTS  `ds_column_tagfields` (
  `table_name` varchar(64) NOT NULL,
  `column_name` varchar(64) NOT NULL,
  `language` varchar(3) NOT NULL DEFAULT 'DE',
  `label` varchar(255) NOT NULL,
  `xtype` varchar(255) DEFAULT NULL,
  `field_path` varchar(255) NOT NULL DEFAULT '',
  `position` int(11) DEFAULT '0',
  `hidden` tinyint(4) DEFAULT '0',
  `active` tinyint(4) DEFAULT '1',
  `referenced_table_name` varchar(32),
  `constraint_name` varchar(64) not null,
  `referenced_constraint_name` varchar(64),
  `intermedia_table_name` varchar(32),
  `table_name_json` varchar(255),
  `referenced_table_json` varchar(255),
  KEY (`table_name`),
  UNIQUE KEY (`table_name`,`column_name`,`language`),
  primary key (`constraint_name`,`referenced_constraint_name`),
  CONSTRAINT `fk_ds_column_tagfields_ds` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE

);









call addFieldIfNotExists('ds_column','writeable','tinyint default 1');
call addFieldIfNotExists('ds_column','note','varchar(50) default  \'\' ');

call addFieldIfNotExists('ds','alternativeformxtype','varchar(50) default  \'\' ');


call addFieldIfNotExists('ds_column_list_label','filterstore','varchar(255) default \'\'');
call addFieldIfNotExists('ds_sync_data','msg_get_oauth','varchar(255) default \'\'');
call addFieldIfNotExists('ds_sync_data','msg_set_oauth','varchar(255) default \'\'');
call addFieldIfNotExists('ds','read_table','varchar(32) default \'\'');


call addFieldIfNotExists('ds_sync_data','foreign_table_name','varchar(64) default \'\'');
call addFieldIfNotExists('ds_sync_data','url','varchar(100) default \'\'');


alter table ds_sync_data modify foreign_table_name varchar(64);
alter table ds_sync_data modify url varchar(100);



CREATE TABLE IF NOT EXISTS `ds_searchfields` (
  `table_name` varchar(64) NOT NULL,
  `column_name` varchar(64) NOT NULL,
  `active` tinyint(4) DEFAULT '0',
  PRIMARY KEY (`table_name`,`column_name`),
  KEY `idx_ds_searchfields_table_name` (`table_name`),
  CONSTRAINT `fk_ds_column_ds_searchfields` FOREIGN KEY (`table_name`, `column_name`) REFERENCES `ds_column` (`table_name`, `column_name`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_ds_ds_searchfields` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE
);
/*

CREATE INDEX `idx_ds_searchfields_table_name` on `ds_searchfields` (`table_name`);
alter table  `ds_searchfields` ADD CONSTRAINT  
`fk_ds_ds_searchfields` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE
;

*/

CREATE TABLE IF NOT EXISTS `ds_class` (
  `class_name` varchar(64) NOT NULL,
  PRIMARY KEY (`class_name`)
);



insert into `ds_class` (`class_name`) values ('Unklassifiziert') on duplicate key update `class_name`=values(`class_name`);
insert into `ds_class` (`class_name`) values ('Datenstamm') on duplicate key update `class_name`=values(`class_name`);
insert into `ds_class` (`class_name`) values ('Datenstamm-Berichte') on duplicate key update `class_name`=values(`class_name`);
insert into `ds_class` (`class_name`) values ('Reklamationstool') on duplicate key update `class_name`=values(`class_name`);
insert into `ds_class` (`class_name`) values ('Artikel') on duplicate key update `class_name`=values(`class_name`);
insert into `ds_class` (`class_name`) values ('Debitoren') on duplicate key update `class_name`=values(`class_name`);
insert into `ds_class` (`class_name`) values ('Kreditoren') on duplicate key update `class_name`=values(`class_name`);
insert into `ds_class` (`class_name`) values ('Warenwirtschaft') on duplicate key update `class_name`=values(`class_name`);

insert into `ds_class` (`class_name`) values ('Sendungsverfolgung') on duplicate key update `class_name`=values(`class_name`);

call addFieldIfNotExists('ds','class_name','varchar(64) default \'Unklassifiziert\'');


CREATE TABLE IF NOT EXISTS `ds_addcommands` (
  `table_name` varchar(64) NOT NULL,
  `xtype` varchar(64) NOT NULL,
  PRIMARY KEY (`table_name`,`xtype`),
  CONSTRAINT `fk_ds_ds_addcommands` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE
);

call addFieldIfNotExists('ds_addcommands','location','varchar(64) default \'toolbar\'');
call addFieldIfNotExists('ds_addcommands','position','integer default 1');
call addFieldIfNotExists('ds_addcommands','label','varchar(64) default \'\'');

CREATE TABLE IF NOT EXISTS `ds_addcommand_locations` ( id varchar (64) primary key);
insert into ds_addcommand_locations (id) values ('toolbar'),('formbuttons') on duplicate key update id=values(id);

UPDATE ds_addcommands SET `location`= 'toolbar' where `location` is null;

create index if not exists idx_ds_addcommands_table_name on ds_addcommands(table_name);
create index if not exists idx_ds_addcommands_location on ds_addcommands(location);

CALL addForeignKeyIfNotExists (
    'ds_addcommands',
    'ds_addcommand_locations',
    'fk_ds_addcommand_locations',
    
    'location',
    'id',
    
    'CASCADE',
    'CASCADE'
);

CREATE TABLE IF NOT EXISTS ds_addcommands_xtypes (
  `id` varchar(128) primary key,
  `name`varchar(255) not null
);

insert into ds_addcommands_xtypes(id,name) values 

  ('tbfill','Fill'),
  ('tbspacer','Spacer'),
  ('cmp_setup_export_config_command','DS Export-Config'),
  ('cmp_setup_update_history_tables_command','DS Refresh-History-DDL'),
  ('ds_refresh_information_schema_command','DS Refresh-DDL-Information'),
  ('ds_rmcache_command','DS Clear-Cache'),
  ('ds_cloneformlabel_export_command','DS Clone-Form-Label-Export'),
  ('ds_cloneformlabel_command','DS Clone-Form-Label-List'),
  ('ds_sync_command','DS Sync')

on duplicate key update id=values(id);



call addFieldIfNotExists('ds','special_add_panel','varchar(64) DEFAULT NULL');
call addFieldIfNotExists('ds','existsreal','tinyint default 0');
call addFieldIfNotExists('ds','searchany','tinyint default 0');
call addFieldIfNotExists('ds','hint','varchar(255) DEFAULT \'\'');
call addFieldIfNotExists('ds_column','hint','varchar(255) DEFAULT \'\'');
call addFieldIfNotExists('ds_column_list_label','hint','varchar(255) DEFAULT \'\'');
call addFieldIfNotExists('ds','overview_tpl','varchar(255) DEFAULT \'\'');


call addFieldIfNotExists('ds_column','data_type','varchar(255) default \'\'');
call addFieldIfNotExists('ds_column','is_nullable','varchar(5) default \'\'');
call addFieldIfNotExists('ds_column','column_key','varchar(255) default \'\'');
call addFieldIfNotExists('ds_column','column_type','varchar(255) default \'\'');
call addFieldIfNotExists('ds_column','character_maximum_length','bigint default 0');
call addFieldIfNotExists('ds_column','numeric_precision','integer default 0');
call addFieldIfNotExists('ds_column','numeric_scale','integer default 0');
call addFieldIfNotExists('ds','character_set_name','varchar(255) default \'\'');
call addFieldIfNotExists('ds_column','character_set_name','varchar(255) default \'\'');
call addFieldIfNotExists('ds_column','privileges','varchar(255) default \'\'');

call addFieldIfNotExists('ds_column','existsreal','tinyint default 0');
call addFieldIfNotExists('ds_access','existsreal','tinyint default 0');
call addFieldIfNotExists('ds','existsreal','tinyint default 0');




insert into `ds`
                  (`table_name`)
                  values
                  ('ds_class')
                  on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='DS Klasse',`reorderfield`='',`use_history`='0',`searchfield`='class_name',`displayfield`='class_name',
`sortfield`='',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='rowmodel',`sync_view`='',`read_table`='',`cssstyle`='',`existsreal`='1',`special_add_panel`='',`class_name`='Datenstamm' where `table_name`='ds_class';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_class','class_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='0',`is_referenced`='',`referenced_table`='',`referenced_column_name`='',
  `data_type`='varchar',`column_key`='PRI',`numeric_precision`=0,`numeric_scale`=0,`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`column_type`='varchar(64)',`character_maximum_length`='64' where `table_name`='ds_class' and `column_name`='class_name';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('administration','ds_class')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='1',`append`='1',`existsreal`='1' where `role`='administration' and `table_name`='ds_class';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_class','class_name','DE','class_name','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_class' and `column_name`='class_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_class','class_name','DE','Name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='' where `table_name`='ds_class' and `column_name`='class_name' and `language`='DE';
insert into `ds_dropdownfields`
                  (`table_name`,`name`)
                  values
                  ('ds_class','class_name')
                  on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='class_name',`displayfield`='class_name' where `table_name`='ds_class' and `name`='class_name';


call addFieldIfNotExists('ds_column_list_label','grouped','tinyint default 0');


call addFieldIfNotExists('ds','read_filter','text');


create table if not exists ds_sync_lock (
  id varchar(100) primary key,
  createtime datetime
);

insert into `ds`(`table_name`) values('ds') on duplicate key update `table_name`=values(`table_name`);

insert into `ds_addcommands`
                  (`table_name`,`xtype`)
                  values
                  ('ds','cmp_setup_export_config_command')
                  on duplicate key update `table_name`=values(`table_name`),`xtype`=values(`xtype`);

insert into `ds_addcommands`
                  (`table_name`,`xtype`)
                  values
                  ('ds','cmp_setup_update_history_tables_command')
                  on duplicate key update `table_name`=values(`table_name`),`xtype`=values(`xtype`);


alter table ds modify read_table varchar(64);


create table if not exists `ds_additional_columns` (

  `table_name` varchar(64) not null,
  `column_name` varchar(64) not null,
  `sql_command` text,
  `checked` tinyint default 0,
  `error_message` varchar(255),

  primary key (`table_name`,`column_name`),
  CONSTRAINT `fk_ds_additional_columns_ds` FOREIGN KEY (`table_name`) 
  REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE  

);

call addFieldIfNotExists('ds_sync_data','sync_id','varchar(10) DEFAULT NULL');

call create__unique_index(database(),'ds_sync_data','uidx_ds_sync_data_sync_id','sync_id');

create table if not exists ds_nm_tables(
  `table_name` varchar(64) not null,
  `referenced_table_name` varchar(64) default '',
  `constraint_name` varchar(64) not null,
  `referenced_constraint_name` varchar(64)  default '',
  `intermedia_table_name` varchar(64)  default '',

  `language` varchar(3) not null default 'DE',
  `label` varchar(255) not null default '',
  `position` integer default 99,
  `hidden` tinyint default 0,
  `active` tinyint default 0,


  `table_name_json` longtext,
  `referenced_table_json` longtext,
  PRIMARY KEY (`table_name`,`constraint_name`,`referenced_constraint_name`) -- ,

--  KEY `idx_ds_nm_tables_table_name` (`table_name`),
--  CONSTRAINT `fk_ds_nm_tables_ds` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE
)  ;

call addFieldIfNotExists('ds_reference_tables','active','tinyint default 1');


create table if not exists ds_calendar (
  table_name varchar(64),
  calendar_table_name varchar(64),
  primary key (table_name,calendar_table_name),
  name varchar(50) not null,
  reference varchar(255) not null,
  CONSTRAINT `fk_ds_calendar_ds_tn` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_ds_calendar_ds_ctn` FOREIGN KEY (`calendar_table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE
);

call addFieldIfNotExists('ds','listxtypeprefix','varchar(30) default \'listview\'');



CREATE TABLE if not exists `mv_session_groups` (
  `role` varchar(100) NOT NULL,
  PRIMARY KEY (`role`)
);

/*
create or replace VIEW `ds_access_all` AS 
  select ifnull(`tc`.`table_name`,`ds`.`table_name`) AS `table_name`,ifnull(`tc`.`role`,`ic`.`role`) AS `role`,ifnull(`tc`.`read`,0) AS `read`,ifnull(`tc`.`write`,0) AS `write`,ifnull(`tc`.`append`,0) AS `append`,ifnull(`tc`.`delete`,0) AS `delete` 
  from ((`mv_session_groups` `ic` join `ds`) left join `ds_access` `tc` on(`tc`.`table_name` = `ds`.`table_name` and `tc`.`role` = `ic`.`role`));
*/




create table if not exists ds_sync_remove (
  table_name varchar(64),
  filter_sql varchar(255),
  primary key (table_name),
  CONSTRAINT `fk_ds_sync_remove_ds_tn` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE
);


call addFieldIfNotExists('ds','phpexporter','varchar(30) default \'XlsxWriter\'');
call addFieldIfNotExists('ds','phpexporterfilename','varchar(30) default \'{GUID}\'');


create table if not exists ds_combined_tables (
  table_alias varchar(64),
  table_name varchar(64),
  primary key (table_alias,table_name),
  CONSTRAINT `fk_ds_combined_tables_ds_tn` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE
);

call addFieldIfNotExists('ds','combined','tinyint default 0');

create table if not exists ds_db_types_fieldtype(
  dbtype varchar(32) primary key,
  fieldtype varchar(32) not null
);
insert into ds_db_types_fieldtype (dbtype,fieldtype) values ('varchar','string') on duplicate key update fieldtype=values(fieldtype);
insert into ds_db_types_fieldtype (dbtype,fieldtype) values ('tinyint','boolean') on duplicate key update fieldtype=values(fieldtype);
insert into ds_db_types_fieldtype (dbtype,fieldtype) values ('int','integer') on duplicate key update fieldtype=values(fieldtype);
insert into ds_db_types_fieldtype (dbtype,fieldtype) values ('bigint','integer') on duplicate key update fieldtype=values(fieldtype);
insert into ds_db_types_fieldtype (dbtype,fieldtype) values ('decimal','number') on duplicate key update fieldtype=values(fieldtype);
insert into ds_db_types_fieldtype (dbtype,fieldtype) values ('double','number') on duplicate key update fieldtype=values(fieldtype);
insert into ds_db_types_fieldtype (dbtype,fieldtype) values ('float','number') on duplicate key update fieldtype=values(fieldtype);
insert into ds_db_types_fieldtype (dbtype,fieldtype) values ('date','date') on duplicate key update fieldtype=values(fieldtype);
insert into ds_db_types_fieldtype (dbtype,fieldtype) values ('time','date') on duplicate key update fieldtype=values(fieldtype);
insert into ds_db_types_fieldtype (dbtype,fieldtype) values ('datetime','date') on duplicate key update fieldtype=values(fieldtype);




call addFieldIfNotExists('ds_reference_tables','searchable','tinyint default 0');
call addFieldIfNotExists('ds_preview_form_label','editor','varchar(100)');
call addFieldIfNotExists('ds_column','deferedload','tinyint default 0');

call addFieldIfNotExists('ds','default_pagesize','integer default 100');


call addFieldIfNotExists('ds_reference_tables','autosync','tinyint default 1');
call addFieldIfNotExists('ds_reference_tables','path','varchar(100) default""');

insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
('ds_reference_tables','autosync') on duplicate key update `table_name`=values(`table_name`);

insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_reference_tables','autosync','DE','auto. Sync')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);


insert into ds_addcommands (table_name,xtype) values ('ds','ds_refresh_information_schema_command') on duplicate key update table_name=values(table_name);



CREATE TABLE IF NOT EXISTS `ds` (
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `title` varchar(255) DEFAULT NULL,
  `reorderfield` varchar(255) DEFAULT NULL,
  `use_history` tinyint(4) DEFAULT '0',
  `searchfield` varchar(255) DEFAULT NULL,
  `displayfield` varchar(255) DEFAULT NULL,
  `sortfield` varchar(50) DEFAULT NULL,
  `searchany` tinyint(4) DEFAULT '1',
  `hint` longtext,
  `overview_tpl` longtext,
  `sync_table` varchar(255) DEFAULT NULL,
  `writetable` varchar(255) DEFAULT NULL,
  `globalsearch` tinyint(4) DEFAULT '0',
  PRIMARY KEY (`table_name`)
);

CREATE TABLE IF NOT EXISTS `ds_access` (
  `role` varchar(100) NOT NULL DEFAULT '',
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `read` tinyint(4) DEFAULT '0',
  `write` tinyint(4) DEFAULT '0',
  `delete` tinyint(4) DEFAULT '0',
  `append` tinyint(4) DEFAULT '0',
  PRIMARY KEY (`role`,`table_name`)
);


CREATE TABLE IF NOT EXISTS `ds_column` (
  `table_name` varchar(255) NOT NULL,
  `column_name` varchar(255) NOT NULL,
  `default_value` varchar(255) DEFAULT NULL,
  `default_max_value` bigint(20) DEFAULT 10000000,
  `default_min_value` bigint(20) DEFAULT 0,
  `update_value` varchar(255) DEFAULT NULL,
  `is_primary` tinyint(4) DEFAULT NULL,

  `syncable` tinyint(4) DEFAULT 0,
  `is_nullable` tinyint(4) DEFAULT 0,
  `referenced_table` varchar(50) DEFAULT NULL,
  `referenced_column_name` varchar(50) DEFAULT NULL,
  `is_referenced` varchar(20) DEFAULT NULL,
  `existsreal` tinyint(4) DEFAULT 0,
  `deferedload` tinyint(4) DEFAULT 0,
  `data_type` varchar(255) DEFAULT '',
  `column_key` varchar(255) DEFAULT '',
  `column_type` varchar(255) DEFAULT '',
  `character_maximum_length` bigint(20) DEFAULT 0,
  `numeric_precision` int(11) DEFAULT 0,
  `numeric_scale` int(11) DEFAULT 0,
  `character_set_name` varchar(255) DEFAULT '',
  `privileges` varchar(255) DEFAULT '',
  PRIMARY KEY (`table_name`,`column_name`),
  UNIQUE KEY `idx_ds_column_table_name_column_name` (`table_name`,`column_name`),
  CONSTRAINT `fk_ds_column_ds` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE
);



CREATE TABLE IF NOT EXISTS `ds_column_form_label` (
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `column_name` varchar(100) NOT NULL DEFAULT '',
  `language` varchar(3) NOT NULL DEFAULT 'DE',
  `label` varchar(255) NOT NULL,
  `xtype` varchar(255) DEFAULT NULL,
  `field_path` varchar(255) NOT NULL DEFAULT '',
  `position` int(11) DEFAULT '0',
  PRIMARY KEY (`table_name`,`column_name`,`language`)
);

CREATE TABLE IF NOT EXISTS `ds_column_list_label` (
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `column_name` varchar(100) NOT NULL DEFAULT '',
  `language` varchar(3) NOT NULL DEFAULT 'DE',
  `label` varchar(255) NOT NULL,
  `xtype` varchar(255) DEFAULT 'gridcolumn',
  `editor` varchar(255) DEFAULT NULL,
  `position` int(11) DEFAULT '0',
  PRIMARY KEY (`table_name`,`column_name`,`language`)
);

CREATE TABLE IF NOT EXISTS `ds_preview_form_label` (
  `table_name` varchar(64) NOT NULL,
  `column_name` varchar(64) NOT NULL,
  `language` varchar(3) NOT NULL DEFAULT 'DE',
  `label` varchar(255) NOT NULL,
  `xtype` varchar(255) DEFAULT NULL,
  `field_path` varchar(255) NOT NULL DEFAULT '',
  `position` int(11) DEFAULT '0',
  PRIMARY KEY (`table_name`,`column_name`,`language`)
);

CREATE TABLE IF NOT EXISTS `ds_reference_tables` (
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `reference_table_name` varchar(100) NOT NULL DEFAULT '',
  `columnsdef` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`table_name`,`reference_table_name`)
);


CREATE TABLE IF NOT EXISTS `ds_form_properties`(
    `property`  varchar(32) ,
    `value_xtype` varchar(100),
    primary key (`property`)
);


CREATE TABLE IF NOT EXISTS `ds_column_form_properties` (
    `table_name` varchar(128) NOT NULL DEFAULT '',
    `column_name` varchar(100) NOT NULL DEFAULT '',
    `property` varchar(32) NOT NULL,
    `value` varchar(255) NOT NULL,
    PRIMARY KEY (`table_name`,`column_name`,`property`),

    CONSTRAINT `fk_ds_column_form_properties_form` FOREIGN KEY (`table_name`,`column_name`) REFERENCES `ds_column_form_label` (`table_name`,`column_name`) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT `fk_ds_column_form_properties_property` FOREIGN KEY (`property`) REFERENCES `ds_form_properties` (`property`) ON DELETE CASCADE ON UPDATE CASCADE
);

call addFieldIfNotExists('ds','sortfield','varchar(50) default \'\'');
call addFieldIfNotExists('ds_column_list_label','summaryrenderer','varchar(255) default \'\'');
call addFieldIfNotExists('ds_column_list_label','renderer','varchar(255) default \'\'');
call addFieldIfNotExists('ds_column_list_label','summarytype','varchar(255) default \'\'');
call addFieldIfNotExists('ds','listselectionmodel','varchar(100) default \'cellmodel\'');
call addFieldIfNotExists('ds','sync_table','varchar(255) DEFAULT NULL');
call addFieldIfNotExists('ds','sync_view','varchar(255) DEFAULT NULL');
call addFieldIfNotExists('ds','writetable','varchar(255) DEFAULT NULL');
call addFieldIfNotExists('ds','globalsearch','tinyint(4) DEFAULT 0');
call addFieldIfNotExists('ds_column','update_value','varchar(255) DEFAULT NULL');

call addFieldIfNotExists('ds','syncable','tinyint(4) DEFAULT 0');
call addFieldIfNotExists('ds_column','syncable','tinyint(4) DEFAULT 0');
call addFieldIfNotExists('ds_column','is_primary','tinyint(4) DEFAULT 0');

call addFieldIfNotExists('ds_reference_tables','columnsdef','varchar(1000) DEFAULT NULL');
call addFieldIfNotExists('ds_reference_tables','constraint_name','varchar(64)');
call addFieldIfNotExists('ds_column','referenced_table','varchar(50) DEFAULT NULL');
call addFieldIfNotExists('ds_column','referenced_column_name','varchar(50) DEFAULT NULL');
call addFieldIfNotExists('ds_column','is_nullable','varchar(20) DEFAULT NULL');
call addFieldIfNotExists('ds_column','is_referenced','varchar(20) DEFAULT NULL');

call addFieldIfNotExists('ds_column','data_type','varchar(255) default \'\'');
call addFieldIfNotExists('ds_column','is_nullable','varchar(5) default \'\'');
call addFieldIfNotExists('ds_column','column_key','varchar(255) default \'\'');
call addFieldIfNotExists('ds_column','column_type','varchar(255) default \'\'');
call addFieldIfNotExists('ds_column','character_maximum_length','bigint default 0');
call addFieldIfNotExists('ds_column','numeric_precision','integer default 0');
call addFieldIfNotExists('ds_column','numeric_scale','integer default 0');
call addFieldIfNotExists('ds','character_set_name','varchar(255) default \'\'');
call addFieldIfNotExists('ds_column','character_set_name','varchar(255) default \'\'');
call addFieldIfNotExists('ds_column','privileges','varchar(255) default \'\'');

call addFieldIfNotExists('ds_column','existsreal','tinyint default 0');
call addFieldIfNotExists('ds_access','existsreal','tinyint default 0');
call addFieldIfNotExists('ds','existsreal','tinyint default 0');



CREATE TABLE IF NOT EXISTS `ds_searchfields` (
  `table_name` varchar(64) NOT NULL,
  `column_name` varchar(64) NOT NULL,
  `active` tinyint(4) DEFAULT '0',
  PRIMARY KEY (`table_name`,`column_name`),
  CONSTRAINT `fk_ds_column_ds_searchfields` FOREIGN KEY (`table_name`, `column_name`) REFERENCES `ds_column` (`table_name`, `column_name`) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE IF NOT EXISTS `ds_class` (
  `class_name` varchar(64) NOT NULL,
  PRIMARY KEY (`class_name`)
);



insert into `ds_class` (`class_name`) values ('Unklassifiziert') on duplicate key update `class_name`=values(`class_name`);
insert into `ds_class` (`class_name`) values ('Datenstamm') on duplicate key update `class_name`=values(`class_name`);
insert into `ds_class` (`class_name`) values ('Datenstamm-Berichte') on duplicate key update `class_name`=values(`class_name`);
insert into `ds_class` (`class_name`) values ('Reklamationstool') on duplicate key update `class_name`=values(`class_name`);
insert into `ds_class` (`class_name`) values ('Artikel') on duplicate key update `class_name`=values(`class_name`);
insert into `ds_class` (`class_name`) values ('Debitoren') on duplicate key update `class_name`=values(`class_name`);
insert into `ds_class` (`class_name`) values ('Kreditoren') on duplicate key update `class_name`=values(`class_name`);
insert into `ds_class` (`class_name`) values ('Warenwirtschaft') on duplicate key update `class_name`=values(`class_name`);

insert into `ds_class` (`class_name`) values ('Sendungsverfolgung') on duplicate key update `class_name`=values(`class_name`);

call addFieldIfNotExists('ds','class_name','varchar(64) default \'Unklassifiziert\'');


CREATE TABLE IF NOT EXISTS `ds_addcommands` (
  `table_name` varchar(64) NOT NULL,
  `xtype` varchar(64) NOT NULL,
  PRIMARY KEY (`table_name`,`xtype`),
  CONSTRAINT `fk_ds_ds_addcommands` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE
);

call addFieldIfNotExists('ds','special_add_panel','varchar(64) DEFAULT NULL');
call addFieldIfNotExists('ds','existsreal','tinyint default 0');
call addFieldIfNotExists('ds','searchany','tinyint default 0');
call addFieldIfNotExists('ds','hint','varchar(255) DEFAULT \'\'');
call addFieldIfNotExists('ds','overview_tpl','varchar(255) DEFAULT \'\'');



create table if not exists ds_combined_tables (
  table_alias varchar(64),
  table_name varchar(64),
  primary key (table_alias,table_name),
  CONSTRAINT `fk_ds_combined_tables_ds_tn` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE
);

call addFieldIfNotExists('ds','combined','tinyint default 0');




create table if not exists ds_sync_remove (
  table_name varchar(64),
  filter_sql varchar(255),
  primary key (table_name),
  CONSTRAINT `fk_ds_sync_remove_ds_tn` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE
);


call addFieldIfNotExists('ds','phpexporter','varchar(30) default \'XlsxWriter\'');
call addFieldIfNotExists('ds','phpexporterfilename','varchar(30) default \'{GUID}\'');


create table if not exists ds_combined_tables (
  table_alias varchar(64),
  table_name varchar(64),
  primary key (table_alias,table_name),
  CONSTRAINT `fk_ds_combined_tables_ds_tn` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE
);

call addFieldIfNotExists('ds','combined','tinyint default 0');





call addFieldIfNotExists('ds_reference_tables','searchable','tinyint default 0');
call addFieldIfNotExists('ds_reference_tables','autosync','tinyint default 1');
call addFieldIfNotExists('ds_preview_form_label','editor','varchar(100)');
call addFieldIfNotExists('ds_column','deferedload','tinyint default 0');

call addFieldIfNotExists('ds','default_pagesize','integer default 100');




create table if not exists mv_referenced_tables (
  referenced_table_name varchar(255),
  table_name varchar(255),
  reference_column_names longtext
);

call addFieldIfNotExists('mv_referenced_tables','constraint_name','varchar(100) DEFAULT \'\'');






call addFieldIfNotExists('ds_dropdownfields','filterconfig','text');
call addFieldIfNotExists('ds_column_list_label','flex','fixed(5,2) default 1');
update ds_column_list_label set flex = 1 where flex is null;


/*

*/

call addFieldIfNotExists('ds','allowForm','tinyint default 1');
call addFieldIfNotExists('ds_column_list_label','direction','varchar(5) default \'ASC\'');
update ds_column_list_label set `direction`='ASC' where `direction` is null;
call addFieldIfNotExists('ds_column_list_label','align','varchar(8) default \'left\'');
update ds_column_list_label set `align`='left' where `align` is null;




call addFieldIfNotExists('ds_column_list_label','grouped','tinyint default 0');

call addFieldIfNotExists('ds','listviewbaseclass','varchar(255) default \'Tualo.DataSets.ListView\' ');

 

call addFieldIfNotExists('ds','showactionbtn','tinyint default 1');
update ds set showactionbtn=1 where showactionbtn is null;
update ds set globalsearch=0 where globalsearch is null;




call addFieldIfNotExists('ds_column_form_label','allowempty','tinyint default 1');
update ds_column_form_label set allowempty=1 where allowempty is null;

call addFieldIfNotExists('ds_column_list_label','grouped',' tinyint default 0');



call addFieldIfNotExists('ds_column_list_label','grouped','tinyint default 0 ');



CREATE TABLE IF NOT EXISTS `ds_column_list_export` (
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `column_name` varchar(100) NOT NULL DEFAULT '',
  `language` varchar(3) NOT NULL DEFAULT 'DE',
  `label` varchar(255) NOT NULL,
  `position` int(11) DEFAULT '0',
  `active` tinyint default 0,
  PRIMARY KEY (`table_name`,`column_name`,`language`),
  CONSTRAINT `fk_ds_column_list_export_ds_column`
  FOREIGN KEY (`table_name`,`column_name`)
  REFERENCES `ds_column`(`table_name`,`column_name`)
  ON DELETE CASCADE
  ON UPDATE CASCADE,
  CONSTRAINT `fk_ds_column_list_export_ds`
  FOREIGN KEY (`table_name`)
  REFERENCES `ds`(`table_name`)
  ON DELETE CASCADE
  ON UPDATE CASCADE
);

 CREATE OR REPLACE VIEW  `view_readtable_ds_column_list_export` AS
 select 
    ifnull(`ds_column_list_export`.`table_name`,`ic`.`table_name`) AS `table_name`,
    ifnull(`ds_column_list_export`.`column_name`,`ic`.`column_name`) AS `column_name`,
    ifnull(`ds_column_list_export`.`language`,'DE') AS `language`,
    ifnull(`ds_column_list_export`.`label`,`ic`.`column_name`) AS `label`,

    ifnull(`ds_column_list_export`.`position`,999) AS `position`,
    ifnull(`ds_column_list_export`.`active`,0) AS `active`
from 
(
  `ds_column` `ic` 
  left join `ds_column_list_export`
  on(((`ds_column_list_export`.`table_name` = `ic`.`table_name`)
  and (`ds_column_list_export`.`column_name` = `ic`.`column_name`)))
);



CREATE TABLE IF NOT EXISTS `ds_extended_panels` (
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `name` varchar(100) NOT NULL DEFAULT '',
  `xtype` varchar(100) NOT NULL DEFAULT '',
  `columnsdef` longtext DEFAULT NULL,
  `position` integer default 0,
  `active` tinyint default 1,
  PRIMARY KEY (`table_name`,`name`),

  CONSTRAINT `fk_ds_extended_panels_ds`
  FOREIGN KEY (`table_name`)
  REFERENCES `ds`(`table_name`)
  ON DELETE CASCADE
  ON UPDATE CASCADE

);


call addfieldifnotexists('ds_column','hint','varchar(255) default ""');
call addfieldifnotexists('ds_column_list_label','hint','varchar(255) default ""');

-- SOURCE FILE: ./src//000-basics/002.ds.form.addcommand_location.sql 
-- BEGIN DS ds_addcommand_locations
-- NAME: Schaltflächen-Position

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_addcommand_locations')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Schaltflächen-Position',`reorderfield`='',`use_history`='0',`searchfield`='id',`displayfield`='id',`sortfield`='id',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`syncable`='0',`cssstyle`='',`read_table`='',`existsreal`='1',`class_name`='Datenstamm',`special_add_panel`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`allowForm`='0',`alternativeformxtype`='',`character_set_name`='',`default_pagesize`='100',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_addcommand_locations';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_addcommand_locations','id')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`is_primary`='1',`syncable`='0',`update_value`='',`is_nullable`='NO',`is_referenced`='',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_addcommand_locations' and `column_name`='id';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_addcommand_locations')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='1',`delete`='1',`append`='1',`existsreal`='0' where `role`='administration' and `table_name`='ds_addcommand_locations';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_addcommand_locations')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='ds_addcommand_locations';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_addcommand_locations','id','DE','id','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_addcommand_locations' and `column_name`='id' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_addcommand_locations','id','DE','id')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0',`listfiltertype`='' where `table_name`='ds_addcommand_locations' and `column_name`='id' and `language`='DE';
insert into `ds_dropdownfields`
                    (`table_name`,`name`)
                    values
                    ('ds_addcommand_locations','id')
                    on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='id',`displayfield`='id',`filterconfig`='' where `table_name`='ds_addcommand_locations' and `name`='id';
insert into `ds_nm_tables`
                    (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                    values
                    ('ds_addcommand_locations','fk_ds_addcommand_locations','fk_ds_ds_addcommands','DE','')
                    on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds',`intermedia_table_name`='ds_addcommands',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_addcommands__location\":\"ds_addcommand_locations__id\"}',`referenced_table_json`='{\"ds_addcommands__table_name\":\"ds__table_name\"}' where `table_name`='ds_addcommand_locations' and `constraint_name`='fk_ds_addcommand_locations' and `referenced_constraint_name`='fk_ds_ds_addcommands';
-- END DS ds_addcommand_locations



-- SOURCE FILE: ./src//000-basics/002.ds.form.ds_addcommands_xtypes.sql 
-- ds_addcommands_xtypes
-- SOURCE FILE: ./src//000-basics/009.proc-ds_cloneformlabel.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `ds_cloneformlabel` //
CREATE PROCEDURE `ds_cloneformlabel`( 
    in in_table_name varchar(64), 
    out result tinyint,
    out msg varchar(255)
)
    MODIFIES SQL DATA
BEGIN

    insert into ds_column_list_label (table_name,column_name,language,label,position,xtype)
    select table_name,column_name,language,label,position,if(substring(xtype,1,9)='combobox_',concat('column_',substring(xtype,10,128)),'gridcolumn') xtype from ds_column_form_label where ds_column_form_label.table_name = in_table_name
    on duplicate key update label=values(label),position=values(position),xtype=values(xtype);

    SET msg = 'Done';
    SET result = 1;

END //



DROP PROCEDURE IF EXISTS `ds_cloneformlabelexport` //
CREATE PROCEDURE `ds_cloneformlabelexport`( 
    in in_table_name varchar(64), 
    out result tinyint,
    out msg varchar(255)
)
    MODIFIES SQL DATA
BEGIN

    insert into ds_column_list_export (table_name,column_name,language,label,position)
    select table_name,column_name,language,label,position from ds_column_form_label where ds_column_form_label.table_name = in_table_name
    on duplicate key update label=values(label),position=values(position);

    SET msg = 'Done';
    SET result = 1;

END //
-- SOURCE FILE: ./src//000-basics/010-ds_referenced_manual.sql 
DELIMITER ;

CREATE TABLE IF NOT EXISTS `ds_referenced_manual` (
  `table_name` varchar(128) NOT NULL DEFAULT '',
  `referenced_table_name` varchar(128) NOT NULL DEFAULT '',
  PRIMARY KEY (`table_name`,`referenced_table_name`),

  CONSTRAINT `fk_ds_referenced_manual_table_name`
  FOREIGN KEY (`table_name`)
  REFERENCES `ds`(`table_name`)
  ON DELETE CASCADE 
  ON UPDATE CASCADE,

  CONSTRAINT `fk_ds_referenced_manual_referenced_table_name`
  FOREIGN KEY (`referenced_table_name`)
  REFERENCES `ds`(`table_name`)
  ON DELETE CASCADE 
  ON UPDATE CASCADE

);

CREATE OR REPLACE VIEW view_readtable_ds_referenced_manual AS
SELECT * FROM ds_referenced_manual;

CREATE TABLE IF NOT EXISTS `ds_referenced_manual_columns` (
  `table_name` varchar(128) NOT NULL DEFAULT '',
  `referenced_table_name` varchar(128) NOT NULL DEFAULT '',

  `column_name` varchar(128),
  `referenced_column_name` varchar(128),
  PRIMARY KEY (`table_name`,`referenced_table_name`,`column_name`),

  CONSTRAINT `fk_ds_referenced_manual_columns_ds_referenced_manual`
  FOREIGN KEY (`table_name`,`referenced_table_name`)
  REFERENCES `ds_referenced_manual`(`table_name`,`referenced_table_name`)
  ON DELETE CASCADE 
  ON UPDATE CASCADE,

  CONSTRAINT `fk_ds_referenced_manual_columns_ds_column`
  FOREIGN KEY (`table_name`,`column_name`)
  REFERENCES `ds_column`(`table_name`,`column_name`)
  ON DELETE CASCADE 
  ON UPDATE CASCADE,

  CONSTRAINT `fk_ds_referenced_manual_columns_ds_column_ref`
  FOREIGN KEY (`referenced_table_name`,`referenced_column_name`)
  REFERENCES `ds_column`(`table_name`,`column_name`)
  ON DELETE CASCADE 
  ON UPDATE CASCADE

);



CREATE OR REPLACE VIEW view_readtable_ds_referenced_manual_columns AS
SELECT * FROM ds_referenced_manual_columns;




-- BEGIN DS ds_referenced_manual
-- NAME: DS manuelle Referenzen

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_referenced_manual')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='DS manuelle Referenzen',`reorderfield`='',`use_history`='0',`searchfield`='referenced_table_name',`displayfield`='referenced_table_name',`sortfield`='referenced_table_name',`searchany`='1',`hint`='',`overview_tpl`='',`writetable`='',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`read_table`='view_readtable_ds_referenced_manual',`existsreal`='1',`combined`='0',`default_pagesize`='100',`cssstyle`='',`class_name`='Datenstamm',`special_add_panel`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`allowForm`='0',`character_set_name`='',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_referenced_manual';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_referenced_manual','referenced_table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`existsreal`='1',`deferedload`='0',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`writeable`='1',`note`='' where `table_name`='ds_referenced_manual' and `column_name`='referenced_table_name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_referenced_manual','table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`existsreal`='1',`deferedload`='0',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`writeable`='1',`note`='' where `table_name`='ds_referenced_manual' and `column_name`='table_name';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_referenced_manual')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='1',`delete`='1',`append`='1',`existsreal`='0' where `role`='administration' and `table_name`='ds_referenced_manual';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_referenced_manual')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='ds_referenced_manual';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_referenced_manual','referenced_table_name','DE','Verweis','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='combobox_ds_tabelle',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_referenced_manual' and `column_name`='referenced_table_name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_referenced_manual','table_name','DE','Tabelle','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='combobox_ds_tabelle',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_referenced_manual' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_referenced_manual','referenced_table_name','DE','Verweis')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='column_ds_tabelle',`editor`='combobox_ds_tabelle',`position`='0',`hidden`='0',`active`='1',`summaryrenderer`='',`summarytype`='',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_referenced_manual' and `column_name`='referenced_table_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_referenced_manual','table_name','DE','Tabelle')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='column_ds_tabelle',`editor`='combobox_ds_tabelle',`position`='0',`hidden`='0',`active`='1',`summaryrenderer`='',`summarytype`='',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_referenced_manual' and `column_name`='table_name' and `language`='DE';
insert into `ds_nm_tables`
                    (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                    values
                    ('ds_referenced_manual','fk_ds_referenced_manual_columns_ds_referenced_manual','fk_ds_referenced_manual_columns_ds_column','DE','')
                    on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds_column',`intermedia_table_name`='ds_referenced_manual_columns',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_referenced_manual_columns__table_name\":\"ds_referenced_manual__table_name\",\"ds_referenced_manual_columns__referenced_table_name\":\"ds_referenced_manual__referenced_table_name\",\"ds_referenced_manual_columns__referenced_table_name\":\"ds_referenced_manual__referenced_table_name\"}',`referenced_table_json`='{\"ds_referenced_manual_columns__column_name\":\"ds_column__column_name\",\"ds_referenced_manual_columns__table_name\":\"ds_column__table_name\",\"ds_referenced_manual_columns__column_name\":\"ds_column__column_name\"}' where `table_name`='ds_referenced_manual' and `constraint_name`='fk_ds_referenced_manual_columns_ds_referenced_manual' and `referenced_constraint_name`='fk_ds_referenced_manual_columns_ds_column';
insert into `ds_nm_tables`
                    (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                    values
                    ('ds_referenced_manual','fk_ds_referenced_manual_columns_ds_referenced_manual','fk_ds_referenced_manual_columns_ds_column_ref','DE','')
                    on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds_column',`intermedia_table_name`='ds_referenced_manual_columns',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_referenced_manual_columns__table_name\":\"ds_referenced_manual__table_name\",\"ds_referenced_manual_columns__table_name\":\"ds_referenced_manual__table_name\",\"ds_referenced_manual_columns__referenced_table_name\":\"ds_referenced_manual__referenced_table_name\"}',`referenced_table_json`='{\"ds_referenced_manual_columns__referenced_table_name\":\"ds_column__table_name\",\"ds_referenced_manual_columns__referenced_column_name\":\"ds_column__column_name\",\"ds_referenced_manual_columns__referenced_column_name\":\"ds_column__column_name\"}' where `table_name`='ds_referenced_manual' and `constraint_name`='fk_ds_referenced_manual_columns_ds_referenced_manual' and `referenced_constraint_name`='fk_ds_referenced_manual_columns_ds_column_ref';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_referenced_manual','ds')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_referenced_manual__table_name\":\"ds__table_name\"}',`searchable`='0',`autosync`='1',`constraint_name`='fk_ds_referenced_manual_table_name',`active`='0' where `table_name`='ds_referenced_manual' and `reference_table_name`='ds';
-- END DS ds_referenced_manual


-- BEGIN DS ds_referenced_manual_columns
-- NAME: Spalten-Verweis

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_referenced_manual_columns')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Spalten-Verweis',`reorderfield`='',`use_history`='0',`searchfield`='referenced_column_name',`displayfield`='referenced_column_name',`sortfield`='referenced_column_name',`searchany`='1',`hint`='',`overview_tpl`='',`writetable`='',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`read_table`='view_readtable_ds_referenced_manual_columns',`existsreal`='1',`combined`='0',`default_pagesize`='100',`cssstyle`='',`class_name`='Datenstamm',`special_add_panel`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`allowForm`='0',`character_set_name`='',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_referenced_manual_columns';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_referenced_manual_columns','column_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`existsreal`='1',`deferedload`='0',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`writeable`='1',`note`='' where `table_name`='ds_referenced_manual_columns' and `column_name`='column_name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_referenced_manual_columns','referenced_column_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`existsreal`='1',`deferedload`='0',`data_type`='varchar',`column_key`='',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`writeable`='1',`note`='' where `table_name`='ds_referenced_manual_columns' and `column_name`='referenced_column_name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_referenced_manual_columns','referenced_table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`existsreal`='1',`deferedload`='0',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`writeable`='1',`note`='' where `table_name`='ds_referenced_manual_columns' and `column_name`='referenced_table_name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_referenced_manual_columns','table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`existsreal`='1',`deferedload`='0',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`writeable`='1',`note`='' where `table_name`='ds_referenced_manual_columns' and `column_name`='table_name';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_referenced_manual_columns')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='1',`delete`='1',`append`='1',`existsreal`='0' where `role`='administration' and `table_name`='ds_referenced_manual_columns';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_referenced_manual_columns')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='ds_referenced_manual_columns';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_referenced_manual_columns','column_name','DE','Spalte','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='2',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_referenced_manual_columns' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_referenced_manual_columns','referenced_column_name','DE','Spaltenverweis','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='3',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_referenced_manual_columns' and `column_name`='referenced_column_name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_referenced_manual_columns','referenced_table_name','DE','Verweis','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='1',`hidden`='1',`active`='1',`allowempty`='1' where `table_name`='ds_referenced_manual_columns' and `column_name`='referenced_table_name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_referenced_manual_columns','table_name','DE','Tabelle','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='1',`active`='1',`allowempty`='1' where `table_name`='ds_referenced_manual_columns' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_referenced_manual_columns','column_name','DE','Spalte')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='2',`hidden`='0',`active`='1',`summaryrenderer`='',`summarytype`='',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_referenced_manual_columns' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_referenced_manual_columns','referenced_column_name','DE','Spaltenverweis')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='3',`hidden`='0',`active`='1',`summaryrenderer`='',`summarytype`='',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_referenced_manual_columns' and `column_name`='referenced_column_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_referenced_manual_columns','referenced_table_name','DE','Verweis')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='1',`hidden`='1',`active`='1',`summaryrenderer`='',`summarytype`='',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_referenced_manual_columns' and `column_name`='referenced_table_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_referenced_manual_columns','table_name','DE','Tabelle')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`hidden`='1',`active`='1',`summaryrenderer`='',`summarytype`='',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_referenced_manual_columns' and `column_name`='table_name' and `language`='DE';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_referenced_manual_columns','ds_column')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_referenced_manual_columns__referenced_table_name\":\"ds_column__table_name\",\"ds_referenced_manual_columns__referenced_column_name\":\"ds_column__column_name\"}',`searchable`='0',`autosync`='1',`constraint_name`='fk_ds_referenced_manual_columns_ds_column_ref',`active`='0' where `table_name`='ds_referenced_manual_columns' and `reference_table_name`='ds_column';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_referenced_manual_columns','ds_referenced_manual')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_referenced_manual_columns__referenced_table_name\":\"ds_referenced_manual__referenced_table_name\",\"ds_referenced_manual_columns__table_name\":\"ds_referenced_manual__table_name\"}',`searchable`='0',`autosync`='1',`constraint_name`='fk_ds_referenced_manual_columns_ds_referenced_manual',`active`='1' where `table_name`='ds_referenced_manual_columns' and `reference_table_name`='ds_referenced_manual';
-- END DS ds_referenced_manual_columns



-- SOURCE FILE: ./src//000-basics/010.ds.ddl.002.sql 

delimiter ;


create table if not exists ds_sync_hstrtable_lock (
    `table_name` varchar(64) not null primary key,
    `locktime` datetime not null
);


insert into `ds_class` (`class_name`) values ('Datenstamm-Berichte') on duplicate key update `class_name`=values(`class_name`);

create table if not exists ds_pdf_reports_units( id varchar(5),primary key (id));  
insert into ds_pdf_reports_units(id)values('mm') on duplicate key update `id`=values(`id`);

create table if not exists ds_pdf_reports_fonts( id varchar(20),primary key (id));  
insert into ds_pdf_reports_fonts(id)values('dejavusans') on duplicate key update `id`=values(`id`);




create table if not exists ds_pdf_reports( 

  name varchar(64),
  primary key (name),

  unit varchar(5) default 'mm',
  height varchar(10) default '297',
  width varchar(10) default '210',

  filename varchar(50) default '{GUID}.pdf',
  
  subject varchar(50) default '-',
  author varchar(50) default '-',
  title varchar(50) default '-',

  font varchar(20) default 'dejavusans',


  template text,
  header text,
  footer text
  

);
-- alter table ds_pdf_reports add header text;
-- alter table ds_pdf_reports add footer text;




-- create index `ds_pdf_reports_unit`on ds_pdf_reports(`unit`);
-- create index `ds_pdf_reports_font`on ds_pdf_reports(`font`);


create table if not exists ds_pdf_reports_ds( 

  table_name varchar(64),
  name varchar(64),
  primary key (table_name,name)
);


call addFieldIfNotExists('ds_pdf_reports_ds','active','tinyint default 0');


-- alter table ds_pdf_reports_ds add CONSTRAINT `fk_ds_pdf_reports_ds_ds_tn` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE;
-- alter table ds_pdf_reports_ds add CONSTRAINT `fk_ds_pdf_reports_ds_ds_pdf_reports_tn` FOREIGN KEY (`name`) REFERENCES `ds_pdf_reports` (`name`) ON DELETE CASCADE ON UPDATE CASCADE;

-- alter table ds_pdf_reports add CONSTRAINT `fk_ds_pdf_reports_ds_pdf_reports_units_tn` FOREIGN KEY (`unit`) REFERENCES `ds_pdf_reports_units` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
-- alter table ds_pdf_reports add CONSTRAINT `fk_ds_pdf_reports_ds_pdf_reports_fonts_tn` FOREIGN KEY (`font`) REFERENCES `ds_pdf_reports_fonts` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

-- alter table ds_pdf_reports_ds add active tinyint default 0;




call addFieldIfNotExists('ds_pdf_reports','templatetype','varchar(20) default \'html\' ');


/*
create or replace view view_ds_readtable as
select
  ifnull(ds.table_name,mv_ds.table_name) table_name,
  ifnull(ds.title,mv_ds.table_name) title,
  reorderfield,
  ifnull(use_history,0) use_history,
  searchfield,
  displayfield,
   sortfield,
   ifnull(searchany,0) searchany,
  ifnull(hint,'') hint,
  ifnull(overview_tpl,'') overview_tpl,
  sync_table,
  writetable,
  ifnull(globalsearch,0) globalsearch,
  ifnull(listselectionmodel,'rowmodel') listselectionmodel,
  sync_view,
  ifnull(read_table,'') read_table,
  cssstyle
from
  mv_ds
  left join ds
  on mv_ds.table_name = ds.table_name;
*/

drop table if exists mv_ds_config;
CREATE TABLE `mv_ds_config` (
  `column_name` varchar(64)  NOT NULL DEFAULT '',
  `table_name` varchar(64) NOT NULL DEFAULT '',
  `data_type` varchar(64) NOT NULL DEFAULT '',
  `is_nullable` varchar(3)  NOT NULL DEFAULT '',
  `column_key` varchar(30)  NOT NULL DEFAULT '',
  `column_type` varchar(255)   NOT NULL DEFAULT '',
  `character_maximum_length` bigint unsigned DEFAULT NULL,
  `numeric_precision` bigint unsigned DEFAULT NULL,
  `numeric_scale` bigint unsigned DEFAULT NULL,
  `character_set_name` varchar(32) DEFAULT NULL,
  `privileges` varchar(80) NOT NULL DEFAULT '',
  `syncable` tinyint NOT NULL DEFAULT '0',
  `xtype` varchar(100) NOT NULL DEFAULT 'textfield',
  `fieldtype` varchar(100) NOT NULL DEFAULT 'string',
  `form_label` varchar(100) NOT NULL DEFAULT '',
  `list_label` varchar(100) NOT NULL DEFAULT '',
  `list_xtype` varchar(100) NOT NULL DEFAULT '',
  `editor` varchar(100) NOT NULL DEFAULT '',
  `form_xtype` varchar(100) NOT NULL DEFAULT '',
  `field_path` varchar(100) NOT NULL DEFAULT '',
  `form_field_active` tinyint NOT NULL DEFAULT '0',
  `form_field_hidden` tinyint NOT NULL DEFAULT '0',
  `dialog_field_path` varchar(100) NOT NULL DEFAULT '',
  `dialog_label` varchar(100) NOT NULL DEFAULT '',
  `dialog_text` varchar(255) NOT NULL DEFAULT '',
  `dialog_position` integer NOT NULL DEFAULT '0',
  `default_min_value` bigint NOT NULL DEFAULT '0',
  `default_max_value` bigint NOT NULL DEFAULT '0',
  `default_value` varchar(100) NOT NULL DEFAULT '',
  `update_value` varchar(100) NOT NULL DEFAULT '',
  `form_position` integer NOT NULL DEFAULT '0',
  `list_position` integer NOT NULL DEFAULT '0',
  `list_summaryrenderer` varchar(100) NOT NULL DEFAULT '',
  `list_summarytype` varchar(100) NOT NULL DEFAULT '',
  `list_field_active` tinyint NOT NULL DEFAULT '0',
  `list_field_hidden` tinyint NOT NULL DEFAULT '0',
  `referenced_column_name` varchar(100) NOT NULL DEFAULT '',
  `referenced_table` varchar(100) NOT NULL DEFAULT '',
  PRIMARY KEY (`table_name`,`column_name`),
  KEY `mv_ds_config_table_name` (`table_name`),
  KEY `mv_ds_config_column_name` (`column_name`)
);

alter table mv_ds_config modify default_value varchar(255) NOT NULL DEFAULT '';
alter table mv_ds_config modify update_value varchar(255) NOT NULL DEFAULT '';



call addFieldIfNotExists('mv_ds_config','filterstore','varchar(255) default \'\'');


insert into mv_ds_config
(

  column_name,
  table_name,
  data_type,
  is_nullable,
  column_key,
  column_type,
  character_maximum_length,
  numeric_precision,
  numeric_scale,
  character_set_name,
  privileges,
  syncable,
  xtype,
  fieldtype,
  form_label,
  list_label,
  list_xtype,
  editor,
  form_xtype,
  field_path,
  form_field_active,
  form_field_hidden,
  dialog_field_path,
  dialog_label,
  dialog_text,
  dialog_position,
  default_min_value,
  default_max_value,
  default_value,
  update_value,
  form_position,
  list_position,
  list_summaryrenderer,
  list_summarytype,
  list_field_active,
  list_field_hidden,
  referenced_column_name,
  referenced_table
)
select
  lower(columns.column_name) column_name,
  lower(columns.table_name) table_name,
  columns.data_type,
  columns.is_nullable,
  columns.column_key column_key,
  columns.column_type,
  columns.character_maximum_length,
  columns.numeric_precision,
  columns.numeric_scale,
  columns.character_set_name,
  columns.privileges,
  -1 syncable,
  'textfield' xtype,
  'string' fieldtype,
  columns.column_name form_label,
  columns.column_name list_label,
  'gridcolumn' list_xtype,
  '' editor,
  'displayfield' form_xtype,
  'Allgemein' field_path,
  0 form_field_active,
  0 form_field_hidden,
  '' dialog_field_path,
  '' dialog_label,
  '' dialog_text,
  0 dialog_position,
  1 default_min_value,
  1000000 default_max_value,
  ifnull(columns.column_default,'') default_value,
  '' update_value,
  0 form_position,
  0 list_position,
  '' list_summaryrenderer,
  '' list_summarytype,
  0 list_field_active,
  0 list_field_hidden,
  '' referenced_column_name,
  '' referenced_table
from
  information_schema.columns
where
  information_schema.columns.table_schema    = database()
on duplicate key update table_name=values(table_name);  

alter table mv_ds_config drop primary key;
alter table mv_ds_config add primary key(table_name,column_name);

insert into mv_ds_config (table_name,column_name,column_key)
select table_name,column_name, 'PRI' column_key
from
ds_column where is_primary <>0 and (table_name,column_name) in (select table_name,column_name from mv_ds_config)
on duplicate key update column_key=values(column_key);

insert into mv_ds_config (table_name,column_name,syncable,column_type)
select table_name,column_name, syncable,''
from
ds_column where (table_name,column_name) in (select table_name,column_name from mv_ds_config)
on duplicate key update syncable=values(syncable);





insert into mv_ds_config (
  table_name,column_name,
  form_label,
  form_xtype,
  field_path,
  form_field_active,
  form_field_hidden,
  form_position,
  column_type
)
select
  table_name,
  column_name,
  label,
  xtype,
  field_path,
  active,
  hidden,
  position,
  ''
from
  ds_column_form_label
where (table_name,column_name) in (select table_name,column_name from mv_ds_config)
on duplicate key update
  form_label=values(form_label),
  form_xtype=values(form_xtype),
  field_path=values(field_path),
  form_field_active=values(form_field_active),
  form_field_hidden=values(form_field_hidden),
  form_position=values(form_position);






insert into mv_ds_config (table_name,column_name,list_label,list_position,list_summaryrenderer,
list_summarytype,list_field_active,list_field_hidden,list_xtype,editor,fieldtype,filterstore,column_type)

select table_name,column_name, label,
position,
ifnull(summaryrenderer,''),
ifnull(summarytype,''),
ifnull(active,0),
ifnull(hidden,0),
xtype,
ifnull(editor,''),
if(editor='checkbox','boolean','string'),
filterstore,
''
from
ds_column_list_label where (table_name,column_name) in (select table_name,column_name from mv_ds_config)
on duplicate key update
list_label=values(list_label),
list_position=values(list_position),
list_summaryrenderer=values(list_summaryrenderer),
list_summarytype=values(list_summarytype),
list_field_active=values(list_field_active),
list_field_hidden=values(list_field_hidden),
list_xtype=values(list_xtype),
editor=values(editor),
fieldtype=values(fieldtype),
filterstore=values(filterstore)
;



insert into mv_ds_config (table_name,column_name,xtype,fieldtype)
select table_name,column_name, xtype, xtype
from
ds_column_types where (table_name,column_name) in (select table_name,column_name from mv_ds_config)
on duplicate key update xtype=values(xtype), fieldtype=values(fieldtype);



insert into mv_ds_config (table_name,column_name,
default_min_value,
default_max_value,
default_value,
update_value,
referenced_column_name,
referenced_table,
column_type
  )

select

table_name,column_name,
default_min_value,
default_max_value,
ifnull(default_value,''),
ifnull(update_value,''),
ifnull(referenced_column_name,''),
ifnull(referenced_table,''),
''

from
ds_column where (table_name,column_name) in (select table_name,column_name from mv_ds_config)
on duplicate key update
default_min_value=values(default_min_value),
default_max_value=values(default_max_value),
default_value=values(default_value),
update_value=values(update_value),
referenced_column_name=values(referenced_column_name),
referenced_table=values(referenced_table)
;




insert into mv_ds_config (table_name,column_name,
dialog_field_path,
dialog_label,
dialog_text,
dialog_position
  )

select

table_name,column_name,
field_path,
label,
`text`,
position

from
ds_column_dialog_label where (table_name,column_name) in (select table_name,column_name from mv_ds_config)
on duplicate key update
dialog_field_path=values(dialog_field_path),
dialog_label=values(dialog_label),
dialog_text=values(dialog_text),
dialog_position=values(dialog_position)
;






-- create index if not exists mv_ds_config_table_name on mv_ds_config(table_name);


drop table if exists mv_key_column_usage;
create table mv_key_column_usage as
select
lower(refc.column_name) column_name,
lower(refc.table_name) table_name
from
information_schema.key_column_usage refc
where
refc.table_schema = database()
group by
refc.column_name,
refc.table_name;
create index mv_key_column_usage_table_name on mv_key_column_usage(table_name);


drop table if exists mv_ds_reference_tables;
create table mv_ds_reference_tables as

select
  ds_reference_tables.table_name,
  ds.title,
  information_schema.referential_constraints.referenced_table_name,
  concat(
    '{',group_concat(
    concat(
      '"',lower(information_schema.key_column_usage.table_name),'__',
      lower(information_schema.key_column_usage.column_name),'"'
      ,':',
      '"',lower(information_schema.key_column_usage.referenced_table_name),'__',
      lower(information_schema.key_column_usage.referenced_column_name),'"'
    ) separator ','
  ),'}') reference_column_names,
  ds_reference_tables.columnsdef


from
  information_schema.referential_constraints
  join ds_reference_tables on
    ds_reference_tables.reference_table_name = information_schema.referential_constraints.referenced_table_name and
    ds_reference_tables.table_name = information_schema.referential_constraints.table_name and
    information_schema.referential_constraints.constraint_schema=database() and
    ds_reference_tables.active=1
  join ds on
    ds.table_name = ds_reference_tables.table_name
  join information_schema.key_column_usage
    on information_schema.key_column_usage.table_name = information_schema.referential_constraints.table_name and
    information_schema.key_column_usage.constraint_name = information_schema.referential_constraints.constraint_name and
    information_schema.key_column_usage.constraint_schema=database()

group by
  ds_reference_tables.table_name,
  ds.title
;

create index mv_ds_reference_tables_referenced_table_name on  mv_ds_reference_tables(referenced_table_name);


drop table if exists mv_kcu;
create table mv_kcu as
select
  constraint_name,
  table_name,
  column_name,
  referenced_table_name,
  referenced_column_name,
  ordinal_position
from
  information_schema.key_column_usage kcu
where
  table_schema=database()
  and constraint_name<>'PRIMARY'
  and referenced_table_name is not null
  ;




create or replace view view_ds_multirelations_grp as

select
  table_name,
  referenced_table_name
from
  mv_kcu
group by
  table_name,
  referenced_table_name
;

create or replace view view_ds_multirelations as
select
  lid_coldef.reference_column_names lid_reference_column_names,
  lid.referenced_table_name lid_referenced_table_name,
  mid.table_name mid_table_name,
  mid.referenced_table_name mid_referenced_table_name,
  mid_coldef.reference_column_names mid_reference_column_names
from

view_ds_multirelations_grp mid
join
view_ds_multirelations_grp lid
on mid.table_name=lid.table_name and mid.referenced_table_name<>lid.referenced_table_name

join
  mv_referenced_tables lid_coldef
  on lid_coldef.table_name = lid.table_name
  and lid_coldef.referenced_table_name=lid.referenced_table_name

join
  mv_referenced_tables mid_coldef
  on mid_coldef.table_name = mid.table_name
  and mid_coldef.referenced_table_name=mid.referenced_table_name
;


insert into ds_column
(
  `table_name`,
  `column_name`,
  `default_value`,
  `update_value`,
  `default_min_value`,
  `default_max_value`,
  `is_nullable`,
  `is_referenced`,
  `referenced_table`,
  `referenced_column_name`
)
select
  lower(table_name) table_name,
  lower(column_name) column_name,
  column_default default_value,
  '' `update_value`,
  0 `default_min_value`,
  0 `default_max_value`,
  IS_NULLABLE,
  'NO',
  '',
  ''
from information_schema.columns
  where table_schema = database() and table_name in (select table_name from ds)
on duplicate key update
  `column_name`=values(`column_name`),
  `is_referenced`=values(`is_referenced`),
  `is_nullable`=values(`is_nullable`)
;
alter table ds_reference_tables modify columnsdef longtext default null;
    
insert into `ds_reference_tables`
  (constraint_name,active,reference_table_name,table_name,columnsdef)

select
  if(def.constraint_name is null,base.constraint_name,def.constraint_name) constraint_name,
  if(def.columnsdef is null,0,1) active,
  base.referenced_table_name,
  base.table_name,
  ifnull(def.columnsdef,base.reference_column_names) columnsdef
from
  (
    select constraint_name,referenced_table_name,table_name,reference_column_names from mv_referenced_tables

  ) base
  left join (
    select constraint_name,reference_table_name,table_name,columnsdef from `ds_reference_tables`
    where active=1
  ) def
  on base.constraint_name = def.constraint_name and base.referenced_table_name=def.reference_table_name
where

base.table_name in (select table_name from ds)
and
base.referenced_table_name in (select table_name from ds)

on duplicate key update
constraint_name=values(constraint_name),
active=values(active),
reference_table_name=values(reference_table_name),
table_name=values(table_name),
columnsdef=values(columnsdef)
;


create table if not exists mv_referenced_tables (
  referenced_table_name varchar(255),
  table_name varchar(255),
  reference_column_names longtext,
  constraint_name varchar(100) DEFAULT '' primary key
);

call addFieldIfNotExists('mv_referenced_tables','constraint_name','varchar(100) DEFAULT \'\'');



-- delete from mv_referenced_tables;
insert into mv_referenced_tables (constraint_name,referenced_table_name,table_name,reference_column_names)
select

information_schema.referential_constraints.constraint_name,
  information_schema.referential_constraints.referenced_table_name,
  information_schema.referential_constraints.table_name,

  concat(
    '{',group_concat(
    concat(
      '"',lower(information_schema.key_column_usage.table_name),'__',
      lower(information_schema.key_column_usage.column_name),'"'
      ,':',
      '"',lower(information_schema.key_column_usage.referenced_table_name),'__',
      lower(information_schema.key_column_usage.referenced_column_name),'"'
    ) separator ','
  ),'}') reference_column_names

from
  information_schema.referential_constraints
  join information_schema.key_column_usage
    on information_schema.key_column_usage.table_name = information_schema.referential_constraints.table_name and
    information_schema.key_column_usage.constraint_name = information_schema.referential_constraints.constraint_name and
    information_schema.key_column_usage.constraint_schema=database()
group by
  information_schema.referential_constraints.constraint_name,
  information_schema.referential_constraints.referenced_table_name,
  information_schema.referential_constraints.table_name
on duplicate key update
  referenced_table_name=values(referenced_table_name),
  table_name=values(table_name),
  reference_column_names=values(reference_column_names)
;

-- alter table mv_referenced_tables add primary key (constraint_name);

delete from ds_reference_tables where table_name not in (select table_name from ds);
-- alter table `ds_reference_tables` add CONSTRAINT `fk_ds_reference_tables_ds` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE;
-- alter table `ds_reference_tables` add CONSTRAINT `fk_ds_reference_tables_r_ds` FOREIGN KEY (`reference_table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE;

-- alter table `ds_reference_tables` add active tinyint default 1;



create table if not exists mv_foreign_keys (
  constraint_name varchar(255),
  table_name varchar(255),
  referenced_table_name varchar(255),
  update_rule varchar(255),
  delete_rule varchar(255),
  column_name varchar(255)
);


delete from mv_foreign_keys;
insert into mv_foreign_keys (constraint_name,table_name,referenced_table_name,update_rule,delete_rule,column_name)

  select
    rc.constraint_name,
    rc.table_name,
    rc.referenced_table_name,
    rc.update_rule,
    rc.delete_rule,
    ku.column_name
  from
    information_schema.referential_constraints rc
    join information_schema.key_column_usage ku
    on rc.constraint_name = ku.constraint_name
      and rc.constraint_schema = ku.constraint_schema
      and rc.constraint_schema=database()
  where
    rc.constraint_schema=database();




create table if not exists ds_nm_tables(
  `table_name` varchar(64) not null,
  `referenced_table_name` varchar(64) not null,
  `constraint_name` varchar(64) not null,
  `referenced_constraint_name` varchar(64) not null,
  `intermedia_table_name` varchar(32) not null,

  `language` varchar(3) not null default 'DE',
  `label` varchar(255) not null default '',
  `position` integer default 99,
  `hidden` tinyint default 0,
  `active` tinyint default 0,


  `table_name_json` longtext,
  `referenced_table_json` longtext,
  PRIMARY KEY (`table_name`,`constraint_name`,`referenced_constraint_name`),

  KEY `idx_ds_nm_tables_table_name` (`table_name`),
  CONSTRAINT `fk_ds_nm_tables_ds` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE
)  ;


-- alter table `ds_nm_tables` add CONSTRAINT `fk_ds_nm_tables_r_ds` FOREIGN KEY (`referenced_table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE;
-- alter table `ds_nm_tables` add CONSTRAINT `fk_ds_nm_tables_i_ds` FOREIGN KEY (`intermedia_table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE;


CREATE TABLE IF NOT EXISTS `mv_referential_constraints` (
  `CONSTRAINT_CATALOG` varchar(512) NOT NULL DEFAULT '',
  `CONSTRAINT_SCHEMA` varchar(64) NOT NULL DEFAULT '',
  `CONSTRAINT_NAME` varchar(64) NOT NULL DEFAULT '',
  `UNIQUE_CONSTRAINT_CATALOG` varchar(512) NOT NULL DEFAULT '',
  `UNIQUE_CONSTRAINT_SCHEMA` varchar(64) NOT NULL DEFAULT '',
  `UNIQUE_CONSTRAINT_NAME` varchar(64) DEFAULT NULL,
  `MATCH_OPTION` varchar(64) NOT NULL DEFAULT '',
  `UPDATE_RULE` varchar(64) NOT NULL DEFAULT '',
  `DELETE_RULE` varchar(64) NOT NULL DEFAULT '',
  `TABLE_NAME` varchar(64) NOT NULL DEFAULT '',
  `REFERENCED_TABLE_NAME` varchar(64) NOT NULL DEFAULT '',
  `COLUMN_NAME` varchar(64) NOT NULL DEFAULT '',
  `REFERENCED_COLUMN_NAME` varchar(64) DEFAULT '',
  PRIMARY KEY (`CONSTRAINT_NAME`,`COLUMN_NAME`)
);

insert into `mv_referential_constraints` (
  CONSTRAINT_CATALOG,
  CONSTRAINT_SCHEMA,
  CONSTRAINT_NAME,
  UNIQUE_CONSTRAINT_CATALOG,
  UNIQUE_CONSTRAINT_SCHEMA,
  UNIQUE_CONSTRAINT_NAME,
  MATCH_OPTION,
  UPDATE_RULE,
  DELETE_RULE,
  TABLE_NAME ,
  REFERENCED_TABLE_NAME,
  COLUMN_NAME,
  REFERENCED_COLUMN_NAME
)

select
  r.CONSTRAINT_CATALOG,
  r.CONSTRAINT_SCHEMA,
  r.CONSTRAINT_NAME,
  r.UNIQUE_CONSTRAINT_CATALOG,
  r.UNIQUE_CONSTRAINT_SCHEMA,
  r.UNIQUE_CONSTRAINT_NAME,
  r.MATCH_OPTION,
  r.UPDATE_RULE,
  r.DELETE_RULE,
  r.TABLE_NAME ,
  r.REFERENCED_TABLE_NAME,

  u.COLUMN_NAME,
  u.REFERENCED_COLUMN_NAME

from (
    select * from information_schema.referential_constraints where constraint_schema=database()
 ) r
join (
   select * from information_schema.key_column_usage where constraint_schema=database()
) u
  on u.table_name = r.table_name and
  u.constraint_name = r.constraint_name and
  u.constraint_schema=database() and
  r.constraint_schema=database()

on duplicate key update

UNIQUE_CONSTRAINT_CATALOG=values(UNIQUE_CONSTRAINT_CATALOG),
UNIQUE_CONSTRAINT_SCHEMA=values(UNIQUE_CONSTRAINT_SCHEMA),
UNIQUE_CONSTRAINT_NAME=values(UNIQUE_CONSTRAINT_NAME),
MATCH_OPTION=values(MATCH_OPTION),
UPDATE_RULE=values(UPDATE_RULE),
DELETE_RULE=values(DELETE_RULE),
TABLE_NAME=values(TABLE_NAME),
REFERENCED_TABLE_NAME=values(REFERENCED_TABLE_NAME),
COLUMN_NAME=values(COLUMN_NAME),
REFERENCED_COLUMN_NAME=values(REFERENCED_COLUMN_NAME)
;

create or replace view view_readtable_ds_nm_tables as
select
  a.CONSTRAINT_NAME A_CONSTRAINT_NAME,
  a.REFERENCED_TABLE_NAME A_REFERENCED_TABLE_NAME,
  a.TABLE_NAME A_TABLE_NAME,
  group_concat(a.COLUMN_NAME separator ',') A_COLUMN_NAME,
  group_concat(a.REFERENCED_COLUMN_NAME separator ',') A_REFERENCED_COLUMN_NAME,

  concat('{',group_concat( concat('"',lower(a.COLUMN_NAME),'"') separator ','  ),'}') A_COLUMN_JSON,
  concat('{',group_concat( concat('"',lower(b.COLUMN_NAME),'"') separator ',' ),'}') B_COLUMN_JSON,
  concat('{',group_concat( concat('"',lower(a.REFERENCED_COLUMN_NAME),'"') separator ',' ),'}') A_REFERENCED_COLUMN_JSON,
  concat('{',group_concat( concat('"',lower(b.REFERENCED_COLUMN_NAME),'"') separator ',' ),'}') B_REFERENCED_COLUMN_JSON,

  concat(
    '{',group_concat(
    concat(
      '"',lower(a.table_name),'__',
      lower(a.column_name),'"'
      ,':',
      '"',lower(a.referenced_table_name),'__',
      lower(a.referenced_column_name),'"'
    ) separator ','
  ),'}') A_REFERENCED_JSON,


  b.CONSTRAINT_NAME B_CONSTRAINT_NAME,
  b.REFERENCED_TABLE_NAME B_REFERENCED_TABLE_NAME,
  b.TABLE_NAME B_TABLE_NAME,
  group_concat(b.COLUMN_NAME separator ',') B_COLUMN_NAME,
  group_concat(b.REFERENCED_COLUMN_NAME separator ',') B_REFERENCED_COLUMN_NAME,

  concat(
    '{',group_concat(
    concat(
      '"',lower(b.table_name),'__',
      lower(b.column_name),'"'
      ,':',
      '"',lower(b.referenced_table_name),'__',
      lower(b.referenced_column_name),'"'
    ) separator ','
  ),'}') B_REFERENCED_JSON


from
  mv_referential_constraints a
  join
  mv_referential_constraints b
  on
    a.TABLE_NAME = b.table_name
    and a.CONSTRAINT_NAME<>b.CONSTRAINT_NAME
    and a.COLUMN_NAME<>b.COLUMN_NAME
group by
  a.CONSTRAINT_NAME  ,
  a.REFERENCED_TABLE_NAME  ,
  a.TABLE_NAME  ,
  b.CONSTRAINT_NAME  ,
  b.REFERENCED_TABLE_NAME  ,
  b.TABLE_NAME
;


insert into ds_nm_tables
(
  `table_name`,
  `intermedia_table_name`,
  `referenced_table_name`,
  `constraint_name`,
  `referenced_constraint_name`,
  `table_name_json`,
  `referenced_table_json`

)

select
  A_REFERENCED_TABLE_NAME `table_name`,
  A_TABLE_NAME `intermedia_table_name`,
  B_REFERENCED_TABLE_NAME `referenced_table_name`,
  A_constraint_name `constraint_name`,
  B_constraint_name `referenced_constraint_name`,
  B_REFERENCED_JSON `table_name_json`,
  A_REFERENCED_JSON `referenced_table_json`
from
  view_readtable_ds_nm_tables
  join
  ds ar on ar.table_name = view_readtable_ds_nm_tables.A_REFERENCED_TABLE_NAME
  join
  ds a on a.table_name = view_readtable_ds_nm_tables.B_TABLE_NAME
  join
  ds br on br.table_name = view_readtable_ds_nm_tables.B_REFERENCED_TABLE_NAME
union
select
  B_REFERENCED_TABLE_NAME,
  B_TABLE_NAME,
  A_REFERENCED_TABLE_NAME,
  B_constraint_name,
  A_constraint_name,
  B_REFERENCED_JSON,
  A_REFERENCED_JSON
from
  view_readtable_ds_nm_tables

  join
  ds ar on ar.table_name = view_readtable_ds_nm_tables.B_REFERENCED_TABLE_NAME
  join
  ds a on a.table_name = view_readtable_ds_nm_tables.B_TABLE_NAME
  join
  ds br on br.table_name = view_readtable_ds_nm_tables.A_REFERENCED_TABLE_NAME

on duplicate key update


`table_name`=values(`table_name`),
`intermedia_table_name`=values(`intermedia_table_name`),
`referenced_table_name`=values(`referenced_table_name`),
`table_name_json`=values(`table_name_json`),
`referenced_table_json`=values(`referenced_table_json`)
;





-- SOURCE FILE: ./src//000-basics/010.ds.forcetype.sql 
create table if not exists ds_column_forcetype
(
    table_name	varchar(128) not null,
    column_name	varchar(100) not null,
    fieldtype varchar(128) not null,
    primary key (table_name,column_name)
)
;

-- SOURCE FILE: ./src//000-basics/011.ds.ds_column_export_template.sql 
CREATE TABLE IF NOT EXISTS `ds_column_export_template` (
  `table_name` varchar(128) NOT NULL ,
  `column_name` varchar(100) NOT NULL ,
  `template` varchar(1000) DEFAULT '',
  PRIMARY KEY (`table_name`,`column_name`),
  CONSTRAINT `fk_ds_column_export_template_ds_column` FOREIGN KEY (`table_name`,`column_name`)
  REFERENCES `ds_column` (`table_name`,`column_name`) ON DELETE CASCADE ON UPDATE CASCADE
);

-- SOURCE FILE: ./src//000-basics/020.ds.ds_dialog.sql 
-- drop table ds_dialog_card_fields;
-- drop table ds_dialog_cards;
-- drop table ds_dialog;


DELIMITER //
create table if not exists ds_dialog(

    dialog_id varchar(32) not null primary key,
    table_name varchar(128) not null,
    
    CONSTRAINT `fk_ds_dialog_ds`
    FOREIGN KEY (`table_name`)
    REFERENCES `ds`(`table_name`)
    ON DELETE CASCADE
    ON UPDATE CASCADE
    

) //

DROP TRIGGER IF EXISTS `trigger_ds_dialog_ai_addcard` //
CREATE TRIGGER `trigger_ds_dialog_ai_addcard`
    AFTER INSERT
    ON `ds_dialog` FOR EACH ROW
BEGIN
    insert into ds_dialog_cards (dialog_id,card_id,name) values (NEW.dialog_id,'basic','') on duplicate key update dialog_id=values(dialog_id);
END //  


create table if not exists ds_dialog_cards(
    
    dialog_id varchar(32) not null,
    card_id varchar(32) not null,
    name varchar(255) not null,
    active tinyint default 0,

    primary key (dialog_id,card_id),
    position integer default 0,

    
    CONSTRAINT `fk_ds_dialog_cards_dialog_id`
    FOREIGN KEY (`dialog_id`)
    REFERENCES `ds_dialog`(`dialog_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE


) //




DROP TRIGGER IF EXISTS `trigger_ds_dialog_cards_bu_basic` //
CREATE TRIGGER `trigger_ds_dialog_cards_bu_basic`
    BEFORE UPDATE
    ON `ds_dialog_cards` FOR EACH ROW
BEGIN
    IF OLD.card_id = 'basic' THEN
        IF NEW.card_id <> 'basic' THEN
            SIGNAL SQLSTATE '45000' SET MYSQL_ERRNO = 31999, MESSAGE_TEXT = 'basic card cannot be changed';
        END IF;
        IF NEW.active <> 0 THEN
            SIGNAL SQLSTATE '45000' SET MYSQL_ERRNO = 31999, MESSAGE_TEXT = 'basic card cannot be active';
        END IF;
    END IF;
END // 

DROP TRIGGER IF EXISTS `trigger_ds_dialog_ai_addcolumns` //
CREATE TRIGGER `trigger_ds_dialog_ai_addcolumns`
    AFTER INSERT
    ON `ds_dialog_cards` FOR EACH ROW
BEGIN
    insert into ds_dialog_card_fields 
        (dialog_id,card_id,table_name,column_name) 
    select 
        NEW.dialog_id,NEW.card_id,table_name,column_name
    from 
        ds_column
    where 
        existsreal=1 and table_name in (select table_name from ds_dialog where dialog_id=NEW.dialog_id)
        
    on duplicate key update dialog_id=values(dialog_id);
END //  




create table if not exists ds_dialog_card_fields(
    dialog_id varchar(32) not null,
    card_id varchar(32) not null,

    table_name varchar(128) not null,
    column_name varchar(32) not null,

    primary key (dialog_id,card_id,table_name,column_name),

    frameset varchar(255) default '',
    label varchar(255) default '',
    xtype varchar(255) default '',

    active tinyint default 0,
    hidden tinyint default 1,
    allowempty tinyint default 1,

    position integer default 0,

    CONSTRAINT `fk_ds_dialog_card_fields_ds`
    FOREIGN KEY (`table_name`)
    REFERENCES `ds`(`table_name`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,

    CONSTRAINT `fk_ds_dialog_card_fields_ds_column`
    FOREIGN KEY (`table_name`,`column_name`)
    REFERENCES `ds_column`(`table_name`,`column_name`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
    

    CONSTRAINT `fk_ds_dialog_card_fields_dialog_id`
    FOREIGN KEY (dialog_id,card_id)
    REFERENCES `ds_dialog_cards`(dialog_id,card_id)
    ON DELETE CASCADE
    ON UPDATE CASCADE
) //

DROP TRIGGER IF EXISTS `trigger_ds_dialog_card_fields_dropcolumns` //


CREATE TABLE IF NOT EXISTS ds_dialog_condition (
    id varchar(36) not null,
    logic_operator varchar(10) not null,
    primary key (id),
    parent_id varchar(36) default null,

    CONSTRAINT `fk_ds_dialog_condition_values_self`
    FOREIGN KEY (parent_id)
    REFERENCES `ds_dialog_condition`(id)
    ON DELETE SET NULL
    ON UPDATE CASCADE
) //

CREATE TABLE IF NOT EXISTS  ds_dialog_condition_values(
    id varchar(36) not null,
    primary key (id),

    condition_id varchar(36) not null,
    field_name varchar(64) not null,
    value_operator varchar(10) not null default 'in',

    key `idx_ds_dialog_condition_values_condition_id_field` (`condition_id`,`field_name`),
    key `idx_ds_dialog_condition_values_condition_id` (`condition_id`),

    `val` varchar(255),
    CONSTRAINT `fk_ds_dialog_condition_values_condition_id`
    FOREIGN KEY (`condition_id`)
    REFERENCES `ds_dialog_condition`(`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE
) // 


DROP FUNCTION IF EXISTS `getDialogItems` //
CREATE FUNCTION `getDialogItems`(in_dialog_id varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT '
# getViewportCgetDialogItemsontroller

`getDialogItems` return the JS Array of dialog ITEMS

# Parameter
    * `in_dialog_id` the dialog_id

'
BEGIN 
    DECLARE result longtext default '
    Ext.define("Tualo.DataSets.controller.[{ds_name}]", {
        extend: "Tualo.DataSets.ViewController",
        alias: "controller.[{lowerprefix}][{table_name_lower}]_controller",
    });  
    ';

    /*
    select 
        ds_dialog.dialog_id,
        ds_dialog.table_name,
        ds_dialog_cards.card_id,
        ds_dialog_cards.name,
        ds_dialog_cards.active,
        ds_dialog_cards.position,

        ds_dialog_card_fields.table_name,
        ds_dialog_card_fields.column_name,

        ds_dialog_card_fields.frameset,
        ds_dialog_card_fields.label,
        ds_dialog_card_fields.xtype,

        ds_dialog_card_fields.active,
        ds_dialog_card_fields.hidden,
        ds_dialog_card_fields.allowempty,
        ds_dialog_card_fields.position

    from 

        ds_dialog
        join ds_dialog_cards on ds_dialog.dialog_id = ds_dialog_cards.dialog_id
        join ds_dialog_card_fields on (ds_dialog_cards.dialog_id,ds_dialog_cards.card_id) = (ds_dialog_card_fields.dialog_id,ds_dialog_card_fields.card_id)
    ;
    SET result = `replaceDefaultDefinitionVars`(in_table_name,result);
    */

    RETURN result;
END //
-- SOURCE FILE: ./src//000-basics/099.ds.ds_procedureform.sql 
DELIMITER //
CREATE TABLE IF NOT EXISTS `ds_procedureform` (

  `id` varchar(128) NOT NULL,
  `property` varchar(100) NOT NULL DEFAULT '',
  `language` varchar(3) NOT NULL DEFAULT 'DE',

  `label` varchar(255) NOT NULL,
  `xtype` varchar(255) DEFAULT NULL,
  `position` int(11) DEFAULT 0,
  `hidden` tinyint(4) DEFAULT 0,
  `active` tinyint(4) DEFAULT 1,
  `default_value` varchar(255) DEFAULT '',
  `allowempty` tinyint(4) DEFAULT 1,

  PRIMARY KEY (`id`,`property`,`language`)
  
) //

-- SOURCE FILE: ./src//000-basics/099.ds_export_file_transfer.sql 
DELIMITER ;
-- ds_export_file_transfer

CREATE TABLE IF NOT EXISTS `ds_export_file_transfer` (
  `id` varchar(36),
  `table_name` varchar(128) NOT NULL,
  `server` varchar(100) NOT NULL,
  `username` varchar(100) NOT NULL,
  `password` varchar(100) NOT NULL,
  `path` varchar(100) DEFAULT '',
  PRIMARY KEY (`id`),
  key `idx_ds_export_file_transfer_table_name` (`table_name`),
  CONSTRAINT `fk_ds_export_file_transfer_ds` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE
);



-- BEGIN DS ds_export_file_transfer
-- NAME: DS Export File Transfer

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_export_file_transfer')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='DS Export File Transfer',`reorderfield`='',`use_history`='0',`searchfield`='id',`displayfield`='id',`sortfield`='id',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`syncable`='0',`cssstyle`='',`alternativeformxtype`='',`read_table`='',`class_name`='Datenstamm',`special_add_panel`='',`existsreal`='1',`character_set_name`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='',`combined`='0',`default_pagesize`='100',`allowForm`='0',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_export_file_transfer';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_export_file_transfer','id')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='{:uuid()}',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='0',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(36)',`character_maximum_length`='36',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_export_file_transfer' and `column_name`='id';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_export_file_transfer','password')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(100)',`character_maximum_length`='100',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_export_file_transfer' and `column_name`='password';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_export_file_transfer','path')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(100)',`character_maximum_length`='100',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_export_file_transfer' and `column_name`='path';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_export_file_transfer','server')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(100)',`character_maximum_length`='100',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_export_file_transfer' and `column_name`='server';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_export_file_transfer','table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='MUL',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_export_file_transfer' and `column_name`='table_name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_export_file_transfer','username')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(100)',`character_maximum_length`='100',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_export_file_transfer' and `column_name`='username';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_export_file_transfer')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='1',`append`='1',`existsreal`='0' where `role`='administration' and `table_name`='ds_export_file_transfer';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_export_file_transfer','id','DE','ID','Allgemein/Angaben')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_export_file_transfer' and `column_name`='id' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_export_file_transfer','password','DE','Passwort','Allgemein/Angaben')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='4',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_export_file_transfer' and `column_name`='password' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_export_file_transfer','path','DE','Pfad','Allgemein/Angaben')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='5',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_export_file_transfer' and `column_name`='path' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_export_file_transfer','server','DE','Server','Allgemein/Angaben')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='2',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_export_file_transfer' and `column_name`='server' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_export_file_transfer','table_name','DE','Tabelle','Allgemein/Angaben')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='1',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_export_file_transfer' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_export_file_transfer','username','DE','Username','Allgemein/Angaben')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='3',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_export_file_transfer' and `column_name`='username' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_export_file_transfer','id','DE','ID')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left',`listfiltertype`='' where `table_name`='ds_export_file_transfer' and `column_name`='id' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_export_file_transfer','password','DE','Passwort')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='4',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='',`align`='',`listfiltertype`='' where `table_name`='ds_export_file_transfer' and `column_name`='password' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_export_file_transfer','path','DE','Pfad')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='5',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left',`listfiltertype`='' where `table_name`='ds_export_file_transfer' and `column_name`='path' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_export_file_transfer','server','DE','Server')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='2',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left',`listfiltertype`='' where `table_name`='ds_export_file_transfer' and `column_name`='server' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_export_file_transfer','table_name','DE','Tabelle')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='1',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left',`listfiltertype`='' where `table_name`='ds_export_file_transfer' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_export_file_transfer','username','DE','Username')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='3',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left',`listfiltertype`='' where `table_name`='ds_export_file_transfer' and `column_name`='username' and `language`='DE';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_export_file_transfer','ds')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_export_file_transfer__table_name\":\"ds__table_name\"}',`constraint_name`='fk_ds_export_file_transfer_ds',`active`='0',`searchable`='0',`autosync`='1',`position`='99999' where `table_name`='ds_export_file_transfer' and `reference_table_name`='ds';
-- END DS ds_export_file_transfer



-- SOURCE FILE: ./src//000-setup/003.ds.procs.sql 
DELIMITER //


DROP PROCEDURE IF EXISTS `UPDATE_DS_TABLES_DDL` //
CREATE PROCEDURE `UPDATE_DS_TABLES_DDL`( )
    MODIFIES SQL DATA
BEGIN

    call addFieldIfNotExists('ds','existsreal','tinyint default 0');
    call addFieldIfNotExists('ds','special_add_panel','varchar(64) DEFAULT NULL');
    call addFieldIfNotExists('ds','searchany','tinyint default 0');
    call addFieldIfNotExists('ds','hint','varchar(255) DEFAULT \'\'');
    call addFieldIfNotExists('ds','overview_tpl','varchar(255) DEFAULT \'\'');
    call addFieldIfNotExists('ds','character_set_name','varchar(255) default \'\'');
    call addFieldIfNotExists('ds','read_table','varchar(32) default \'\'');

    call addFieldIfNotExists('ds_column','data_type','varchar(255) default \'\'');
    call addFieldIfNotExists('ds_column','is_nullable','varchar(5) default \'\'');
    call addFieldIfNotExists('ds_column','column_key','varchar(255) default \'\'');
    call addFieldIfNotExists('ds_column','column_type','varchar(255) default \'\'');
    call addFieldIfNotExists('ds_column','character_maximum_length','bigint default 0');
    call addFieldIfNotExists('ds_column','numeric_precision','integer default 0');
    call addFieldIfNotExists('ds_column','numeric_scale','integer default 0');
    call addFieldIfNotExists('ds_column','character_set_name','varchar(255) default \'\'');
    call addFieldIfNotExists('ds_column','privileges','varchar(255) default \'\'');
    call addFieldIfNotExists('ds_column','existsreal','tinyint default 0');


    call addFieldIfNotExists('ds_column_list_label','filterstore','varchar(255) default \'\'');

    call addFieldIfNotExists('ds_access','existsreal','tinyint default 0');
    
    call addFieldIfNotExists('mv_referenced_tables','constraint_name','varchar(100) DEFAULT \'\'');
    call addFieldIfNotExists('mv_referenced_tables','constraint_name','varchar(100) DEFAULT \'\'');
    call addFieldIfNotExists('ds_reference_tables','position','integer default 99999');





    create table if not exists ds_searchfields (
        table_name varchar(255) not null,
        column_name varchar(255) not null,
        active tinyint default 0,
        PRIMARY KEY (`table_name`,`column_name`),
        CONSTRAINT `fk_ds_column_ds_searchfields`
        FOREIGN KEY (`table_name`,`column_name`) REFERENCES `ds_column` (`table_name`,`column_name`)
        ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT `fk_ds_ds_searchfields`
        FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`)
        ON DELETE CASCADE ON UPDATE CASCADE
    );



    delete from ds_column_form_label where table_name not in (select table_name from ds);
    IF NOT EXISTS (
        SELECT NULL 
        FROM information_schema.TABLE_CONSTRAINTS
        WHERE
            CONSTRAINT_SCHEMA = DATABASE() AND
            CONSTRAINT_NAME   = 'fk_ds_column_form_label_ds' AND
            CONSTRAINT_TYPE   = 'FOREIGN KEY'
    )
    THEN
        alter table `ds_column_form_label` add CONSTRAINT `fk_ds_column_form_label_ds` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE;
    END IF;



    delete from ds_column where table_name not in (select table_name from ds);

    IF NOT EXISTS (
        SELECT NULL 
        FROM information_schema.TABLE_CONSTRAINTS
        WHERE
            CONSTRAINT_SCHEMA = DATABASE() AND
            CONSTRAINT_NAME   = 'fk_ds_column_ds' AND
            CONSTRAINT_TYPE   = 'FOREIGN KEY'
    )
    THEN
        alter table `ds_column` add CONSTRAINT `fk_ds_column_ds` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE;
    END IF;


    delete from ds_preview_form_label where table_name not in (select table_name from ds);



    IF NOT EXISTS (
        SELECT NULL 
        FROM information_schema.TABLE_CONSTRAINTS
        WHERE
            CONSTRAINT_SCHEMA = DATABASE() AND
            CONSTRAINT_NAME   = 'fk_ds_preview_form_label_ds' AND
            CONSTRAINT_TYPE   = 'FOREIGN KEY'
    )
    THEN
        alter table `ds_preview_form_label` add CONSTRAINT `fk_ds_preview_form_label_ds` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE;
    END IF;


    delete from ds_dropdownfields where table_name not in (select table_name from ds);
    IF NOT EXISTS (
        SELECT NULL 
        FROM information_schema.TABLE_CONSTRAINTS
        WHERE
            CONSTRAINT_SCHEMA = DATABASE() AND
            CONSTRAINT_NAME   = 'fk_ds_dropdownfields_ds' AND
            CONSTRAINT_TYPE   = 'FOREIGN KEY'
    )
    THEN
        alter table `ds_dropdownfields` add CONSTRAINT `fk_ds_dropdownfields_ds` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE;
    END IF;

--    delete from ds_sync_data where table_name not in (select table_name from ds);
--    IF NOT EXISTS (
--        SELECT NULL 
--        FROM information_schema.TABLE_CONSTRAINTS
--        WHERE
--            CONSTRAINT_SCHEMA = DATABASE() AND
--            CONSTRAINT_NAME   = 'fk_ds_column_form_label_ds' AND
--            CONSTRAINT_TYPE   = 'FOREIGN KEY'
--    )
--    THEN
--        alter table `ds_sync_data` add CONSTRAINT `fk_ds_sync_data_ds` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE;
--    END IF;




    CREATE TABLE IF NOT EXISTS `ds_addcommands` (
        `table_name` varchar(64) NOT NULL,
        `xtype` varchar(64) NOT NULL,
        PRIMARY KEY (`table_name`,`xtype`),
        CONSTRAINT `fk_ds_ds_addcommands` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE
    );

END //




DROP PROCEDURE IF EXISTS `UPDATE_DS_REFERENCED_TABLES_BY_TABLE` //
CREATE PROCEDURE `UPDATE_DS_REFERENCED_TABLES_BY_TABLE`(  in in_table_name varchar(128) )
    MODIFIES SQL DATA
BEGIN
    call UPDATE_DS_REFERENCED_TABLES(database());
END //


DROP PROCEDURE IF EXISTS `UPDATE_DS_REFERENCED_TABLES` //
CREATE PROCEDURE `UPDATE_DS_REFERENCED_TABLES`(  IN in_dbname varchar(150) )
    MODIFIES SQL DATA
BEGIN

    set group_concat_max_len=104857600;
    

        alter table  ds_reference_tables modify constraint_name varchar(128);
alter table  mv_referenced_tables modify constraint_name varchar(128);


create index if not exists idx_ds_reference_tables_table_name_reference_table_name on ds_reference_tables(table_name,reference_table_name);
alter table ds_reference_tables drop primary key;
alter table ds_reference_tables add primary key (table_name,reference_table_name,constraint_name);


call addForeignKeyIfNotExists ('ds_reference_tables','ds','fk_ds_reference_tables_ds','table_name','table_name','cascade','cascade');
-- alter TABLE `ds_reference_tables` drop foreign key  `fk_ds_reference_tables_ds` ;
-- alter TABLE `ds_reference_tables` add CONSTRAINT `fk_ds_reference_tables_ds` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE;
-- alter TABLE `ds_reference_tables` add CONSTRAINT `fk_ds_reference_tables_r_ds` FOREIGN KEY (`reference_table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE;



    -- delete from mv_referenced_tables;
    insert into mv_referenced_tables (constraint_name,referenced_table_name,table_name,reference_column_names)
    select

        referential_constraints.constraint_name,
        referential_constraints.referenced_table_name,
        referential_constraints.table_name,

        concat(
            '{',group_concat(
            concat(
            '"',lower(key_column_usage.table_name),'__',
            lower(key_column_usage.column_name),'"'
            ,':',
            '"',lower(key_column_usage.referenced_table_name),'__',
            lower(key_column_usage.referenced_column_name),'"'
            ) separator ','
        ),'}') reference_column_names

    from
        (select * from information_schema.referential_constraints where constraint_schema=in_dbname ) referential_constraints
        join (select * from information_schema.key_column_usage where information_schema.key_column_usage.constraint_schema=in_dbname ) key_column_usage
            on key_column_usage.table_name = referential_constraints.table_name and
            key_column_usage.constraint_name = referential_constraints.constraint_name and
            key_column_usage.constraint_schema = in_dbname
    group by
        referential_constraints.constraint_name,
        referential_constraints.referenced_table_name,
        referential_constraints.table_name
    

        union 
    
    select 
    concat('manual_', md5( concat(ds_referenced_manual.table_name, '_',	ds_referenced_manual.referenced_table_name)) ) constraint_name,
    	ds_referenced_manual.table_name,
    ds_referenced_manual.referenced_table_name,
	
     concat(
            '{',group_concat(
            concat(
            '"',lower(ds_referenced_manual_columns.referenced_table_name),'__',
            lower(ds_referenced_manual_columns.referenced_column_name),'"'
            ,':',
            '"',lower(ds_referenced_manual_columns.table_name),'__',
            lower(ds_referenced_manual_columns.column_name),'"'
            ) separator ','
        ),'}') reference_column_names
from 

ds_referenced_manual
join ds_referenced_manual_columns 
on (ds_referenced_manual.table_name,ds_referenced_manual.referenced_table_name) =  (ds_referenced_manual_columns.table_name,ds_referenced_manual_columns.referenced_table_name)

group by
        ds_referenced_manual.referenced_table_name,
        ds_referenced_manual.table_name

    on duplicate key update reference_column_names=values(reference_column_names),referenced_table_name=values(referenced_table_name),table_name=values(table_name)
    ;


    delete from ds_reference_tables where table_name not in (select table_name from ds);

    alter table ds_reference_tables modify columnsdef longtext default null;
    

    insert into `ds_reference_tables`
    (constraint_name,active,reference_table_name,table_name,columnsdef)

    select
    if(def.constraint_name is null,base.constraint_name,def.constraint_name) constraint_name,
    if(def.columnsdef is null,0,1) active,
    base.referenced_table_name,
    base.table_name,
    ifnull(def.columnsdef,base.reference_column_names) columnsdef
    from
    (
        select constraint_name,referenced_table_name,table_name,reference_column_names from mv_referenced_tables

    ) base
    left join (
        select constraint_name,reference_table_name,table_name,columnsdef from `ds_reference_tables`
        where active=1
    ) def
    on base.constraint_name = def.constraint_name and base.referenced_table_name=def.reference_table_name
    where

        base.table_name in (select table_name from ds)
        and
        base.referenced_table_name in (select table_name from ds)

    on duplicate key update
        constraint_name=values(constraint_name),
        active=values(active),
        reference_table_name=values(reference_table_name),
        table_name=values(table_name),
        columnsdef=values(columnsdef)
    ;

    update ds_reference_tables set active=1 where reference_table_name='ds' and table_name='ds_reference_tables';

    delete from ds_reference_tables where (constraint_name,table_name) not in (select constraint_name,table_name from mv_referenced_tables);


END //





DROP PROCEDURE IF EXISTS `UPDATE_DS_MV_REFERENCED_TABLES` //
CREATE PROCEDURE `UPDATE_DS_MV_REFERENCED_TABLES`(  )
    MODIFIES SQL DATA
BEGIN

    CREATE TABLE IF NOT EXISTS ds_nm_tables(
        `table_name` varchar(64) not null,
        `referenced_table_name` varchar(64) not null,
        `constraint_name` varchar(64) not null,
        `referenced_constraint_name` varchar(64) not null,
        `intermedia_table_name` varchar(255) not null,

        `language` varchar(3) not null default 'DE',
        `label` varchar(255) not null default '',
        `position` integer default 99,
        `hidden` tinyint default 0,
        `active` tinyint default 0,


        `table_name_json` longtext,
        `referenced_table_json` longtext,
        PRIMARY KEY (`table_name`,`constraint_name`,`referenced_constraint_name`) -- ,

--        KEY `idx_ds_nm_tables_table_name` (`table_name`),
--        CONSTRAINT `fk_ds_nm_tables_ds` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE
    );

    /*

    IF NOT EXISTS (
        SELECT NULL 
        FROM information_schema.TABLE_CONSTRAINTS
        WHERE
            CONSTRAINT_SCHEMA = DATABASE() AND
            CONSTRAINT_NAME   = 'fk_ds_nm_tables_r_ds' AND
            CONSTRAINT_TYPE   = 'FOREIGN KEY'
    )
    THEN
        alter table `ds_nm_tables` add CONSTRAINT `fk_ds_nm_tables_r_ds` FOREIGN KEY (`referenced_table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE;
    END IF;

    IF NOT EXISTS (
        SELECT NULL 
        FROM information_schema.TABLE_CONSTRAINTS
        WHERE
            CONSTRAINT_SCHEMA = DATABASE() AND
            CONSTRAINT_NAME   = 'fk_ds_nm_tables_i_ds' AND
            CONSTRAINT_TYPE   = 'FOREIGN KEY'
    )
    THEN
        alter table `ds_nm_tables` add CONSTRAINT `fk_ds_nm_tables_i_ds` FOREIGN KEY (`intermedia_table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE;
    END IF;
    */

   
    CREATE TABLE IF NOT EXISTS `mv_referential_constraints` (
        `CONSTRAINT_CATALOG` varchar(512) NOT NULL DEFAULT '',
        `CONSTRAINT_SCHEMA` varchar(64) NOT NULL DEFAULT '',
        `CONSTRAINT_NAME` varchar(64) NOT NULL DEFAULT '',
        `UNIQUE_CONSTRAINT_CATALOG` varchar(512) NOT NULL DEFAULT '',
        `UNIQUE_CONSTRAINT_SCHEMA` varchar(64) NOT NULL DEFAULT '',
        `UNIQUE_CONSTRAINT_NAME` varchar(64) DEFAULT NULL,
        `MATCH_OPTION` varchar(64) NOT NULL DEFAULT '',
        `UPDATE_RULE` varchar(64) NOT NULL DEFAULT '',
        `DELETE_RULE` varchar(64) NOT NULL DEFAULT '',
        `TABLE_NAME` varchar(64) NOT NULL DEFAULT '',
        `REFERENCED_TABLE_NAME` varchar(64) NOT NULL DEFAULT '',
        `COLUMN_NAME` varchar(64) NOT NULL DEFAULT '',
        `REFERENCED_COLUMN_NAME` varchar(64) DEFAULT '',
    PRIMARY KEY (`CONSTRAINT_NAME`,`COLUMN_NAME`)
    );

    insert into `mv_referential_constraints` (
        CONSTRAINT_CATALOG,
        CONSTRAINT_SCHEMA,
        CONSTRAINT_NAME,
        UNIQUE_CONSTRAINT_CATALOG,
        UNIQUE_CONSTRAINT_SCHEMA,
        UNIQUE_CONSTRAINT_NAME,
        MATCH_OPTION,
        UPDATE_RULE,
        DELETE_RULE,
        TABLE_NAME ,
        REFERENCED_TABLE_NAME,
        COLUMN_NAME,
        REFERENCED_COLUMN_NAME
    )

    select
        r.CONSTRAINT_CATALOG,
        r.CONSTRAINT_SCHEMA,
        r.CONSTRAINT_NAME,
        r.UNIQUE_CONSTRAINT_CATALOG,
        r.UNIQUE_CONSTRAINT_SCHEMA,
        r.UNIQUE_CONSTRAINT_NAME,
        r.MATCH_OPTION,
        r.UPDATE_RULE,
        r.DELETE_RULE,
        r.TABLE_NAME ,
        r.REFERENCED_TABLE_NAME,

        u.COLUMN_NAME,
        u.REFERENCED_COLUMN_NAME

    from (
        select * from information_schema.referential_constraints where constraint_schema=database()
    ) r
    join (
        select * from information_schema.key_column_usage where constraint_schema= database()
    ) u
    on u.table_name = r.table_name and
        u.constraint_name = r.constraint_name and
        u.constraint_schema= database() and
        r.constraint_schema= database()
      

    on duplicate key update

        UNIQUE_CONSTRAINT_CATALOG=values(UNIQUE_CONSTRAINT_CATALOG),
        UNIQUE_CONSTRAINT_SCHEMA=values(UNIQUE_CONSTRAINT_SCHEMA),
        UNIQUE_CONSTRAINT_NAME=values(UNIQUE_CONSTRAINT_NAME),
        MATCH_OPTION=values(MATCH_OPTION),
        UPDATE_RULE=values(UPDATE_RULE),
        DELETE_RULE=values(DELETE_RULE),
        TABLE_NAME=values(TABLE_NAME),
        REFERENCED_TABLE_NAME=values(REFERENCED_TABLE_NAME),
        COLUMN_NAME=values(COLUMN_NAME),
        REFERENCED_COLUMN_NAME=values(REFERENCED_COLUMN_NAME)
    ;

    create or replace view view_readtable_ds_nm_tables as
    select
    a.CONSTRAINT_NAME A_CONSTRAINT_NAME,
    a.REFERENCED_TABLE_NAME A_REFERENCED_TABLE_NAME,
    a.TABLE_NAME A_TABLE_NAME,
    group_concat(a.COLUMN_NAME separator ',') A_COLUMN_NAME,
    group_concat(a.REFERENCED_COLUMN_NAME separator ',') A_REFERENCED_COLUMN_NAME,

    concat('{',group_concat( concat('"',lower(a.COLUMN_NAME),'"') separator ','  ),'}') A_COLUMN_JSON,
    concat('{',group_concat( concat('"',lower(b.COLUMN_NAME),'"') separator ',' ),'}') B_COLUMN_JSON,
    concat('{',group_concat( concat('"',lower(a.REFERENCED_COLUMN_NAME),'"') separator ',' ),'}') A_REFERENCED_COLUMN_JSON,
    concat('{',group_concat( concat('"',lower(b.REFERENCED_COLUMN_NAME),'"') separator ',' ),'}') B_REFERENCED_COLUMN_JSON,

    concat(
        '{',group_concat(
        concat(
        '"',lower(a.table_name),'__',
        lower(a.column_name),'"'
        ,':',
        '"',lower(a.referenced_table_name),'__',
        lower(a.referenced_column_name),'"'
        ) separator ','
    ),'}') A_REFERENCED_JSON,


    b.CONSTRAINT_NAME B_CONSTRAINT_NAME,
    b.REFERENCED_TABLE_NAME B_REFERENCED_TABLE_NAME,
    b.TABLE_NAME B_TABLE_NAME,
    group_concat(b.COLUMN_NAME separator ',') B_COLUMN_NAME,
    group_concat(b.REFERENCED_COLUMN_NAME separator ',') B_REFERENCED_COLUMN_NAME,

    concat(
        '{',group_concat(
        concat(
        '"',lower(b.table_name),'__',
        lower(b.column_name),'"'
        ,':',
        '"',lower(b.referenced_table_name),'__',
        lower(b.referenced_column_name),'"'
        ) separator ','
    ),'}') B_REFERENCED_JSON


    from
    mv_referential_constraints a
    join
    mv_referential_constraints b
    on
        a.TABLE_NAME = b.table_name
        and a.CONSTRAINT_NAME<>b.CONSTRAINT_NAME
        and a.COLUMN_NAME<>b.COLUMN_NAME
    group by
    a.CONSTRAINT_NAME  ,
    a.REFERENCED_TABLE_NAME  ,
    a.TABLE_NAME  ,
    b.CONSTRAINT_NAME  ,
    b.REFERENCED_TABLE_NAME  ,
    b.TABLE_NAME
    ;


    insert into ds_nm_tables
    (
    `table_name`,
    `intermedia_table_name`,
    `referenced_table_name`,
    `constraint_name`,
    `referenced_constraint_name`,
    `table_name_json`,
    `referenced_table_json`

    )

    select
    A_REFERENCED_TABLE_NAME `table_name`,
    A_TABLE_NAME `intermedia_table_name`,
    B_REFERENCED_TABLE_NAME `referenced_table_name`,
    A_constraint_name `constraint_name`,
    B_constraint_name `referenced_constraint_name`,
    B_REFERENCED_JSON `table_name_json`,
    A_REFERENCED_JSON `referenced_table_json`
    from
    view_readtable_ds_nm_tables
    join
    ds ar on ar.table_name = view_readtable_ds_nm_tables.A_REFERENCED_TABLE_NAME
    join
    ds a on a.table_name = view_readtable_ds_nm_tables.B_TABLE_NAME
    join
    ds br on br.table_name = view_readtable_ds_nm_tables.B_REFERENCED_TABLE_NAME
    union
    select
    B_REFERENCED_TABLE_NAME,
    B_TABLE_NAME,
    A_REFERENCED_TABLE_NAME,
    B_constraint_name,
    A_constraint_name,
    B_REFERENCED_JSON,
    A_REFERENCED_JSON
    from
    view_readtable_ds_nm_tables

    join
    ds ar on ar.table_name = view_readtable_ds_nm_tables.B_REFERENCED_TABLE_NAME
    join
    ds a on a.table_name = view_readtable_ds_nm_tables.B_TABLE_NAME
    join
    ds br on br.table_name = view_readtable_ds_nm_tables.A_REFERENCED_TABLE_NAME


    where 
        A_TABLE_NAME in (select table_name from ds)
        and B_REFERENCED_TABLE_NAME in (select table_name from ds)
        and A_REFERENCED_TABLE_NAME in (select table_name from ds)

    on duplicate key update


    `table_name`=values(`table_name`),
    `intermedia_table_name`=values(`intermedia_table_name`),
    `referenced_table_name`=values(`referenced_table_name`),
    `table_name_json`=values(`table_name_json`),
    `referenced_table_json`=values(`referenced_table_json`)
    ;





END //



DROP PROCEDURE IF EXISTS `UPDATE_DS_LOCAL_META_DATA` //
CREATE PROCEDURE `UPDATE_DS_LOCAL_META_DATA`()
    MODIFIES SQL DATA
BEGIN
    insert into ds_column_form_label (
        table_name,
        column_name,
        language,
        label,
        xtype,
        field_path,
        position,
        hidden,
        active
    )
    select
        ifnull(ds_column_form_label.table_name,ds_column.table_name) table_name,
        ifnull(ds_column_form_label.column_name,ds_column.column_name) column_name,
        ifnull(ds_column_form_label.language,'DE') language,
        ifnull(ds_column_form_label.label,ds_column.column_name) label,
        ifnull(ds_column_form_label.xtype,'displayfield') xtype,
        ifnull(ds_column_form_label.field_path,'Allgemein') field_path,
        ifnull(ds_column_form_label.position,0) position,
        ifnull(ds_column_form_label.hidden,0) hidden,
        ifnull(ds_column_form_label.active,1) active
    from
        ds_column
        left join ds_column_form_label
        on  ds_column.table_name = ds_column_form_label.table_name
        and ds_column.column_name = ds_column_form_label.column_name
    where
        column_key='PRI' and ds_column_form_label.table_name is null
        on duplicate key update active=values(active);



    insert into ds_column_list_label (
        table_name,
        column_name,
        language,
        label,
        xtype,
        editor,
        position,
        hidden,
        active
    )
    select
        ifnull(ds_column_list_label.table_name,ds_column.table_name) table_name,
        ifnull(ds_column_list_label.column_name,ds_column.column_name) column_name,
        ifnull(ds_column_list_label.language,'DE') language,
        ifnull(ds_column_list_label.label,ds_column.column_name) label,
        ifnull(ds_column_list_label.xtype,'gridcolumn') xtype,
        '' editor,
        ifnull(ds_column_list_label.position,0) position,
        ifnull(ds_column_list_label.hidden,0) hidden,
        ifnull(ds_column_list_label.active,1) active
    from
        ds_column
        left join ds_column_list_label
        on  ds_column.table_name = ds_column_list_label.table_name
            and ds_column.column_name = ds_column_list_label.column_name
    where
        column_key='PRI' and ds_column_list_label.table_name is null
        on duplicate key update active=values(active);

END //


DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP` //
CREATE PROCEDURE `UPDATE_DS_SETUP`(  )
    MODIFIES SQL DATA
BEGIN

    DECLARE done INT DEFAULT FALSE;
    DECLARE loop_t_name VARCHAR(50);

    -- DECLARE cur CURSOR FOR SELECT lower(table_name) table_name FROM information_schema.tables WHERE table_schema = in_dbname and table_type in ('BASE TABLE','VIEW') ;
    -- DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;


    SET FOREIGN_KEY_CHECKS=0;
    alter table ds modify table_name varchar(128);
    alter table ds_access modify table_name varchar(128);
    alter table ds_addcommands modify table_name varchar(128);
    alter table ds_additional_columns modify table_name varchar(128);
    alter table ds_calendar modify table_name varchar(128);
    alter table ds_checkboxreference_tables modify table_name varchar(128);
    alter table ds_column modify table_name varchar(128);
    alter table ds_column_dialog_label modify table_name varchar(128);
    alter table ds_column_form_label modify table_name varchar(128);
    -- alter table ds_column_form_show modify table_name varchar(128);
    alter table ds_column_list_label modify table_name varchar(128);
    -- alter table ds_column_list_show modify table_name varchar(128);
    alter table ds_column_tagfields modify table_name varchar(128);
    alter table ds_column_types modify table_name varchar(128);
    alter table ds_combined_tables modify table_name varchar(128);
    alter table ds_contextmenu modify table_name varchar(128);
    alter table ds_contextmenu_groups modify table_name varchar(128);
    alter table ds_contextmenu_params modify table_name varchar(128);
    alter table ds_contextmenu_session_groups modify table_name varchar(128);
    alter table ds_copy_master_config modify table_name varchar(128);
    alter table ds_dropdownfields modify table_name varchar(128);
    alter table ds_genericbarcode modify table_name varchar(128);
    alter table ds_nm_tables modify table_name varchar(128);
    alter table ds_pdf_reports_ds modify table_name varchar(128);
    alter table ds_preview_form_label modify table_name varchar(128);
    alter table ds_query modify table_name varchar(128);
    alter table ds_reference_tables modify table_name varchar(128);
    alter table ds_searchfields modify table_name varchar(128);
    alter table ds_sync_data modify table_name varchar(128);
    alter table ds_sync_hstrtable_lock modify table_name varchar(128);
    alter table ds_sync_remove modify table_name varchar(128);
    alter table ds_trigger modify table_name varchar(128);
    alter table log_ds_sync modify table_name varchar(128);
    alter table mv_ds_config modify table_name varchar(128);
    alter table mv_ds_reference_tables modify table_name varchar(128);
    alter table mv_foreign_keys modify table_name varchar(128);
    alter table mv_kcu modify table_name varchar(128);
    alter table mv_key_column_usage modify table_name varchar(128);
    alter table mv_referenced_tables modify table_name varchar(128);
    alter table mv_referential_constraints modify table_name varchar(128);
    alter table  ds_column_tagfields modify intermedia_table_name varchar(128);
    alter table  ds_column_tagfields modify referenced_table_name varchar(128);
    alter table  ds_nm_tables modify intermedia_table_name varchar(255);
    alter table  ds_nm_tables modify referenced_table_name varchar(255);


    SET FOREIGN_KEY_CHECKS=1;

    call UPDATE_DS_TABLES_DDL();



    insert into ds (table_name,existsreal,combined) 
    SELECT lower(table_name) table_name, 1 e, 0 c FROM information_schema.tables WHERE table_schema = database() and table_type in ('BASE TABLE','VIEW') 
    on duplicate key update existsreal=values(existsreal), `combined`=values(`combined`);
    /*
    SET @s=concat( 'update ',in_dbname,'.ds set existsreal=0 ');
    PREPARE stmt1 FROM @s;
    execute stmt1;
    DEALLOCATE PREPARE stmt1;


    OPEN cur;
    read_loop: LOOP
    FETCH cur INTO loop_t_name;

    IF done THEN
        LEAVE read_loop;
    END IF;
    

    call debug_message(concat('tablename ',loop_t_name));

    SET @s=concat('insert into ',in_dbname,'.ds (table_name,existsreal,combined) values (\'',loop_t_name,'\',1,0) on duplicate key update existsreal=values(existsreal), `combined`=values(`combined`) ');
    PREPARE stmt1 FROM @s;
    execute stmt1;
    DEALLOCATE PREPARE stmt1;
    SET done=false;



    SET done=false;
    END LOOP;
    CLOSE cur;
    */

    call UPDATE_DS_COLUMN_SETUP_ALL();


    -- Diese tabelle wir im Regelfall von der Session Middleware erzeugt
    -- Dies Standardrollen werden immer ergänzt
    -- Alte Tabelle, Bitte nicht mehr verwenden: temp_user_groups

    CALL UPDATE_DS_REFERENCED_TABLES( database() );
    CALL UPDATE_DS_MV_REFERENCED_TABLES(  );
    CALL UPDATE_DS_LOCAL_META_DATA();



END //



CREATE OR REPLACE FUNCTION `convertColumnType2DataType`(in_type varchar(255))
RETURNS varchar(255)
DETERMINISTIC
COMMENT 'fix view column type'
BEGIN 
    IF (INSTR(in_type,'varchar')=1) THEN
        RETURN 'varchar';
    END IF;
    IF (INSTR(in_type,'bigint')=1) THEN
        RETURN 'bigint';
    END IF;
    IF (INSTR(in_type,'datetime')=1) THEN
        RETURN 'datetime';
    END IF;
    IF (INSTR(in_type,'date')=1) THEN
        RETURN 'date';
    END IF;
    IF (INSTR(in_type,'timestamp')=1) THEN
        RETURN 'timestamp';
    END IF;
    IF (INSTR(in_type,'time')=1) THEN
        RETURN 'time';
    END IF;

    
    
    IF (INSTR(in_type,'tinyint')=1) THEN
        RETURN 'tinyint';
    END IF;

    IF (INSTR(in_type,'smallint')=1) THEN
        RETURN 'smallint';
    END IF;

    IF (INSTR(in_type,'binary')=1) THEN
        RETURN 'binary';
    END IF;
    
    
    IF (INSTR(in_type,'decimal')=1) THEN
        RETURN 'decimal';
    END IF;
    IF (INSTR(in_type,'double')=1) THEN
        RETURN 'double';
    END IF;
    IF (INSTR(in_type,'float')=1) THEN
        RETURN 'float';
    END IF;
    

    IF (INSTR(in_type,'char')=1) THEN
        RETURN 'char';
    END IF;
    IF (INSTR(in_type,'text')=1) THEN
        RETURN 'text';
    END IF;


    IF (INSTR(in_type,'enum')=1) THEN
        RETURN 'varchar(255)';
    END IF;
    
    
    IF (INSTR(in_type,'longtext')=1) THEN
        RETURN 'longtext';
    END IF;
    
    IF (INSTR(in_type,'int')=1) THEN
        IF in_type='int(1)' THEN
            RETURN 'tinyint';
        ELSEIF in_type='int(4)' THEN
            RETURN 'tinyint';
        ELSE
            RETURN 'int';
        END IF;
    END IF;

    RETURN in_type;
END //



DROP PROCEDURE IF EXISTS `UPDATE_DS_COLUMN_SETUP` //


DROP PROCEDURE IF EXISTS `UPDATE_DS_COLUMN_SETUP_ALL` //
CREATE PROCEDURE `UPDATE_DS_COLUMN_SETUP_ALL`(    )
    MODIFIES SQL DATA
BEGIN




    call addFieldIfNotExists('ds_column','writeable','tinyint default 0');
    update ds_column set existsreal=0,writeable=0;


    -- DEFAULT TABLE FIELDS
    
    insert into ds_column (
        column_name,
        table_name,
        data_type,
        is_nullable,
        column_key,
        column_type,
        character_maximum_length,
        numeric_precision,
        numeric_scale,
        character_set_name,
        privileges,
        existsreal,
        writeable
    )

    
    select
        lower(columns.column_name) column_name,
        lower(ds.real_table_name) table_name,
        convertColumnType2DataType(columns.column_type) data_type, -- columns.data_type)
        columns.is_nullable,
        columns.column_key column_key,
        columns.column_type,
        columns.character_maximum_length,
        columns.numeric_precision,
        columns.numeric_scale,
        columns.character_set_name,
        columns.privileges,
        1 existsreal,
        1 writeable
    from
    information_schema.columns columns
    join (
        select table_name,table_name real_table_name from ds
    ) ds
    on columns.table_name = ds.table_name
    and columns.table_schema    = database()

    on duplicate key
    update
        `existsreal`=values(`existsreal`),
        `is_nullable`=values(`is_nullable`),
        `data_type`=values(`data_type`),
        `column_name`=values(`column_name`),
        `column_key`=values(`column_key`),
        `column_type`=values(`column_type`),
        `character_maximum_length`=values(`character_maximum_length`),
        `numeric_precision`=values(`numeric_precision`),
        `numeric_scale`=values(`numeric_scale`),
        `character_set_name`=values(`character_set_name`),
        `privileges`=values(`privileges`),
        `writeable`=values(`writeable`);




    -- COMBINED TABLES FIELDS
    

    insert into ds_column (
        column_name,
        table_name,
        data_type,
        is_nullable,
        column_key,
        column_type,
        character_maximum_length,
        numeric_precision,
        numeric_scale,
        character_set_name,
        privileges,
        existsreal,
        writeable
    )
    select
        lower(columns.column_name) column_name,
        lower(ds.real_table_name) table_name,
        convertColumnType2DataType(columns.column_type) data_type, -- columns.data_type)
        columns.is_nullable,
        max(columns.column_key) column_key,
        min(columns.column_type) column_type,
        min(columns.character_maximum_length) character_maximum_length,
        min(columns.numeric_precision) numeric_precision,
        min(columns.numeric_scale) numeric_scale,
        max(columns.character_set_name) character_set_name,
        max(columns.privileges) privileges,
        1 existsreal,
        1 writeable
    from
    information_schema.columns columns
    join (
        select table_name,table_alias real_table_name from ds_combined_tables
    ) ds
    on columns.table_name = ds.table_name
    and columns.table_schema    = database()

    group by
        ds.real_table_name,
        columns.column_name,
        columns.data_type,
        columns.is_nullable
    having table_name is not null
        
    on duplicate key
    update
        `existsreal`=values(`existsreal`),
        `is_nullable`=values(`is_nullable`),
        `data_type`=values(`data_type`),
        `column_name`=values(`column_name`),
        `column_key`=values(`column_key`),
        `column_type`=values(`column_type`),
        `character_maximum_length`=values(`character_maximum_length`),
        `numeric_precision`=values(`numeric_precision`),
        `numeric_scale`=values(`numeric_scale`),
        `character_set_name`=values(`character_set_name`),
        `privileges`=values(`privileges`),
        `writeable`=values(`writeable`);






    -- READ TABLE FIELDS

    insert into ds_column (
        column_name,
        table_name,
        data_type,
        is_nullable,
        column_key,
        column_type,
        character_maximum_length,
        numeric_precision,
        numeric_scale,
        character_set_name,
        privileges,
        existsreal,
        writeable
    )
    select
        lower(columns.column_name) column_name,
        lower(ds.real_table_name) table_name,
        convertColumnType2DataType(columns.column_type) data_type, -- columns.data_type)
        columns.is_nullable,
        columns.column_key column_key,

        columns.column_type column_type,
        columns.character_maximum_length,
        columns.numeric_precision,
        columns.numeric_scale,
        columns.character_set_name,
        columns.privileges,
        1 existsreal,
        0 writeable
    from
    information_schema.columns columns
    join (
        select table_name,read_table,table_name real_table_name from ds
    ) ds
    on 
        columns.table_name = ds.read_table
        and columns.table_schema    = database()
    having table_name is not null

    on duplicate key
    update
        `existsreal`=values(`existsreal`),
        `is_nullable`=values(`is_nullable`),
        `data_type`=values(`data_type`),
        `column_name`=values(`column_name`),
        -- `column_key`=values(`column_key`),
        `column_type`=values(`column_type`),
        `character_maximum_length`=values(`character_maximum_length`),
        `numeric_precision`=values(`numeric_precision`),
        `numeric_scale`=values(`numeric_scale`),
        `character_set_name`=values(`character_set_name`),
        `privileges`=values(`privileges`);


 

    update ds_column set is_primary=1 where column_key='PRI' and `existsreal`=1;


END //



DROP PROCEDURE IF EXISTS `UPDATE_DS_SINGLE_TABLE` //
CREATE PROCEDURE `UPDATE_DS_SINGLE_TABLE`(  in in_table_name varchar(128)  )
    MODIFIES SQL DATA
BEGIN

    insert into ds (table_name,existsreal,combined) 
    SELECT lower(table_name) table_name, 1 e, 0 c FROM information_schema.tables WHERE table_schema = database() and table_type in ('BASE TABLE','VIEW')  and table_name = in_table_name
    on duplicate key update existsreal=values(existsreal), `combined`=values(`combined`);

    update ds_column set existsreal=0,writeable=0 where table_name = in_table_name;

    -- DEFAULT TABLE FIELDS
    
    insert into ds_column (
        column_name,
        table_name,
        data_type,
        is_nullable,
        column_key,
        column_type,
        character_maximum_length,
        numeric_precision,
        numeric_scale,
        character_set_name,
        privileges,
        existsreal,
        writeable
    )
    select
        lower(columns.column_name) column_name,
        lower(ds.real_table_name) table_name,
        convertColumnType2DataType(columns.column_type) data_type, -- columns.data_type)
        columns.is_nullable,
        columns.column_key column_key,
        columns.column_type,
        columns.character_maximum_length,
        columns.numeric_precision,
        columns.numeric_scale,
        columns.character_set_name,
        columns.privileges,
        1 existsreal,
        1 writeable
    from
    information_schema.columns columns
    join (
        select table_name,table_name real_table_name from ds
    ) ds
    on columns.table_name = ds.table_name
    and columns.table_schema    = database()
    and columns.table_name = in_table_name

    on duplicate key
    update
        `existsreal`=values(`existsreal`),
        `is_nullable`=values(`is_nullable`),
        `data_type`=values(`data_type`),
        `column_name`=values(`column_name`),
        `column_key`=values(`column_key`),
        `column_type`=values(`column_type`),
        `character_maximum_length`=values(`character_maximum_length`),
        `numeric_precision`=values(`numeric_precision`),
        `numeric_scale`=values(`numeric_scale`),
        `character_set_name`=values(`character_set_name`),
        `privileges`=values(`privileges`),
        `writeable`=values(`writeable`);




    -- COMBINED TABLES FIELDS
    

    insert into ds_column (
        column_name,
        table_name,
        data_type,
        is_nullable,
        column_key,
        column_type,
        character_maximum_length,
        numeric_precision,
        numeric_scale,
        character_set_name,
        privileges,
        existsreal,
        writeable
    )
    select
        lower(columns.column_name) column_name,
        lower(ds.real_table_name) table_name,
        convertColumnType2DataType(columns.column_type) data_type, -- columns.data_type)
        columns.is_nullable,
        max(columns.column_key) column_key,
        min(columns.column_type) column_type,
        min(columns.character_maximum_length) character_maximum_length,
        min(columns.numeric_precision) numeric_precision,
        min(columns.numeric_scale) numeric_scale,
        max(columns.character_set_name) character_set_name,
        max(columns.privileges) privileges,
        1 existsreal,
        1 writeable
    from
    information_schema.columns columns
    join (
        select table_name,table_alias real_table_name from ds_combined_tables
    ) ds
    on columns.table_name = ds.table_name
    and columns.table_schema    = database()
    and columns.table_name = in_table_name

    group by
        ds.real_table_name,
        columns.column_name,
        columns.data_type,
        columns.is_nullable
    having table_name is not null
        
    on duplicate key
    update
        `existsreal`=values(`existsreal`),
        `is_nullable`=values(`is_nullable`),
        `data_type`=values(`data_type`),
        `column_name`=values(`column_name`),
        `column_key`=values(`column_key`),
        `column_type`=values(`column_type`),
        `character_maximum_length`=values(`character_maximum_length`),
        `numeric_precision`=values(`numeric_precision`),
        `numeric_scale`=values(`numeric_scale`),
        `character_set_name`=values(`character_set_name`),
        `privileges`=values(`privileges`),
        `writeable`=values(`writeable`);






    -- READ TABLE FIELDS

    insert into ds_column (
        column_name,
        table_name,
        data_type,
        is_nullable,
        column_key,
        column_type,
        character_maximum_length,
        numeric_precision,
        numeric_scale,
        character_set_name,
        privileges,
        existsreal,
        writeable
    )
    select
        lower(columns.column_name) column_name,
        lower(ds.real_table_name) table_name,
        convertColumnType2DataType(columns.column_type) data_type, -- columns.data_type)
        columns.is_nullable,
        columns.column_key column_key,

        columns.column_type column_type,
        columns.character_maximum_length,
        columns.numeric_precision,
        columns.numeric_scale,
        columns.character_set_name,
        columns.privileges,
        1 existsreal,
        0 writeable
    from
    information_schema.columns columns
    join (
        select table_name,read_table,table_name real_table_name from ds
    ) ds
    on 
        columns.table_name = ds.read_table
        and columns.table_schema    = database()
        and columns.table_name = in_table_name
    having table_name is not null

    on duplicate key
    update
        `existsreal`=values(`existsreal`),
        `is_nullable`=values(`is_nullable`),
        `data_type`=values(`data_type`),
        `column_name`=values(`column_name`),
        -- `column_key`=values(`column_key`),
        `column_type`=values(`column_type`),
        `character_maximum_length`=values(`character_maximum_length`),
        `numeric_precision`=values(`numeric_precision`),
        `numeric_scale`=values(`numeric_scale`),
        `character_set_name`=values(`character_set_name`),
        `privileges`=values(`privileges`);


 

    update ds_column set is_primary=1 where column_key='PRI' and `existsreal`=1 and table_name = in_table_name;


END //


DELIMITER ;

-- SOURCE FILE: ./src//000-setup/005.ds.setup.datei.sql 


DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DATEIEN` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DATEIEN`()
    MODIFIES SQL DATA
BEGIN

IF (
  NOT EXISTS(
    select * from INFORMATION_SCHEMA.tables
    WHERE table_schema = database()
    and table_name = 'dateien'
  )
) THEN 

  create table if not exists dateien(
    name varchar(64) not null,
    insert_datetime datetime,
    insert_login varchar(100),
    datei integer,
    primary key (name)
  );

  call UPDATE_DS_SETUP( );


END IF;

-- BEGIN DS dateien
-- NAME: Dateien

insert into `ds`
                  (`table_name`)
                  values
                  ('dateien')
                  on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Dateien',`reorderfield`='',`use_history`='0',`searchfield`='name',`displayfield`='name',`sortfield`='name',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`read_table`='',`cssstyle`='',`class_name`='Datenstamm',`special_add_panel`='',`existsreal`='1',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`combined`='0',`phpexporterfilename`='',`default_pagesize`='100',`allowform`='1',`character_set_name`='',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='dateien';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('dateien','datei')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='int',`column_key`='',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='dateien' and `column_name`='datei';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('dateien','id')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='{#serial}',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='int',`column_key`='PRI',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='\'\'' where `table_name`='dateien' and `column_name`='id';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('dateien','insert_datetime')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='datetime',`column_key`='',`column_type`='datetime',`character_maximum_length`='0',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='dateien' and `column_name`='insert_datetime';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('dateien','insert_login')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='{:getSessionUser()}',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(100)',`character_maximum_length`='100',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='\'\'' where `table_name`='dateien' and `column_name`='insert_login';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('dateien','name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='dateien' and `column_name`='name';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('administration','dateien')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='1',`delete`='1',`append`='1',`existsreal`='0' where `role`='administration' and `table_name`='dateien';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('_default_','dateien')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='dateien';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('dateien','datei','DE','Datei','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='dsdocumentfield',`position`='2',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='dateien' and `column_name`='datei' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('dateien','id','DE','ID','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='dateien' and `column_name`='id' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('dateien','insert_datetime','DE','Datum (Anlage)','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='tualodatetimedisplayfield',`position`='3',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='dateien' and `column_name`='insert_datetime' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('dateien','insert_login','DE','Login (Anlage)','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='4',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='dateien' and `column_name`='insert_login' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('dateien','name','DE','Name','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='1',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='dateien' and `column_name`='name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('dateien','datei','DE','Datei')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='tualoimagedocumentcolumn',`editor`='',`position`='2',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='dateien' and `column_name`='datei' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('dateien','id','DE','ID')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='tualocolumnnumber0',`editor`='',`position`='0',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='dateien' and `column_name`='id' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('dateien','insert_datetime','DE','Anlage')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='3',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='dateien' and `column_name`='insert_datetime' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('dateien','insert_login','DE','Login')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='4',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='dateien' and `column_name`='insert_login' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('dateien','name','DE','Name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='1',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='dateien' and `column_name`='name' and `language`='DE';
insert into `ds_dropdownfields`
                  (`table_name`,`name`)
                  values
                  ('dateien','id')
                  on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='id',`displayfield`='name',`filterconfig`='' where `table_name`='dateien' and `name`='id';
insert into `ds_dropdownfields`
                  (`table_name`,`name`)
                  values
                  ('dateien','id')
                  on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='id',`displayfield`='name',`filterconfig`='' where `table_name`='dateien' and `name`='id';
-- END DS dateien



END //
-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS`()
    MODIFIES SQL DATA
BEGIN
-- BEGIN DS ds
-- NAME: Datenstämme



CREATE OR REPLACE VIEW  `view_readtable_ds` AS
select 
    *
from 
    `ds`
where
    `table_name` not like 'mv%'
    and `table_name` not like 'ds_query%'
    and `table_name` not like 'view_readtable%'
    and `table_name` not like '%_doc'
    and `table_name` not like '%_doc_data'
    and `table_name` not like '%_docdata'
    and `table_name` not in ('ds_sync_lock','ds_sync_hstrtable_lock','ds_sync_remove','log_ds_sync')
;

insert into `ds`
                  (`table_name`)
                  values
                  ('ds')
                  on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Datenstämme',`reorderfield`='',`use_history`='0',`searchfield`='table_name',`displayfield`='table_name',`sortfield`='table_name',`searchany`='1',`hint`='# Datenstämme\n\n',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`read_table`='view_readtable_ds',`cssstyle`='',`class_name`='Datenstamm',`special_add_panel`='',`existsreal`='1',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`combined`='0',`phpexporterfilename`='{GUID}',`default_pagesize`='10000',`allowform`='1',`character_set_name`='',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView' where `table_name`='ds';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','allowform')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='allowform';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','alternativeformxtype')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(50)',`character_maximum_length`='50',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='alternativeformxtype';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','character_set_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='character_set_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','class_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='class_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','combined')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='combined';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','cssstyle')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(100)',`character_maximum_length`='100',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='cssstyle';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','default_pagesize')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='int',`column_key`='',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='default_pagesize';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','displayfield')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='displayfield';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','existsreal')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='existsreal';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','globalsearch')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='globalsearch';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','hint')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='longtext',`column_key`='',`column_type`='longtext',`character_maximum_length`='4294967295',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='hint';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','listselectionmodel')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='cellmodel',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(100)',`character_maximum_length`='100',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='listselectionmodel';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','listviewbaseclass')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='listviewbaseclass';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','listxtypeprefix')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(30)',`character_maximum_length`='30',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='listxtypeprefix';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','overview_tpl')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='longtext',`column_key`='',`column_type`='longtext',`character_maximum_length`='4294967295',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='overview_tpl';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','phpexporter')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(30)',`character_maximum_length`='30',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='phpexporter';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','phpexporterfilename')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(80)',`character_maximum_length`='80',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='phpexporterfilename';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','read_filter')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='mediumtext',`column_key`='',`column_type`='mediumtext',`character_maximum_length`='16777215',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='read_filter';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','read_table')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='read_table';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','reorderfield')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='reorderfield';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','searchany')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='1',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='searchany';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','searchfield')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='searchfield';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','sortfield')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(50)',`character_maximum_length`='50',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='sortfield';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','special_add_panel')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='special_add_panel';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','syncable')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='syncable';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','sync_table')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='sync_table';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','sync_view')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='sync_view';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='table_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','title')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='title';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','use_history')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='use_history';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds','writetable')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1' where `table_name`='ds' and `column_name`='writetable';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('administration','ds')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='0',`append`='0',`existsreal`='1' where `role`='administration' and `table_name`='ds';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('_default_','ds')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds';
insert into `ds_addcommands`
                  (`table_name`,`xtype`)
                  values
                  ('ds','cmp_setup_export_config_command')
                  on duplicate key update `table_name`=values(`table_name`),`xtype`=values(`xtype`);
insert into `ds_addcommands`
                  (`table_name`,`xtype`)
                  values
                  ('ds','cmp_setup_export_config_command')
                  on duplicate key update `table_name`=values(`table_name`),`xtype`=values(`xtype`);
insert into `ds_addcommands`
                  (`table_name`,`xtype`)
                  values
                  ('ds','cmp_setup_update_history_tables_command')
                  on duplicate key update `table_name`=values(`table_name`),`xtype`=values(`xtype`);
insert into `ds_addcommands`
                  (`table_name`,`xtype`)
                  values
                  ('ds','cmp_setup_update_history_tables_command')
                  on duplicate key update `table_name`=values(`table_name`),`xtype`=values(`xtype`);
insert into `ds_addcommands`
                  (`table_name`,`xtype`)
                  values
                  ('ds','ds_refresh_information_schema_command')
                  on duplicate key update `table_name`=values(`table_name`),`xtype`=values(`xtype`);
insert into `ds_addcommands`
                  (`table_name`,`xtype`)
                  values
                  ('ds','ds_refresh_information_schema_command')
                  on duplicate key update `table_name`=values(`table_name`),`xtype`=values(`xtype`);
insert into `ds_addcommands`
                  (`table_name`,`xtype`)
                  values
                  ('ds','ds_rmcache_command')
                  on duplicate key update `table_name`=values(`table_name`),`xtype`=values(`xtype`);
insert into `ds_addcommands`
                  (`table_name`,`xtype`)
                  values
                  ('ds','ds_rmcache_command')
                  on duplicate key update `table_name`=values(`table_name`),`xtype`=values(`xtype`);
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','allowform','DE','Formular erlauben','Allgemein/Anzeige')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='checkbox',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='allowform' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','alternativeformxtype','DE','alternatives Formular','Allgemein/Anzeige')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='alternativeformxtype' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','class_name','DE','Klasse','Allgemein/Anzeige')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='combobox_ds_class_class_name',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='class_name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','combined','DE','combined','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='20',`hidden`='1',`active`='0' where `table_name`='ds' and `column_name`='combined' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','cssstyle','DE','cssstyle','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='21',`hidden`='1',`active`='0' where `table_name`='ds' and `column_name`='cssstyle' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','default_pagesize','DE','Seitengröße','Allgemein/Liste')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='numberfield',`position`='16',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='default_pagesize' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','displayfield','DE','Anzeigefeld','Allgemein/Anzeige')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='tualodsfields',`position`='2',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='displayfield' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','existsreal','DE','existsreal','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='22',`hidden`='1',`active`='0' where `table_name`='ds' and `column_name`='existsreal' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','globalsearch','DE','global Suchen','Allgemein/Suche')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='checkbox',`position`='5',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='globalsearch' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','hint','DE','Hinweis','Allgemein/Dokumentation')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textarea',`position`='15',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='hint' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','listselectionmodel','DE','Listenauswahltyp','Allgemein/Sortierung')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='tualolistselection',`position`='6',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='listselectionmodel' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','listviewbaseclass','DE','Listen-Basis-Klasse','Allgemein/Anzeige')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='listviewbaseclass' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','listxtypeprefix','DE','listxtypeprefix','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='23',`hidden`='1',`active`='0' where `table_name`='ds' and `column_name`='listxtypeprefix' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','overview_tpl','DE','overview_tpl','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='7',`hidden`='1',`active`='1' where `table_name`='ds' and `column_name`='overview_tpl' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','phpexporter','DE','Exportklasse','Allgemein/Liste')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='14',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='phpexporter' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','phpexporterfilename','DE','Export-Dateiname','Allgemein/Liste')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='15',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='phpexporterfilename' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','read_filter','DE','read_filter','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='24',`hidden`='1',`active`='0' where `table_name`='ds' and `column_name`='read_filter' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','read_table','DE','Lesetabelle','Allgemein/Tabellen')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='10',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='read_table' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','reorderfield','DE','Sortierfeld','Allgemein/Sortierung')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='tualodsfields',`position`='8',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='reorderfield' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','searchany','DE','im gesamten Feld suchen','Allgemein/Suche')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='checkbox',`position`='4',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='searchany' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','searchfield','DE','Suchfeld','Allgemein/Suche')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='tualodsfields',`position`='3',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='searchfield' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','sortfield','DE','sortieren nach','Allgemein/Sortierung')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='tualodsfields',`position`='9',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='sortfield' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','special_add_panel','DE','Programm zum Hinzufügen','Allgemein/Programm')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='special_add_panel' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','syncable','DE','syncable','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='26',`hidden`='1',`active`='0' where `table_name`='ds' and `column_name`='syncable' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','sync_table','DE','Synchronisationstabelle','Allgemein//Tabellen')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='13',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='sync_table' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','sync_view','DE','Lesetabelle (Sync.)','Allgemein/Tabellen')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='14',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='sync_view' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','table_name','DE','DB-Tabelle','Allgemein/Anzeige')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','title','DE','Titel','Allgemein/Anzeige')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='1',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='title' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','use_history','DE','use_history','Allgemein/Tabellen')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='12',`hidden`='1',`active`='1' where `table_name`='ds' and `column_name`='use_history' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds','writetable','DE','Schreibtabelle','Allgemein/Tabellen')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='11',`hidden`='0',`active`='1' where `table_name`='ds' and `column_name`='writetable' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds','class_name','DE','Klasse')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='column_ds_class_class_name',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds' and `column_name`='class_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds','cssstyle','DE','cssstyle')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds' and `column_name`='cssstyle' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds','displayfield','DE','displayfield')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='2',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds' and `column_name`='displayfield' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds','globalsearch','DE','Globalesuche')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='3',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds' and `column_name`='globalsearch' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds','hint','DE','hint')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='4',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds' and `column_name`='hint' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds','listselectionmodel','DE','listselectionmodel')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='5',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds' and `column_name`='listselectionmodel' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds','overview_tpl','DE','overview_tpl')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='6',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds' and `column_name`='overview_tpl' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds','read_table','DE','read_table')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='7',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds' and `column_name`='read_table' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds','reorderfield','DE','reorderfield')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='8',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds' and `column_name`='reorderfield' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds','searchany','DE','searchany')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='9',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds' and `column_name`='searchany' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds','searchfield','DE','searchfield')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='10',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds' and `column_name`='searchfield' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds','sortfield','DE','sortfield')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='11',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds' and `column_name`='sortfield' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds','sync_table','DE','sync_table')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='12',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds' and `column_name`='sync_table' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds','sync_view','DE','sync_view')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='13',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds' and `column_name`='sync_view' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds','table_name','DE','Tabellenname')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='Tualo.renderer.CSSMetaRenderer',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds','title','DE','Title')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='1',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds' and `column_name`='title' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds','use_history','DE','use_history')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='14',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds' and `column_name`='use_history' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds','writetable','DE','writetable')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='15',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds' and `column_name`='writetable' and `language`='DE';
insert into `ds_dropdownfields`
                  (`table_name`,`name`)
                  values
                  ('ds','Tabelle')
                  on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='table_name',`displayfield`='title',`filterconfig`='' where `table_name`='ds' and `name`='Tabelle';
insert into `ds_dropdownfields`
                  (`table_name`,`name`)
                  values
                  ('ds','Tabelle')
                  on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='table_name',`displayfield`='title',`filterconfig`='' where `table_name`='ds' and `name`='Tabelle';

insert into `ds_nm_tables`
                  (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                  values
                  ('ds','fk_ds_calendar_ds_ctn','fk_ds_calendar_ds_tn','DE','')
                  on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds',`intermedia_table_name`='ds_calendar',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_calendar__calendar_table_name\":\"ds__table_name\"}',`referenced_table_json`='{\"ds_calendar__table_name\":\"ds__table_name\"}' where `table_name`='ds' and `constraint_name`='fk_ds_calendar_ds_ctn' and `referenced_constraint_name`='fk_ds_calendar_ds_tn';
insert into `ds_nm_tables`
                  (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                  values
                  ('ds','fk_ds_calendar_ds_tn','fk_ds_calendar_ds_ctn','DE','')
                  on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds',`intermedia_table_name`='ds_calendar',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_calendar__table_name\":\"ds__table_name\"}',`referenced_table_json`='{\"ds_calendar__calendar_table_name\":\"ds__table_name\"}' where `table_name`='ds' and `constraint_name`='fk_ds_calendar_ds_tn' and `referenced_constraint_name`='fk_ds_calendar_ds_ctn';
insert into `ds_nm_tables`
                  (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                  values
                  ('ds','fk_ds_column_form_label_ds','fk_ds_column_form_label_ds_column','DE','')
                  on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds_column',`intermedia_table_name`='ds_column_form_label',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_column_form_label__table_name\":\"ds__table_name\"}',`referenced_table_json`='{\"ds_column_form_label__column_name\":\"ds_column__column_name\"}' where `table_name`='ds' and `constraint_name`='fk_ds_column_form_label_ds' and `referenced_constraint_name`='fk_ds_column_form_label_ds_column';
insert into `ds_nm_tables`
                  (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                  values
                  ('ds','fk_ds_column_list_label_ds','fk_ds_column_list_label_ds_column','DE','')
                  on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds_column',`intermedia_table_name`='ds_column_list_label',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_column_list_label__table_name\":\"ds__table_name\"}',`referenced_table_json`='{\"ds_column_list_label__column_name\":\"ds_column__column_name\"}' where `table_name`='ds' and `constraint_name`='fk_ds_column_list_label_ds' and `referenced_constraint_name`='fk_ds_column_list_label_ds_column';
insert into `ds_nm_tables`
                  (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                  values
                  ('ds','fk_ds_ds_searchfields','fk_ds_column_ds_searchfields','DE','')
                  on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds_column',`intermedia_table_name`='ds_searchfields',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_searchfields__table_name\":\"ds__table_name\"}',`referenced_table_json`='{\"ds_searchfields__column_name\":\"ds_column__column_name\"}' where `table_name`='ds' and `constraint_name`='fk_ds_ds_searchfields' and `referenced_constraint_name`='fk_ds_column_ds_searchfields';
insert into `ds_nm_tables`
                  (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                  values
                  ('ds','fk_ds_nm_tables_ds','fk_ds_nm_tables_i_ds','DE','')
                  on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds',`intermedia_table_name`='ds_nm_tables',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_nm_tables__table_name\":\"ds__table_name\"}',`referenced_table_json`='{\"ds_nm_tables__intermedia_table_name\":\"ds__table_name\"}' where `table_name`='ds' and `constraint_name`='fk_ds_nm_tables_ds' and `referenced_constraint_name`='fk_ds_nm_tables_i_ds';
insert into `ds_nm_tables`
                  (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                  values
                  ('ds','fk_ds_nm_tables_ds','fk_ds_nm_tables_r_ds','DE','')
                  on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds',`intermedia_table_name`='ds_nm_tables',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_nm_tables__table_name\":\"ds__table_name\"}',`referenced_table_json`='{\"ds_nm_tables__referenced_table_name\":\"ds__table_name\"}' where `table_name`='ds' and `constraint_name`='fk_ds_nm_tables_ds' and `referenced_constraint_name`='fk_ds_nm_tables_r_ds';
insert into `ds_nm_tables`
                  (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                  values
                  ('ds','fk_ds_nm_tables_i_ds','fk_ds_nm_tables_ds','DE','')
                  on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds',`intermedia_table_name`='ds_nm_tables',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_nm_tables__intermedia_table_name\":\"ds__table_name\"}',`referenced_table_json`='{\"ds_nm_tables__table_name\":\"ds__table_name\"}' where `table_name`='ds' and `constraint_name`='fk_ds_nm_tables_i_ds' and `referenced_constraint_name`='fk_ds_nm_tables_ds';
insert into `ds_nm_tables`
                  (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                  values
                  ('ds','fk_ds_nm_tables_i_ds','fk_ds_nm_tables_r_ds','DE','')
                  on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds',`intermedia_table_name`='ds_nm_tables',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_nm_tables__intermedia_table_name\":\"ds__table_name\"}',`referenced_table_json`='{\"ds_nm_tables__referenced_table_name\":\"ds__table_name\"}' where `table_name`='ds' and `constraint_name`='fk_ds_nm_tables_i_ds' and `referenced_constraint_name`='fk_ds_nm_tables_r_ds';
insert into `ds_nm_tables`
                  (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                  values
                  ('ds','fk_ds_nm_tables_r_ds','fk_ds_nm_tables_ds','DE','')
                  on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds',`intermedia_table_name`='ds_nm_tables',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_nm_tables__referenced_table_name\":\"ds__table_name\"}',`referenced_table_json`='{\"ds_nm_tables__table_name\":\"ds__table_name\"}' where `table_name`='ds' and `constraint_name`='fk_ds_nm_tables_r_ds' and `referenced_constraint_name`='fk_ds_nm_tables_ds';
insert into `ds_nm_tables`
                  (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                  values
                  ('ds','fk_ds_nm_tables_r_ds','fk_ds_nm_tables_i_ds','DE','')
                  on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds',`intermedia_table_name`='ds_nm_tables',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_nm_tables__referenced_table_name\":\"ds__table_name\"}',`referenced_table_json`='{\"ds_nm_tables__intermedia_table_name\":\"ds__table_name\"}' where `table_name`='ds' and `constraint_name`='fk_ds_nm_tables_r_ds' and `referenced_constraint_name`='fk_ds_nm_tables_i_ds';
insert into `ds_nm_tables`
                  (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                  values
                  ('ds','fk_ds_preview_form_label_ds','fk_ds_preview_form_label_ds_column','DE','')
                  on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds_column',`intermedia_table_name`='ds_preview_form_label',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_preview_form_label__table_name\":\"ds__table_name\"}',`referenced_table_json`='{\"ds_preview_form_label__column_name\":\"ds_column__column_name\"}' where `table_name`='ds' and `constraint_name`='fk_ds_preview_form_label_ds' and `referenced_constraint_name`='fk_ds_preview_form_label_ds_column';
insert into `ds_nm_tables`
                  (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                  values
                  ('ds','fk_ds_reference_tables_ds','fk_ds_reference_tables_r_ds','DE','')
                  on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds',`intermedia_table_name`='ds_reference_tables',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_reference_tables__table_name\":\"ds__table_name\"}',`referenced_table_json`='{\"ds_reference_tables__reference_table_name\":\"ds__table_name\"}' where `table_name`='ds' and `constraint_name`='fk_ds_reference_tables_ds' and `referenced_constraint_name`='fk_ds_reference_tables_r_ds';
insert into `ds_nm_tables`
                  (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                  values
                  ('ds','fk_ds_reference_tables_r_ds','fk_ds_reference_tables_ds','DE','')
                  on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds',`intermedia_table_name`='ds_reference_tables',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_reference_tables__reference_table_name\":\"ds__table_name\"}',`referenced_table_json`='{\"ds_reference_tables__table_name\":\"ds__table_name\"}' where `table_name`='ds' and `constraint_name`='fk_ds_reference_tables_r_ds' and `referenced_constraint_name`='fk_ds_reference_tables_ds';
insert into `ds_trigger`
                  (`type`,`table_name`,`program`)
                  values
                  ('table','ds','cmp_ds/trigger/ds/trigger.php')
                  on duplicate key update `type`=values(`type`),`table_name`=values(`table_name`),`program`=values(`program`);
insert into `ds_trigger`
                  (`type`,`table_name`,`program`)
                  values
                  ('table','ds','cmp_ds/trigger/ds/trigger.php')
                  on duplicate key update `type`=values(`type`),`table_name`=values(`table_name`),`program`=values(`program`);
-- END DS ds




END //


-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_access.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_ACCESS` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_ACCESS`()
    MODIFIES SQL DATA
BEGIN



CREATE OR REPLACE VIEW `view_readtable_ds_access_all` AS 
select 
    ds.table_name AS `table_name`,
    VIEW_SESSION_GROUPS.group  AS `role`,
    ifnull(`tc`.`read`,0) AS `read`,
    ifnull(`tc`.`write`,0) AS `write`,
    ifnull(`tc`.`append`,0) AS `append`,
    ifnull(`tc`.`delete`,0) AS `delete` 
from 
VIEW_SESSION_GROUPS
join ds
left join ds_access tc 
on ds.table_name = tc.table_name
and VIEW_SESSION_GROUPS.group = tc.`role`
;

-- BEGIN DS ds_access
-- NAME: Zugriff


insert into `ds`
                  (`table_name`)
                  values
                  ('ds_access')
                  on duplicate key update `table_name`=values(`table_name`);
update `ds` set 
    `title`='Zugriff',`reorderfield`='',`use_history`='0',`searchfield`='role',
    `displayfield`='role',`sortfield`='role',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',
    `writetable`='',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`cssstyle`='',`read_table`='view_readtable_ds_access_all',`existsreal`='1',`class_name`='Datenstamm',`special_add_panel`='',
    `read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`character_set_name`='' where `table_name`='ds_access';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_access','append')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_access' and `column_name`='append';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_access','delete')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_access' and `column_name`='delete';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_access','existsreal')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_access' and `column_name`='existsreal';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_access','read')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_access' and `column_name`='read';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_access','role')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_access' and `column_name`='role';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_access','table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='ds',`referenced_column_name`='table_name',`is_referenced`='NO',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_access' and `column_name`='table_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_access','write')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_access' and `column_name`='write';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('administration','ds_access')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='0',`append`='0',`existsreal`='1' where `role`='administration' and `table_name`='ds_access';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('_default_','ds_access')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_access';

insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_access','append','DE','Anlegen','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='checkbox',`position`='3',`hidden`='0',`active`='1' where `table_name`='ds_access' and `column_name`='append' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_access','delete','DE','Löschen','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='checkbox',`position`='4',`hidden`='0',`active`='1' where `table_name`='ds_access' and `column_name`='delete' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_access','read','DE','Lesen','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='checkbox',`position`='1',`hidden`='0',`active`='1' where `table_name`='ds_access' and `column_name`='read' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_access','role','DE','Gruppe','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1' where `table_name`='ds_access' and `column_name`='role' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_access','table_name','DE','Tabelle','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='5',`hidden`='1',`active`='1' where `table_name`='ds_access' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_access','write','DE','Ändern','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='checkbox',`position`='2',`hidden`='0',`active`='1' where `table_name`='ds_access' and `column_name`='write' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_access','append','DE','Anhängen')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='4',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_access' and `column_name`='append' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_access','delete','DE','Löschen')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='5',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_access' and `column_name`='delete' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_access','read','DE','Lesen')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='2',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_access' and `column_name`='read' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_access','role','DE','Gruppe')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='1',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_access' and `column_name`='role' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_access','table_name','DE','Tabelle')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_access' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_access','write','DE','Ändern')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='3',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_access' and `column_name`='write' and `language`='DE';
insert into `ds_reference_tables`
                  (`table_name`,`reference_table_name`)
                  values
                  ('ds_access','ds')
                  on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_access__table_name\":\"ds__table_name\"}',`active`='1',`constraint_name`='fk_ds_access_ds',`searchable`='0',`autosync`='1' where `table_name`='ds_access' and `reference_table_name`='ds';
-- END DS ds_access




END //

-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_addcommands.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_ACCESS` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_ACCESS`()
    MODIFIES SQL DATA
BEGIN

-- BEGIN DS ds_addcommands
-- NAME: erw. Schaltflächen

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_addcommands')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='erw. Schaltflächen',`reorderfield`='position',`use_history`='0',`searchfield`='table_name',`displayfield`='table_name',`sortfield`='position',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`syncable`='0',`cssstyle`='',`read_table`='',`existsreal`='1',`class_name`='Datenstamm',`special_add_panel`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`allowForm`='0',`alternativeformxtype`='',`character_set_name`='',`default_pagesize`='100',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_addcommands';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_addcommands','label')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`is_primary`='0',`syncable`='0',`update_value`='',`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='\'\'' where `table_name`='ds_addcommands' and `column_name`='label';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_addcommands','location')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='toolbar',`default_max_value`='0',`default_min_value`='0',`is_primary`='0',`syncable`='0',`update_value`='',`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='MUL',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='\'\'' where `table_name`='ds_addcommands' and `column_name`='location';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_addcommands','position')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='1',`default_max_value`='0',`default_min_value`='0',`is_primary`='0',`syncable`='0',`update_value`='',`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='int',`column_key`='',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_addcommands' and `column_name`='position';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_addcommands','table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`is_primary`='1',`syncable`='0',`update_value`='',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_addcommands' and `column_name`='table_name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_addcommands','xtype')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`is_primary`='1',`syncable`='0',`update_value`='',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_addcommands' and `column_name`='xtype';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_addcommands')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='1',`delete`='1',`append`='1',`existsreal`='0' where `role`='administration' and `table_name`='ds_addcommands';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_addcommands')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='ds_addcommands';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_addcommands','label','DE','Text','Allgemein/Angaben')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='2',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_addcommands' and `column_name`='label' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_addcommands','location','DE','Position','Allgemein/Angaben')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='combobox_ds_addcommand_locations_id',`position`='4',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_addcommands' and `column_name`='location' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_addcommands','position','DE','Reihenfolge','Allgemein/Satz')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='1',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_addcommands' and `column_name`='position' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_addcommands','table_name','DE','Tabelle','Allgemein/Satz')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_addcommands' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_addcommands','xtype','DE','X-Type','Allgemein/Angaben')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='combobox_ds_addcommands_xtypes_id',`position`='3',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_addcommands' and `column_name`='xtype' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_addcommands','label','DE','Text')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='2',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='',`align`='',`grouped`='0',`listfiltertype`='' where `table_name`='ds_addcommands' and `column_name`='label' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_addcommands','location','DE','Position')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='1',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='',`align`='',`grouped`='0',`listfiltertype`='' where `table_name`='ds_addcommands' and `column_name`='location' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_addcommands','position','DE','Reihenfolge')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='',`align`='',`grouped`='0',`listfiltertype`='' where `table_name`='ds_addcommands' and `column_name`='position' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_addcommands','table_name','DE','table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='4',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='',`align`='',`grouped`='0',`listfiltertype`='' where `table_name`='ds_addcommands' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_addcommands','xtype','DE','X-Type')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='3',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='',`align`='',`grouped`='0',`listfiltertype`='' where `table_name`='ds_addcommands' and `column_name`='xtype' and `language`='DE';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_addcommands','ds')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_addcommands__table_name\":\"ds__table_name\"}',`active`='1',`constraint_name`='fk_ds_ds_addcommands',`searchable`='0',`autosync`='1',`position`='99999',`path`='' where `table_name`='ds_addcommands' and `reference_table_name`='ds';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_addcommands','ds_addcommand_locations')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_addcommands__location\":\"ds_addcommand_locations__id\"}',`active`='0',`constraint_name`='fk_ds_addcommand_locations',`searchable`='0',`autosync`='1',`position`='99999',`path`='' where `table_name`='ds_addcommands' and `reference_table_name`='ds_addcommand_locations';
-- END DS ds_addcommands




-- BEGIN DS ds_addcommands_xtypes
-- NAME: SchaltflÃ¤chen-Typen

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_addcommands_xtypes')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='SchaltflÃ¤chen-Typen',`reorderfield`='',`use_history`='0',`searchfield`='id',`displayfield`='id',`sortfield`='id',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`syncable`='0',`cssstyle`='',`read_table`='',`existsreal`='1',`class_name`='Datenstamm',`special_add_panel`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`allowForm`='0',`alternativeformxtype`='',`character_set_name`='',`default_pagesize`='100',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_addcommands_xtypes';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_addcommands_xtypes','id')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`is_primary`='1',`syncable`='0',`update_value`='',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_addcommands_xtypes' and `column_name`='id';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_addcommands_xtypes','name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`is_primary`='0',`syncable`='0',`update_value`='',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_addcommands_xtypes' and `column_name`='name';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_addcommands_xtypes')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='1',`delete`='1',`append`='1',`existsreal`='0' where `role`='administration' and `table_name`='ds_addcommands_xtypes';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_addcommands_xtypes')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='ds_addcommands_xtypes';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_addcommands_xtypes','id','DE','id','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_addcommands_xtypes' and `column_name`='id' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_addcommands_xtypes','id','DE','ID')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='0',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='',`align`='',`grouped`='0',`listfiltertype`='' where `table_name`='ds_addcommands_xtypes' and `column_name`='id' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_addcommands_xtypes','name','DE','Name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='',`align`='',`grouped`='0',`listfiltertype`='' where `table_name`='ds_addcommands_xtypes' and `column_name`='name' and `language`='DE';
insert into `ds_dropdownfields`
                    (`table_name`,`name`)
                    values
                    ('ds_addcommands_xtypes','id')
                    on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='id',`displayfield`='name',`filterconfig`='' where `table_name`='ds_addcommands_xtypes' and `name`='id';
-- END DS ds_addcommands_xtypes


END //
-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_addidtional_columns.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_ADDITIONAL_COLUMNS` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_ADDITIONAL_COLUMNS`()
    MODIFIES SQL DATA
BEGIN
alter table ds_additional_columns modify error_message varchar(255) default '';
alter table ds_additional_columns modify checked tinyint default 0;

insert into `ds`
                  (`table_name`)
                  values
                  ('ds_additional_columns')
                  on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Zusätzliche Spalten',`reorderfield`='',`use_history`='0',`searchfield`='column_name',`displayfield`='column_name',`sortfield`='column_name',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`cssstyle`='',`read_table`='',`existsreal`='1',`class_name`='Datenstamm',`special_add_panel`='',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='null',`combined`='0',`default_pagesize`='100',`allowForm`='1',`character_set_name`='' where `table_name`='ds_additional_columns';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_additional_columns','checked')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_additional_columns' and `column_name`='checked';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_additional_columns','column_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_additional_columns' and `column_name`='column_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_additional_columns','error_message')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_additional_columns' and `column_name`='error_message';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_additional_columns','sql_command')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='text',`column_key`='',`column_type`='text',`character_maximum_length`='65535',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_additional_columns' and `column_name`='sql_command';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_additional_columns','table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_additional_columns' and `column_name`='table_name';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('administration','ds_additional_columns')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='1',`append`='1',`existsreal`='1' where `role`='administration' and `table_name`='ds_additional_columns';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('_default_','ds_additional_columns')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_additional_columns';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_additional_columns','checked','DE','Checked','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='4',`hidden`='0',`active`='1' where `table_name`='ds_additional_columns' and `column_name`='checked' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_additional_columns','column_name','DE','Spalte','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textarea',`position`='1',`hidden`='0',`active`='1' where `table_name`='ds_additional_columns' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_additional_columns','error_message','DE','Fehler-Nachricht','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='3',`hidden`='0',`active`='1' where `table_name`='ds_additional_columns' and `column_name`='error_message' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_additional_columns','sql_command','DE','SQL','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textarea',`position`='2',`hidden`='0',`active`='1' where `table_name`='ds_additional_columns' and `column_name`='sql_command' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_additional_columns','table_name','DE','Tabelle','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1' where `table_name`='ds_additional_columns' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_additional_columns','checked','DE','geprüft')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='4',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_additional_columns' and `column_name`='checked' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_additional_columns','column_name','DE','Spalte')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='1',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_additional_columns' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_additional_columns','error_message','DE','Fehler-Nachricht')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='2',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_additional_columns' and `column_name`='error_message' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_additional_columns','sql_command','DE','SQL')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='3',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_additional_columns' and `column_name`='sql_command' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_additional_columns','table_name','DE','Tabelle')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_additional_columns' and `column_name`='table_name' and `language`='DE';
insert into `ds_reference_tables`
                  (`table_name`,`reference_table_name`)
                  values
                  ('ds_additional_columns','ds')
                  on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_additional_columns__table_name\":\"ds__table_name\"}',`active`='1',`constraint_name`='fk_ds_additional_columns_ds',`searchable`='0',`autosync`='1' where `table_name`='ds_additional_columns' and `reference_table_name`='ds';
-- END DS ds_additional_columns


END //


CALL UPDATE_DS_SETUP_DS_ADDITIONAL_COLUMNS() //


-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_class.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_CLASS` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_CLASS`()
    MODIFIES SQL DATA
BEGIN
-- BEGIN DS ds_class
-- NAME: DS Klasse

insert into `ds`
                  (`table_name`)
                  values
                  ('ds_class')
                  on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='DS Klasse',`reorderfield`='',`use_history`='0',`searchfield`='class_name',`displayfield`='class_name',`sortfield`='',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='rowmodel',`sync_view`='',`syncable`='0',`cssstyle`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`existsreal`='1',`special_add_panel`='',`character_set_name`='',`read_table`='',`class_name`='Datenstamm',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_class';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_class','class_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='',`deferedload`='0',`existsreal`='1',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`writeable`='1' where `table_name`='ds_class' and `column_name`='class_name';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('administration','ds_class')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='1',`append`='1',`existsreal`='1' where `role`='administration' and `table_name`='ds_class';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('_default_','ds_class')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_class';

insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_class','class_name','DE','class_name','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_class' and `column_name`='class_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_class','class_name','DE','Name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0',`filterstore`='' where `table_name`='ds_class' and `column_name`='class_name' and `language`='DE';
insert into `ds_dropdownfields`
                  (`table_name`,`name`)
                  values
                  ('ds_class','class_name')
                  on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='class_name',`displayfield`='class_name',`filterconfig`='' where `table_name`='ds_class' and `name`='class_name';
insert into `ds_dropdownfields`
                  (`table_name`,`name`)
                  values
                  ('ds_class','class_name')
                  on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='class_name',`displayfield`='class_name',`filterconfig`='' where `table_name`='ds_class' and `name`='class_name';
-- END DS ds_class




-- call UPDATE_DS_SETUP( );
END //
-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_column.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_COLUMN` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_COLUMN`()
    MODIFIES SQL DATA
BEGIN


create or replace view view_readtable_ds_column as
select * from ds_column;

insert into `ds`
                  (`table_name`)
                  values
                  ('ds_column')
                  on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Spalten',`reorderfield`='',
`use_history`='0',`searchfield`='column_name',`displayfield`='column_name',`sortfield`='',
`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',
`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`syncable`='0',
`cssstyle`='',
`read_table`='view_readtable_ds_column',`class_name`='Datenstamm',`special_add_panel`='',
`existsreal`='1',`character_set_name`='',`read_filter`='',`listxtypeprefix`='listview',
`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0' where `table_name`='ds_column';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','character_maximum_length')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='',`data_type`='bigint',`column_key`='',`column_type`='bigint(20)',`character_maximum_length`='0',`numeric_precision`='19',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='character_maximum_length';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','character_set_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='character_set_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','column_key')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='column_key';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','column_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(100)',`character_maximum_length`='100',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='column_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','column_type')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='column_type';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','data_type')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='data_type';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','default_max_value')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='10000000',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='NO',`data_type`='bigint',`column_key`='',`column_type`='bigint(20)',`character_maximum_length`='0',`numeric_precision`='19',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='default_max_value';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','default_min_value')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='NO',`data_type`='bigint',`column_key`='',`column_type`='bigint(20)',`character_maximum_length`='0',`numeric_precision`='19',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='default_min_value';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','default_value')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='default_value';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','deferedload')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='deferedload';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','existsreal')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='existsreal';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','is_nullable')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='NO',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(20)',`character_maximum_length`='20',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='is_nullable';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','is_primary')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='NO',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='is_primary';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','is_referenced')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(20)',`character_maximum_length`='20',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='is_referenced';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','numeric_precision')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='',`data_type`='int',`column_key`='',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='numeric_precision';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','numeric_scale')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='',`data_type`='int',`column_key`='',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='numeric_scale';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','privileges')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='privileges';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','referenced_column_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(50)',`character_maximum_length`='50',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='referenced_column_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','referenced_table')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(50)',`character_maximum_length`='50',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='referenced_table';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','syncable')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='NO',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='syncable';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='table_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column','update_value')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column' and `column_name`='update_value';

insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('administration','ds_column')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='0',`append`='0',`existsreal`='1' where `role`='administration' and `table_name`='ds_column';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('_default_','ds_column')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_column';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column','column_name','DE','Spalte','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_column' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column','default_max_value','DE','Max','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_column' and `column_name`='default_max_value' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column','default_min_value','DE','Min','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_column' and `column_name`='default_min_value' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column','default_value','DE','Standard','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_column' and `column_name`='default_value' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column','is_nullable','DE','Null-Wert','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_column' and `column_name`='is_nullable' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column','is_primary','DE','Primärschlüssel','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_column' and `column_name`='is_primary' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column','is_referenced','DE','referenziert','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_column' and `column_name`='is_referenced' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column','referenced_column_name','DE','referenzierte Spalte','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='',`position`='999',`hidden`='1',`active`='1' where `table_name`='ds_column' and `column_name`='referenced_column_name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column','referenced_table','DE','referenzierte Tabelle','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='',`position`='999',`hidden`='1',`active`='1' where `table_name`='ds_column' and `column_name`='referenced_table' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column','syncable','DE','synchronisierbar','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_column' and `column_name`='syncable' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column','table_name','DE','Tabelle','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_column' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column','update_value','DE','Änderungswert','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_column' and `column_name`='update_value' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','character_maximum_length','DE','character_maximum_length')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='13',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='0',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='character_maximum_length' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','character_set_name','DE','character_set_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='14',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='0',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='character_set_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','column_key','DE','column_key')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='15',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='0',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='column_key' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','column_name','DE','Spalte')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='1',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','column_type','DE','column_type')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='16',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='0',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='column_type' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','data_type','DE','data_type')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='17',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='0',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='data_type' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','default_max_value','DE','Max')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='numbercolumn',`editor`='numberfield',`position`='5',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='default_max_value' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','default_min_value','DE','Min')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='numbercolumn',`editor`='numberfield',`position`='4',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='default_min_value' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','default_value','DE','Standard')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='2',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='default_value' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','deferedload','DE','verzögert Laden')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='7',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='deferedload' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','existsreal','DE','existsreal')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='18',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='0',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='existsreal' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','is_nullable','DE','Null-Wert')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='7',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='is_nullable' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','is_primary','DE','Primärschlüssel')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='8',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='is_primary' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','is_referenced','DE','referenziert')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='9',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='is_referenced' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','numeric_precision','DE','numeric_precision')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='19',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='0',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='numeric_precision' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','numeric_scale','DE','numeric_scale')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='20',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='0',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='numeric_scale' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','privileges','DE','privileges')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='21',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='0',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='privileges' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','referenced_column_name','DE','referenzierte Spalte')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='10',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='referenced_column_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','referenced_table','DE','referenzierte Tabelle')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='11',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='referenced_table' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','syncable','DE','synchronisierbar')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='6',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='syncable' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','table_name','DE','Tabelle')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column','update_value','DE','Änderungswert')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='3',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column' and `column_name`='update_value' and `language`='DE';

insert into `ds_nm_tables`
                  (`table_name`,`referenced_table_name`,`constraint_name`,`referenced_constraint_name`,`intermedia_table_name`,`language`,`label`)
                  values
                  ('ds_column','ds','fk_ds_column_ds_searchfields','fk_ds_ds_searchfields','ds_searchfields','DE','')
                  on duplicate key update `table_name`=values(`table_name`),`referenced_table_name`=values(`referenced_table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`intermedia_table_name`=values(`intermedia_table_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_searchfields__column_name\":\"ds_column__column_name\"}',`referenced_table_json`='{\"ds_searchfields__table_name\":\"ds__table_name\"}' where `table_name`='ds_column' and `constraint_name`='fk_ds_column_ds_searchfields' and `referenced_constraint_name`='fk_ds_ds_searchfields';
insert into `ds_nm_tables`
                  (`table_name`,`referenced_table_name`,`constraint_name`,`referenced_constraint_name`,`intermedia_table_name`,`language`,`label`)
                  values
                  ('ds_column','ds','fk_ds_column_form_label_ds_column','fk_ds_column_form_label_ds','ds_column_form_label','DE','')
                  on duplicate key update `table_name`=values(`table_name`),`referenced_table_name`=values(`referenced_table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`intermedia_table_name`=values(`intermedia_table_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_column_form_label__column_name\":\"ds_column__column_name\"}',`referenced_table_json`='{\"ds_column_form_label__table_name\":\"ds__table_name\"}' where `table_name`='ds_column' and `constraint_name`='fk_ds_column_form_label_ds_column' and `referenced_constraint_name`='fk_ds_column_form_label_ds';
insert into `ds_nm_tables`
                  (`table_name`,`referenced_table_name`,`constraint_name`,`referenced_constraint_name`,`intermedia_table_name`,`language`,`label`)
                  values
                  ('ds_column','ds','fk_ds_column_list_label_ds_column','fk_ds_column_list_label_ds','ds_column_list_label','DE','')
                  on duplicate key update `table_name`=values(`table_name`),`referenced_table_name`=values(`referenced_table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`intermedia_table_name`=values(`intermedia_table_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_column_list_label__column_name\":\"ds_column__column_name\"}',`referenced_table_json`='{\"ds_column_list_label__table_name\":\"ds__table_name\"}' where `table_name`='ds_column' and `constraint_name`='fk_ds_column_list_label_ds_column' and `referenced_constraint_name`='fk_ds_column_list_label_ds';
insert into `ds_nm_tables`
                  (`table_name`,`referenced_table_name`,`constraint_name`,`referenced_constraint_name`,`intermedia_table_name`,`language`,`label`)
                  values
                  ('ds_column','ds','fk_ds_preview_form_label_ds_column','fk_ds_preview_form_label_ds','ds_preview_form_label','DE','')
                  on duplicate key update `table_name`=values(`table_name`),`referenced_table_name`=values(`referenced_table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`intermedia_table_name`=values(`intermedia_table_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_preview_form_label__column_name\":\"ds_column__column_name\"}',`referenced_table_json`='{\"ds_preview_form_label__table_name\":\"ds__table_name\"}' where `table_name`='ds_column' and `constraint_name`='fk_ds_preview_form_label_ds_column' and `referenced_constraint_name`='fk_ds_preview_form_label_ds';
insert into `ds_reference_tables`
                  (`table_name`,`reference_table_name`)
                  values
                  ('ds_column','ds')
                  on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_column__table_name\":\"ds__table_name\"}',`constraint_name`='fk_ds_column_ds',`active`='1',`searchable`='0',`autosync`='1' where `table_name`='ds_column' and `reference_table_name`='ds';
-- END DS ds_column


-- call UPDATE_DS_SETUP( );
END //
-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_column_form_label.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_COLUMN_FORM_LABEL` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_COLUMN_FORM_LABEL`()
    MODIFIES SQL DATA
BEGIN




CREATE OR REPLACE VIEW `view_readtable_ds_column_form_label` AS 
select 

ifnull(`ds_column_form_label`.`table_name`,`ic`.`table_name`) AS `table_name`,
ifnull(`ds_column_form_label`.`column_name`,`ic`.`column_name`) AS `column_name`,
ifnull(`ds_column_form_label`.`language`,'DE') AS `language`,
ifnull(`ds_column_form_label`.`label`,`ic`.`column_name`) AS `label`,
ifnull(`ds_column_form_label`.`xtype`,'displayfield') AS `xtype`,
ifnull(`ds_column_form_label`.`field_path`,'Allgemein') AS `field_path`,
ifnull(`ds_column_form_label`.`position`,999) AS `position`,
ifnull(`ds_column_form_label`.`hidden`,1) AS `hidden`,
ifnull(`ds_column_form_label`.`active`,0) AS `active`,
ifnull(`ds_column_form_label`.`allowempty`,0) AS `allowempty`

from (
    `ds_column` `ic` 
    left join `ds_column_form_label` 
    on (`ds_column_form_label`.`table_name` = `ic`.`table_name` and `ds_column_form_label`.`column_name` = `ic`.`column_name`)
);


-- BEGIN DS ds_column_form_label
-- NAME: Formular

insert into `ds`
                  (`table_name`)
                  values
                  ('ds_column_form_label')
                  on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Formular',`reorderfield`='position',`use_history`='0',`searchfield`='column_name',`displayfield`='column_name',`sortfield`='position',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`syncable`='0',`cssstyle`='',
`read_table`='view_readtable_ds_column_form_label',`class_name`='Datenstamm',`special_add_panel`='',`existsreal`='1',`character_set_name`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0' where `table_name`='ds_column_form_label';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_form_label','active')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='1',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='NO',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_form_label' and `column_name`='active';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_form_label','column_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='ds_column',`referenced_column_name`='column_name',`is_nullable`='NO',`is_referenced`='NO',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(100)',`character_maximum_length`='100',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_form_label' and `column_name`='column_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_form_label','field_path')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='Allgemein',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_form_label' and `column_name`='field_path';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_form_label','hidden')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='NO',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' 

where `table_name`='ds_column_form_label' and `column_name`='hidden';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_form_label','label')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='{column_name}',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_form_label' and `column_name`='label';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_form_label','language')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='DE',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(3)',`character_maximum_length`='3',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_form_label' and `column_name`='language';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_form_label','position')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='NO',`data_type`='int',`column_key`='',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_form_label' and `column_name`='position';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_form_label','table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='ds_column',`referenced_column_name`='table_name',`is_nullable`='NO',`is_referenced`='NO',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_form_label' and `column_name`='table_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_form_label','xtype')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='displayfield',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_form_label' and `column_name`='xtype';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('administration','ds_column_form_label')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='0',`append`='0',`existsreal`='1' where `role`='administration' and `table_name`='ds_column_form_label';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('_default_','ds_column_form_label')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_column_form_label';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_form_label','active','DE','Aktiv','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='checkbox',`position`='7',`hidden`='0',`active`='1' where `table_name`='ds_column_form_label' and `column_name`='active' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_form_label','column_name','DE','Spalte','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='1',`hidden`='0',`active`='1' where `table_name`='ds_column_form_label' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_form_label','field_path','DE','Pfad','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='2',`hidden`='0',`active`='1' where `table_name`='ds_column_form_label' and `column_name`='field_path' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_form_label','hidden','DE','ausgeblendet','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='checkbox',`position`='8',`hidden`='0',`active`='1' where `table_name`='ds_column_form_label' and `column_name`='hidden' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_form_label','label','DE','Label','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='3',`hidden`='0',`active`='1' where `table_name`='ds_column_form_label' and `column_name`='label' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_form_label','language','DE','Sprache','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='5',`hidden`='1',`active`='1' where `table_name`='ds_column_form_label' and `column_name`='language' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_form_label','position','DE','Position','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='6',`hidden`='1',`active`='1' where `table_name`='ds_column_form_label' and `column_name`='position' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_form_label','table_name','DE','Tabelle','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='1',`active`='1' where `table_name`='ds_column_form_label' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_form_label','xtype','DE','Typ','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='formxtype_combobox',`position`='4',`hidden`='0',`active`='1' where `table_name`='ds_column_form_label' and `column_name`='xtype' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_form_label','active','DE','Aktiv')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='7',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_form_label' and `column_name`='active' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_form_label','column_name','DE','Spalte')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='1',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_form_label' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_form_label','field_path','DE','Pfad')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='2',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_form_label' and `column_name`='field_path' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_form_label','hidden','DE','ausgeblendet')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='8',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_form_label' and `column_name`='hidden' and `language`='DE';

insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_form_label','label','DE','Label')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='3',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_form_label' and `column_name`='label' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_form_label','language','DE','Sparche')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='5',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_form_label' and `column_name`='language' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_form_label','position','DE','Position')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='6',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_form_label' and `column_name`='position' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_form_label','table_name','DE','Tabelle')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_form_label' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_form_label','xtype','DE','Type')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='formxtype_combobox',`position`='4',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_form_label' and `column_name`='xtype' and `language`='DE';
insert into `ds_reference_tables`
                  (`table_name`,`reference_table_name`)
                  values
                  ('ds_column_form_label','ds')
                  on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_column_form_label__table_name\":\"ds__table_name\"}',`constraint_name`='fk_ds_column_form_label_ds',`active`='1',`searchable`='0',`autosync`='1' where `table_name`='ds_column_form_label' and `reference_table_name`='ds';
insert into `ds_reference_tables`
                  (`table_name`,`reference_table_name`)
                  values
                  ('ds_column_form_label','ds_column')
                  on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_column_form_label__table_name\":\"ds_column__table_name\",\"ds_column_form_label__column_name\":\"ds_column__column_name\"}',`constraint_name`='fk_ds_column_form_label_ds_column',`active`='0',`searchable`='0',`autosync`='1' where `table_name`='ds_column_form_label' and `reference_table_name`='ds_column';


insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_form_label','allowempty','DE','Leer erlaubt')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='8',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_form_label' and `column_name`='allowempty' and `language`='DE';


-- END DS ds_column_form_label




-- call UPDATE_DS_SETUP( );
END //
-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_column_form_properties.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_COLUMN_FORM_PROPERTIES` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_COLUMN_FORM_PROPERTIES`()
    MODIFIES SQL DATA
BEGIN

CREATE TABLE IF NOT EXISTS `ds_form_properties`(
    `property`  varchar(32) ,
    `value_xtype` varchar(100),
    primary key (`property`)
);


CREATE TABLE IF NOT EXISTS `ds_column_form_properties` (
    `table_name` varchar(128) NOT NULL DEFAULT '',
    `column_name` varchar(100) NOT NULL DEFAULT '',
    `property` varchar(32) NOT NULL,
    `value` varchar(255) NOT NULL,
    PRIMARY KEY (`table_name`,`column_name`,`property`),

    CONSTRAINT `fk_ds_column_form_properties_form` FOREIGN KEY (`table_name`,`column_name`) REFERENCES `ds_column_form_label` (`table_name`,`column_name`) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT `fk_ds_column_form_properties_property` FOREIGN KEY (`property`) REFERENCES `ds_form_properties` (`property`) ON DELETE CASCADE ON UPDATE CASCADE
);
call UPDATE_DS_SETUP( );


-- BEGIN DS ds_form_properties
-- NAME: Formular-Attribute

insert into `ds`
                  (`table_name`)
                  values
                  ('ds_form_properties')
                  on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Formular-Attribute',`reorderfield`='',`use_history`='0',`searchfield`='property',`displayfield`='property',`sortfield`='property',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`read_table`='',`cssstyle`='',`class_name`='Datenstamm',`special_add_panel`='',`existsreal`='1',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`combined`='0',`phpexporterfilename`='',`default_pagesize`='100',`allowform`='1',`character_set_name`='',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_form_properties';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_form_properties','property')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(32)',`character_maximum_length`='32',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_form_properties' and `column_name`='property';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_form_properties','value_xtype')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(100)',`character_maximum_length`='100',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_form_properties' and `column_name`='value_xtype';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('administration','ds_form_properties')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='1',`append`='1',`existsreal`='0' where `role`='administration' and `table_name`='ds_form_properties';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('_default_','ds_form_properties')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='ds_form_properties';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_form_properties','property','DE','Eigenschaft','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_form_properties' and `column_name`='property' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_form_properties','value_xtype','DE','X-Typ','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='formxtype_combobox',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_form_properties' and `column_name`='value_xtype' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_form_properties','property','DE','Eigenschaft')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_form_properties' and `column_name`='property' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_form_properties','value_xtype','DE','X-Typ')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_form_properties' and `column_name`='value_xtype' and `language`='DE';
insert into `ds_dropdownfields`
                  (`table_name`,`name`)
                  values
                  ('ds_form_properties','property')
                  on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='property',`displayfield`='property',`filterconfig`='' where `table_name`='ds_form_properties' and `name`='property';
insert into `ds_dropdownfields`
                  (`table_name`,`name`)
                  values
                  ('ds_form_properties','property')
                  on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='property',`displayfield`='property',`filterconfig`='' where `table_name`='ds_form_properties' and `name`='property';
insert into `ds_nm_tables`
                  (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                  values
                  ('ds_form_properties','fk_ds_column_form_properties_property','fk_ds_column_form_properties_form','DE','')
                  on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds_column_form_label',`intermedia_table_name`='ds_column_form_properties',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_column_form_properties__property\":\"ds_form_properties__property\",\"ds_column_form_properties__property\":\"ds_form_properties__property\"}',`referenced_table_json`='{\"ds_column_form_properties__column_name\":\"ds_column_form_label__column_name\",\"ds_column_form_properties__table_name\":\"ds_column_form_label__table_name\"}' where `table_name`='ds_form_properties' and `constraint_name`='fk_ds_column_form_properties_property' and `referenced_constraint_name`='fk_ds_column_form_properties_form';
-- END DS ds_form_properties




-- BEGIN DS ds_column_form_properties
-- NAME: Erweiterte Eigenschaften

insert into `ds`
                  (`table_name`)
                  values
                  ('ds_column_form_properties')
                  on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Erweiterte Eigenschaften',`reorderfield`='',`use_history`='0',`searchfield`='property',`displayfield`='property',`sortfield`='property',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`read_table`='',`cssstyle`='',`class_name`='Datenstamm',`special_add_panel`='',`existsreal`='1',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`combined`='0',`phpexporterfilename`='',`default_pagesize`='100',`allowform`='1',`character_set_name`='',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_column_form_properties';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_form_properties','column_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(100)',`character_maximum_length`='100',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_column_form_properties' and `column_name`='column_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_form_properties','property')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(32)',`character_maximum_length`='32',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_column_form_properties' and `column_name`='property';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_form_properties','table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_column_form_properties' and `column_name`='table_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_form_properties','value')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_column_form_properties' and `column_name`='value';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('administration','ds_column_form_properties')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='1',`append`='1',`existsreal`='0' where `role`='administration' and `table_name`='ds_column_form_properties';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('_default_','ds_column_form_properties')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='ds_column_form_properties';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_form_properties','column_name','DE','Spalte','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='1',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_column_form_properties' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_form_properties','property','DE','Eigenschaft','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='combobox_ds_form_properties_property',`position`='2',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_column_form_properties' and `column_name`='property' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_form_properties','table_name','DE','Tabelle','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_column_form_properties' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_form_properties','value','DE','Wert','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='3',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_column_form_properties' and `column_name`='value' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_form_properties','column_name','DE','Spalte')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='1',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_form_properties' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_form_properties','property','DE','Eigenschaft')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='2',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_form_properties' and `column_name`='property' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_form_properties','table_name','DE','Tabelle')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_form_properties' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_form_properties','value','DE','Wert')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='3',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_form_properties' and `column_name`='value' and `language`='DE';
insert into `ds_reference_tables`
                  (`table_name`,`reference_table_name`)
                  values
                  ('ds_column_form_properties','ds_column_form_label')
                  on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_column_form_properties__column_name\":\"ds_column_form_label__column_name\",\"ds_column_form_properties__table_name\":\"ds_column_form_label__table_name\"}',`constraint_name`='fk_ds_column_form_properties_form',`active`='0',`searchable`='0',`autosync`='1' where `table_name`='ds_column_form_properties' and `reference_table_name`='ds_column_form_label';
insert into `ds_reference_tables`
                  (`table_name`,`reference_table_name`)
                  values
                  ('ds_column_form_properties','ds_form_properties')
                  on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_column_form_properties__property\":\"ds_form_properties__property\"}',`constraint_name`='fk_ds_column_form_properties_property',`active`='0',`searchable`='0',`autosync`='1' where `table_name`='ds_column_form_properties' and `reference_table_name`='ds_form_properties';
-- END DS ds_column_form_properties





END //

-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_column_list_export.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_COLUMN_LIST_EXPORT` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_COLUMN_LIST_EXPORT`()
    MODIFIES SQL DATA
BEGIN


-- BEGIN DS ds_column_list_export
-- NAME: Export-Liste

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_column_list_export')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Export-Liste',`reorderfield`='position',`use_history`='0',`searchfield`='column_name',`displayfield`='column_name',`sortfield`='position',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`syncable`='0',`cssstyle`='',`read_table`='view_readtable_ds_column_list_export',`existsreal`='1',`class_name`='Datenstamm',`special_add_panel`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`allowForm`='0',`alternativeformxtype`='',`character_set_name`='',`default_pagesize`='100',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_column_list_export';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_column_list_export','active')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='1',`default_max_value`='0',`default_min_value`='0',`is_primary`='0' ,`syncable`='0',`update_value`='',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='tinyint',`column_key`='',`column_type`='int(4)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_column_list_export' and `column_name`='active';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_column_list_export','column_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`is_primary`='1' ,`syncable`='0',`update_value`='',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='ds_column',`referenced_column_name`='column_name',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(100)',`character_maximum_length`='100',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_column_list_export' and `column_name`='column_name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_column_list_export','label')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`is_primary`='0' ,`syncable`='0',`update_value`='',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_column_list_export' and `column_name`='label';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_column_list_export','language')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='DE',`default_max_value`='0',`default_min_value`='0',`is_primary`='1' ,`syncable`='0',`update_value`='',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(3)',`character_maximum_length`='3',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_column_list_export' and `column_name`='language';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_column_list_export','position')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='0',`default_min_value`='0',`is_primary`='0' ,`syncable`='0',`update_value`='',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='bigint',`column_key`='',`column_type`='bigint(11)',`character_maximum_length`='0',`numeric_precision`='19',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_column_list_export' and `column_name`='position';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_column_list_export','table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`is_primary`='1' ,`syncable`='0',`update_value`='',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='ds_column',`referenced_column_name`='table_name',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_column_list_export' and `column_name`='table_name';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_column_list_export')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='0',`append`='0',`existsreal`='1' where `role`='administration' and `table_name`='ds_column_list_export';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_column_list_export')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_column_list_export';
insert into `ds_addcommands`
                    (`table_name`,`xtype`)
                    values
                    ('ds_column_list_export','ds_cloneformlabel_export_command')
                    on duplicate key update `table_name`=values(`table_name`),`xtype`=values(`xtype`);
insert into `ds_addcommands`
                    (`table_name`,`xtype`)
                    values
                    ('ds_column_list_export','ds_cloneformlabel_export_command')
                    on duplicate key update `table_name`=values(`table_name`),`xtype`=values(`xtype`);
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_column_list_export','active','DE','Aktiv','Allgemein/Angaben')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='checkbox',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_export' and `column_name`='active' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_column_list_export','column_name','DE','Spalte','Allgemein/Satzinformationen')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='4',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_export' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_column_list_export','label','DE','Label','Allgemein/Angaben')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='1',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_export' and `column_name`='label' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_column_list_export','language','DE','Sprache','Allgemein/Satzinformationen')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='5',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_export' and `column_name`='language' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_column_list_export','position','DE','Position','Allgemein/Angaben')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='number0',`position`='2',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_export' and `column_name`='position' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_column_list_export','table_name','DE','Tabelle','Allgemein/Satzinformationen')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='3',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_export' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_column_list_export','active','DE','Aktiv')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='1',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_list_export' and `column_name`='active' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_column_list_export','column_name','DE','Spalte')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='4',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_list_export' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_column_list_export','label','DE','Label')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='2',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_list_export' and `column_name`='label' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_column_list_export','language','DE','Sprache')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_list_export' and `column_name`='language' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_column_list_export','position','DE','Position')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='5',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_list_export' and `column_name`='position' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_column_list_export','table_name','DE','Tabelle')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='3',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_list_export' and `column_name`='table_name' and `language`='DE';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_column_list_export','ds')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_column_list_export__table_name\":\"ds__table_name\"}',`active`='1',`constraint_name`='fk_ds_column_list_export_ds',`searchable`='0',`autosync`='1' where `table_name`='ds_column_list_export' and `reference_table_name`='ds';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_column_list_export','ds_column')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_column_list_export__column_name\":\"ds_column__column_name\",\"ds_column_list_export__table_name\":\"ds_column__table_name\"}',`active`='0',`constraint_name`='fk_ds_column_list_export_ds_column',`searchable`='0',`autosync`='1' where `table_name`='ds_column_list_export' and `reference_table_name`='ds_column';
-- END DS ds_column_list_export




END //

-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_column_list_label.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_COLUMN_LIST_LABEL` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_COLUMN_LIST_LABEL`()
    MODIFIES SQL DATA
BEGIN

-- BEGIN DS ds_column_list_label
-- NAME: Liste
CREATE OR REPLACE VIEW  `view_readtable_ds_column_list_label_all` AS
 select ifnull(`ds_column_list_label`.`table_name`,`ic`.`table_name`) AS `table_name`,
 ifnull(`ds_column_list_label`.`column_name`,`ic`.`column_name`) AS `column_name`,
 ifnull(`ds_column_list_label`.`language`,'DE') AS `language`,
 ifnull(`ds_column_list_label`.`label`,`ic`.`column_name`) AS `label`,
 ifnull(`ds_column_list_label`.`xtype`,'gridcolumn') AS `xtype`,
 ifnull(`ds_column_list_label`.`editor`,'') AS `editor`,
 ifnull(`ds_column_list_label`.`position`,999) AS `position`,
 ifnull(`ds_column_list_label`.`summaryrenderer`,'') AS `summaryrenderer`,
 ifnull(`ds_column_list_label`.`summarytype`,'') AS `summarytype`,
 ifnull(`ds_column_list_label`.`filterstore`,'') AS `filterstore`,
 ifnull(`ds_column_list_label`.`hidden`,1) AS `hidden` ,
 ifnull(`ds_column_list_label`.`renderer`,'') AS `renderer`,
 ifnull(`ds_column_list_label`.`active`,0)   AS `active`,
 ifnull(`ds_column_list_label`.`grouped`,0)   AS `grouped`,
 ifnull(`ds_column_list_label`.`flex`,1)   AS `flex`,
 ifnull(`ds_column_list_label`.`listfiltertype`,'') `listfiltertype`

 from (`ds_column` `ic` left join `ds_column_list_label`
   on(((`ds_column_list_label`.`table_name` = `ic`.`table_name`)
   and (`ds_column_list_label`.`column_name` = `ic`.`column_name`))));


insert into `ds`
                  (`table_name`)
                  values
                  ('ds_column_list_label')
                  on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Liste',`reorderfield`='position',`use_history`='0',`searchfield`='column_name',`displayfield`='column_name',`sortfield`='position',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`syncable`='0',`cssstyle`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`existsreal`='1',`special_add_panel`='',`character_set_name`='',`read_table`='view_readtable_ds_column_list_label_all',`class_name`='Datenstamm',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_column_list_label';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_list_label','active')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='1',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`deferedload`='0',`existsreal`='1',`data_type`='tinyint',`column_key`='',`column_type`='int(4)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`writeable`='1' where `table_name`='ds_column_list_label' and `column_name`='active';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_list_label','align')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='',`deferedload`='0',`existsreal`='1',`data_type`='varchar',`column_key`='',`column_type`='varchar(8)',`character_maximum_length`='8',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`writeable`='1' where `table_name`='ds_column_list_label' and `column_name`='align';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_list_label','column_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='ds_column',`referenced_column_name`='column_name',`is_nullable`='NO',`is_referenced`='NO',`deferedload`='0',`existsreal`='1',`data_type`='varchar',`column_key`='',`column_type`='varchar(100)',`character_maximum_length`='100',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`writeable`='1' where `table_name`='ds_column_list_label' and `column_name`='column_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_list_label','direction')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='',`deferedload`='0',`existsreal`='1',`data_type`='varchar',`column_key`='',`column_type`='varchar(5)',`character_maximum_length`='5',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`writeable`='1' where `table_name`='ds_column_list_label' and `column_name`='direction';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_list_label','editor')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`deferedload`='0',`existsreal`='1',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`writeable`='1' where `table_name`='ds_column_list_label' and `column_name`='editor';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_list_label','filterstore')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`deferedload`='0',`existsreal`='1',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`writeable`='1' where `table_name`='ds_column_list_label' and `column_name`='filterstore';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_list_label','flex')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='',`deferedload`='0',`existsreal`='1',`data_type`='decimal',`column_key`='',`column_type`='decimal(5,2)',`character_maximum_length`='0',`numeric_precision`='5',`numeric_scale`='2',`character_set_name`='',`privileges`='select,insert,update,references',`writeable`='1' where `table_name`='ds_column_list_label' and `column_name`='flex';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_list_label','grouped')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='NO',`deferedload`='0',`existsreal`='1',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`writeable`='1' where `table_name`='ds_column_list_label' and `column_name`='grouped';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_list_label','hidden')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`deferedload`='0',`existsreal`='1',`data_type`='tinyint',`column_key`='',`column_type`='int(4)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`writeable`='1' where `table_name`='ds_column_list_label' and `column_name`='hidden';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_list_label','label')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`deferedload`='0',`existsreal`='1',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`writeable`='1' where `table_name`='ds_column_list_label' and `column_name`='label';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_list_label','language')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='DE',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`deferedload`='0',`existsreal`='1',`data_type`='varchar',`column_key`='',`column_type`='varchar(3)',`character_maximum_length`='3',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`writeable`='1' where `table_name`='ds_column_list_label' and `column_name`='language';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_list_label','position')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`deferedload`='0',`existsreal`='1',`data_type`='int',`column_key`='',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`writeable`='1' where `table_name`='ds_column_list_label' and `column_name`='position';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_list_label','renderer')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='',`deferedload`='0',`existsreal`='1',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`writeable`='1' where `table_name`='ds_column_list_label' and `column_name`='renderer';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_list_label','summaryrenderer')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`deferedload`='0',`existsreal`='1',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`writeable`='1' where `table_name`='ds_column_list_label' and `column_name`='summaryrenderer';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_list_label','summarytype')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`deferedload`='0',`existsreal`='1',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`writeable`='1' where `table_name`='ds_column_list_label' and `column_name`='summarytype';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_list_label','table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='ds_column',`referenced_column_name`='table_name',`is_nullable`='NO',`is_referenced`='NO',`deferedload`='0',`existsreal`='1',`data_type`='varchar',`column_key`='',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`writeable`='1' where `table_name`='ds_column_list_label' and `column_name`='table_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_list_label','xtype')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='gridcolumn',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`deferedload`='0',`existsreal`='1',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`writeable`='1' where `table_name`='ds_column_list_label' and `column_name`='xtype';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('administration','ds_column_list_label')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='0',`append`='0',`existsreal`='1' where `role`='administration' and `table_name`='ds_column_list_label';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('_default_','ds_column_list_label')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_column_list_label';
insert into `ds_addcommands`
                  (`table_name`,`xtype`)
                  values
                  ('ds_column_list_label','ds_cloneformlabel_command')
                  on duplicate key update `table_name`=values(`table_name`),`xtype`=values(`xtype`);
insert into `ds_addcommands`
                  (`table_name`,`xtype`)
                  values
                  ('ds_column_list_label','ds_cloneformlabel_command')
                  on duplicate key update `table_name`=values(`table_name`),`xtype`=values(`xtype`);
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_list_label','active','DE','active','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='5',`hidden`='1',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_label' and `column_name`='active' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_list_label','column_name','DE','column_name','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='1',`hidden`='1',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_label' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_list_label','editor','DE','editor','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='3',`hidden`='1',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_label' and `column_name`='editor' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_list_label','filterstore','DE','filterstore','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='4',`hidden`='1',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_label' and `column_name`='filterstore' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_list_label','grouped','DE','grouped','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='1',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_label' and `column_name`='grouped' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_list_label','hidden','DE','hidden','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='6',`hidden`='1',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_label' and `column_name`='hidden' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_list_label','label','DE','label','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='2',`hidden`='1',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_label' and `column_name`='label' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_list_label','language','DE','language','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='7',`hidden`='1',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_label' and `column_name`='language' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_list_label','position','DE','position','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='8',`hidden`='1',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_label' and `column_name`='position' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_list_label','summaryrenderer','DE','summaryrenderer','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='9',`hidden`='1',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_label' and `column_name`='summaryrenderer' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_list_label','summarytype','DE','summarytype','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='10',`hidden`='1',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_label' and `column_name`='summarytype' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_list_label','table_name','DE','table_name','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='1',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_label' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_column_list_label','xtype','DE','xtype','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='12',`hidden`='1',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_label' and `column_name`='xtype' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_list_label','active','DE','Aktiv')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='5',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0',`filterstore`='' where `table_name`='ds_column_list_label' and `column_name`='active' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_list_label','column_name','DE','Spalte')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='1',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0',`filterstore`='' where `table_name`='ds_column_list_label' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_list_label','editor','DE','Editor')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='formxtype_combobox',`position`='4',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0',`filterstore`='' where `table_name`='ds_column_list_label' and `column_name`='editor' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_list_label','filterstore','DE','Filter')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='10',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='1',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0',`filterstore`='' where `table_name`='ds_column_list_label' and `column_name`='filterstore' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_list_label','grouped','DE','Gruppieren')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='999',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0',`filterstore`='' where `table_name`='ds_column_list_label' and `column_name`='grouped' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_list_label','hidden','DE','ausgeblendet')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='6',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0',`filterstore`='' where `table_name`='ds_column_list_label' and `column_name`='hidden' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_list_label','label','DE','Label')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='2',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0',`filterstore`='' where `table_name`='ds_column_list_label' and `column_name`='label' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_list_label','language','DE','Sprache')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='8',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='1',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0',`filterstore`='' where `table_name`='ds_column_list_label' and `column_name`='language' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_list_label','position','DE','Position')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='numbercolumn',`editor`='',`position`='9',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='1',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0',`filterstore`='' where `table_name`='ds_column_list_label' and `column_name`='position' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_list_label','renderer','DE','renderer')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='999',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='1',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0',`filterstore`='' where `table_name`='ds_column_list_label' and `column_name`='renderer' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_list_label','summaryrenderer','DE','Sum. Renderer')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='12',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='1',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0',`filterstore`='' where `table_name`='ds_column_list_label' and `column_name`='summaryrenderer' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_list_label','summarytype','DE','Sum. Typ')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='11',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='1',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0',`filterstore`='' where `table_name`='ds_column_list_label' and `column_name`='summarytype' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_list_label','table_name','DE','Tabelle')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='1',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0',`filterstore`='' where `table_name`='ds_column_list_label' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_list_label','xtype','DE','Typ')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='listxtype_combobox',`position`='3',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0',`filterstore`='' where `table_name`='ds_column_list_label' and `column_name`='xtype' and `language`='DE';
insert into `ds_reference_tables`
                  (`table_name`,`reference_table_name`)
                  values
                  ('ds_column_list_label','ds')
                  on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_column_list_label__table_name\":\"ds__table_name\"}',`constraint_name`='fk_ds_column_list_label_ds',`active`='1',`searchable`='0',`autosync`='1' where `table_name`='ds_column_list_label' and `reference_table_name`='ds';
insert into `ds_reference_tables`
                  (`table_name`,`reference_table_name`)
                  values
                  ('ds_column_list_label','ds_column')
                  on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_column_list_label__column_name\":\"ds_column__column_name\",\"ds_column_list_label__table_name\":\"ds_column__table_name\"}',`constraint_name`='fk_ds_column_list_label_ds_column',`active`='0',`searchable`='0',`autosync`='1' where `table_name`='ds_column_list_label' and `reference_table_name`='ds_column';
-- END DS ds_column_list_label




-- call UPDATE_DS_SETUP( );

END //
-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_column_tagfields.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_COLUMN_TAGFIELDS` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_COLUMN_TAGFIELDS`()
    MODIFIES SQL DATA
BEGIN



    create or replace view view_readtable_ds_column_tagfields as
    select
    ds_nm_tables.`table_name`,
    ifnull(ds_column_tagfields.column_name,ds_nm_tables.`intermedia_table_name`) `column_name`,
    'DE' `language`,
    ifnull(ds_column_tagfields.label,ds_nm_tables.`intermedia_table_name`) `label`,
    concat('tagfield_',ds_nm_tables.`referenced_table_name`) `xtype`,
    ifnull(ds_column_tagfields.field_path,'Allgemein') `field_path`,
    ifnull(ds_column_tagfields.position,99) `position`,
    ifnull(ds_column_tagfields.hidden,1) `hidden`,
    ifnull(ds_column_tagfields.active,0) `active`,
    ifnull(ds_column_tagfields.referenced_table_name,ds_nm_tables.referenced_table_name) `referenced_table_name`,
    ifnull(ds_column_tagfields.constraint_name,ds_nm_tables.constraint_name) `constraint_name`,
    ifnull(ds_column_tagfields.referenced_constraint_name,ds_nm_tables.referenced_constraint_name) `referenced_constraint_name`,
    ifnull(ds_column_tagfields.table_name_json,ds_nm_tables.table_name_json) `table_name_json`,
    ifnull(ds_column_tagfields.referenced_table_json,ds_nm_tables.referenced_table_json) `referenced_table_json`
    from
    ds_nm_tables
    left join
    ds_column_tagfields
    on ds_nm_tables.table_name = ds_column_tagfields.table_name
    and ds_nm_tables.intermedia_table_name = ds_column_tagfields.column_name
    ;

-- BEGIN DS ds_column_tagfields
-- NAME: Tags

insert into `ds`
                  (`table_name`)
                  values
                  ('ds_column_tagfields')
                  on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Tags',`reorderfield`='position',`use_history`='0',`searchfield`='column_name',`displayfield`='column_name',`sortfield`='position',`searchany`='0',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='rowmodel',`sync_view`='',`cssstyle`='',`read_table`='view_readtable_ds_column_tagfields',`existsreal`='1',`class_name`='Datenstamm',`special_add_panel`='',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`character_set_name`='' where `table_name`='ds_column_tagfields';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_tagfields','active')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_tagfields' and `column_name`='active';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_tagfields','column_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(32)',`character_maximum_length`='32',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_tagfields' and `column_name`='column_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_tagfields','constraint_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_tagfields' and `column_name`='constraint_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_tagfields','field_path')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_tagfields' and `column_name`='field_path';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_tagfields','hidden')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_tagfields' and `column_name`='hidden';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_tagfields','intermedia_table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(32)',`character_maximum_length`='32',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_tagfields' and `column_name`='intermedia_table_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_tagfields','label')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_tagfields' and `column_name`='label';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_tagfields','language')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(3)',`character_maximum_length`='3',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_tagfields' and `column_name`='language';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_tagfields','position')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='int',`column_key`='',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_tagfields' and `column_name`='position';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_tagfields','referenced_constraint_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_tagfields' and `column_name`='referenced_constraint_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_tagfields','referenced_table_json')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_tagfields' and `column_name`='referenced_table_json';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_tagfields','referenced_table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(32)',`character_maximum_length`='32',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_tagfields' and `column_name`='referenced_table_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_tagfields','table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='MUL',`column_type`='varchar(32)',`character_maximum_length`='32',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_tagfields' and `column_name`='table_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_tagfields','table_name_json')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_tagfields' and `column_name`='table_name_json';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_column_tagfields','xtype')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_tagfields' and `column_name`='xtype';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('administration','ds_column_tagfields')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='1',`append`='1',`existsreal`='1' where `role`='administration' and `table_name`='ds_column_tagfields';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('_default_','ds_column_tagfields')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_column_tagfields';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_tagfields','active','DE','active')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='14',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_column_tagfields' and `column_name`='active' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_tagfields','column_name','DE','column_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_column_tagfields' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_tagfields','field_path','DE','field_path')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='1',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_column_tagfields' and `column_name`='field_path' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_tagfields','hidden','DE','hidden')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='15',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_column_tagfields' and `column_name`='hidden' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_tagfields','intermedia_table_name','DE','intermedia_table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='4',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_column_tagfields' and `column_name`='intermedia_table_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_tagfields','label','DE','label')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='5',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_column_tagfields' and `column_name`='label' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_tagfields','language','DE','language')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='6',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_column_tagfields' and `column_name`='language' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_tagfields','position','DE','position')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='7',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_column_tagfields' and `column_name`='position' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_tagfields','table_name','DE','table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='11',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_column_tagfields' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_column_tagfields','xtype','DE','xtype')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='13',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_column_tagfields' and `column_name`='xtype' and `language`='DE';
insert into `ds_reference_tables`
                  (`table_name`,`reference_table_name`)
                  values
                  ('ds_column_tagfields','ds')
                  on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_column_tagfields__table_name\":\"ds__table_name\"}',`active`='1',`constraint_name`='fk_ds_column_tagfields_ds',`searchable`='0',`autosync`='1' where `table_name`='ds_column_tagfields' and `reference_table_name`='ds';
insert into `ds_reference_tables`
                  (`table_name`,`reference_table_name`)
                  values
                  ('ds_column_tagfields','ds_column')
                  on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_column_tagfields__column_name\":\"ds_column__column_name\",\"ds_column_tagfields__table_name\":\"ds_column__table_name\"}',`active`='0',`constraint_name`='',`searchable`='0',`autosync`='1' where `table_name`='ds_column_tagfields' and `reference_table_name`='ds_column';
-- END DS ds_column_tagfields


-- call UPDATE_DS_SETUP( );
END //
-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_column_types.sql 

DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_COLUMN_RENDERER` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_COLUMN_RENDERER`()
    MODIFIES SQL DATA
BEGIN


-- BEGIN DS ds_column_types
-- NAME: DB ExtJS Spaltentypen

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_column_types')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='DB ExtJS Spaltentypen',`reorderfield`='',`use_history`='0',`searchfield`='column_name',`displayfield`='column_name',`sortfield`='column_name',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`syncable`='0',`cssstyle`='',`alternativeformxtype`='',`read_table`='',`class_name`='Datenstamm',`special_add_panel`='',`existsreal`='1',`character_set_name`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_column_types';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_column_types','column_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(100)',`character_maximum_length`='100',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_types' and `column_name`='column_name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_column_types','default_value')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_types' and `column_name`='default_value';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_column_types','table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_types' and `column_name`='table_name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_column_types','xtype')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_column_types' and `column_name`='xtype';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_column_types')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='1',`delete`='1',`append`='1',`existsreal`='0' where `role`='administration' and `table_name`='ds_column_types';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_column_types')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='ds_column_types';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_column_types','column_name','DE','Spalte','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='1',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_column_types' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_column_types','default_value','DE','Vorgabewert','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='3',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_column_types' and `column_name`='default_value' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_column_types','table_name','DE','Tabelle','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_column_types' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_column_types','xtype','DE','Typ','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='2',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_column_types' and `column_name`='xtype' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_column_types','column_name','DE','Spalte')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='1',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_column_types' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_column_types','default_value','DE','Vorgabewert')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='3',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_column_types' and `column_name`='default_value' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_column_types','table_name','DE','Tabelle')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_column_types' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_column_types','xtype','DE','Typ')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='2',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_column_types' and `column_name`='xtype' and `language`='DE';
-- END DS ds_column_types




END //
-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_combined_tables.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_COMBINED_TABLES` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_COMBINED_TABLES`()
    MODIFIES SQL DATA
BEGIN

-- BEGIN DS ds_combined_tables
-- NAME: DS kombinierte Datenstämme

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_combined_tables')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='DS kombinierte Datenstämme',`reorderfield`='',`use_history`='0',`searchfield`='table_alias',`displayfield`='table_alias',`sortfield`='table_alias',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`syncable`='0',`cssstyle`='',`alternativeformxtype`='',`read_table`='',`class_name`='Datenstamm',`special_add_panel`='',`existsreal`='1',`character_set_name`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_combined_tables';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_combined_tables','table_alias')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_combined_tables' and `column_name`='table_alias';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_combined_tables','table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_combined_tables' and `column_name`='table_name';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_combined_tables')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='1',`delete`='1',`append`='1',`existsreal`='0' where `role`='administration' and `table_name`='ds_combined_tables';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_combined_tables')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='ds_combined_tables';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_combined_tables','table_alias','DE','Alias','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_combined_tables' and `column_name`='table_alias' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_combined_tables','table_name','DE','Tabelle','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='combobox_ds_tabelle',`position`='0',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_combined_tables' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_combined_tables','table_alias','DE','Alias')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_combined_tables' and `column_name`='table_alias' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_combined_tables','table_name','DE','Tabelle')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_combined_tables' and `column_name`='table_name' and `language`='DE';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_combined_tables','ds')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_combined_tables__table_name\":\"ds__table_name\"}',`constraint_name`='fk_ds_combined_tables_ds_tn',`active`='0',`searchable`='0',`autosync`='1' where `table_name`='ds_combined_tables' and `reference_table_name`='ds';
-- END DS ds_combined_tables




END //

-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_contextmenu.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_CONTEXTMENU` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_CONTEXTMENU`()
    MODIFIES SQL DATA
BEGIN

-- BEGIN DS ds_contextmenu
-- NAME: Kontextmenü

insert into `ds`
                  (`table_name`)
                  values
                  ('ds_contextmenu')
                  on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Kontextmenü',`reorderfield`='position',`use_history`='0',`searchfield`='name',`displayfield`='name',`sortfield`='position',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='rowmodel',`sync_view`='',`cssstyle`='',`read_table`='',`existsreal`='1',`class_name`='Datenstamm',`special_add_panel`='',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='1',`character_set_name`='' where `table_name`='ds_contextmenu';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_contextmenu','component')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_contextmenu' and `column_name`='component';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_contextmenu','name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_contextmenu' and `column_name`='name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_contextmenu','paramfield')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_contextmenu' and `column_name`='paramfield';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_contextmenu','position')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='int',`column_key`='',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_contextmenu' and `column_name`='position';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_contextmenu','table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_contextmenu' and `column_name`='table_name';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('administration','ds_contextmenu')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='1',`append`='1',`existsreal`='1' where `role`='administration' and `table_name`='ds_contextmenu';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('_default_','ds_contextmenu')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_contextmenu';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_contextmenu','component','DE','Programm','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_contextmenu' and `column_name`='component' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_contextmenu','name','DE','Name','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_contextmenu' and `column_name`='name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_contextmenu','paramfield','DE','Parameter-Feld','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_contextmenu' and `column_name`='paramfield' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_contextmenu','position','DE','position','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='1',`active`='1' where `table_name`='ds_contextmenu' and `column_name`='position' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_contextmenu','table_name','DE','table_name','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='1',`active`='1' where `table_name`='ds_contextmenu' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_contextmenu','component','DE','Programm')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_contextmenu' and `column_name`='component' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_contextmenu','name','DE','name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_contextmenu' and `column_name`='name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_contextmenu','paramfield','DE','Parameter-Feld')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_contextmenu' and `column_name`='paramfield' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_contextmenu','position','DE','position')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_contextmenu' and `column_name`='position' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_contextmenu','table_name','DE','table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_contextmenu' and `column_name`='table_name' and `language`='DE';
insert into `ds_reference_tables`
                  (`table_name`,`reference_table_name`)
                  values
                  ('ds_contextmenu','ds')
                  on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_contextmenu__table_name\":\"ds__table_name\"}',`active`='1',`constraint_name`='fk_ds_ctx_ds',`searchable`='0',`autosync`='1' where `table_name`='ds_contextmenu' and `reference_table_name`='ds';
-- END DS ds_contextmenu



-- call UPDATE_DS_SETUP( );
END //

-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_contextmenu_groups.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_CONTEXTMENU_GROUPS` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_CONTEXTMENU_GROUPS`()
    MODIFIES SQL DATA
BEGIN


-- BEGIN DS ds_contextmenu_groups
-- NAME: Gruppen

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_contextmenu_groups')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Gruppen',`reorderfield`='',`use_history`='0',`searchfield`='group',`displayfield`='group',`sortfield`='group',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`character_set_name`='utf8',`globalsearch`='0',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`cssstyle`='',`read_table`='',`class_name`='Datenstamm',`special_add_panel`='',`existsreal`='1',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_contextmenu_groups';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_contextmenu_groups','group')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0' ,`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_contextmenu_groups' and `column_name`='group';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_contextmenu_groups','name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0' ,`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_contextmenu_groups' and `column_name`='name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_contextmenu_groups','table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0' ,`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_contextmenu_groups' and `column_name`='table_name';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_contextmenu_groups')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='1',`append`='1',`existsreal`='1' where `role`='administration' and `table_name`='ds_contextmenu_groups';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_contextmenu_groups')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_contextmenu_groups';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_contextmenu_groups','group','DE','group','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_contextmenu_groups' and `column_name`='group' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_contextmenu_groups','name','DE','name','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_contextmenu_groups' and `column_name`='name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_contextmenu_groups','table_name','DE','table_name','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_contextmenu_groups' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_contextmenu_groups','group','DE','group')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_contextmenu_groups' and `column_name`='group' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_contextmenu_groups','name','DE','name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_contextmenu_groups' and `column_name`='name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_contextmenu_groups','table_name','DE','table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_contextmenu_groups' and `column_name`='table_name' and `language`='DE';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_contextmenu_groups','ds_contextmenu')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_contextmenu_groups__name\":\"ds_contextmenu__name\",\"ds_contextmenu_groups__table_name\":\"ds_contextmenu__table_name\"}',`constraint_name`='fk_ds_ctx_gr_ds_ctx',`active`='1',`searchable`='0',`autosync`='1' where `table_name`='ds_contextmenu_groups' and `reference_table_name`='ds_contextmenu';
-- END DS ds_contextmenu_groups





-- BEGIN DS ds_contextmenu_session_groups
-- NAME: Session-Groups

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_contextmenu_session_groups')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Session-Groups',`reorderfield`='',`use_history`='0',`searchfield`='group',`displayfield`='group',`sortfield`='group',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`character_set_name`='utf8',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`cssstyle`='',`read_table`='',`class_name`='Datenstamm',`special_add_panel`='',`existsreal`='1',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_contextmenu_session_groups';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_contextmenu_session_groups','group')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0' ,`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_contextmenu_session_groups' and `column_name`='group';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_contextmenu_session_groups','name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0' ,`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_contextmenu_session_groups' and `column_name`='name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_contextmenu_session_groups','table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0' ,`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_contextmenu_session_groups' and `column_name`='table_name';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_contextmenu_session_groups')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='administration' and `table_name`='ds_contextmenu_session_groups';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_contextmenu_session_groups')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_contextmenu_session_groups';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_contextmenu_session_groups','group','DE','group','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_contextmenu_session_groups' and `column_name`='group' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_contextmenu_session_groups','name','DE','name','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_contextmenu_session_groups' and `column_name`='name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_contextmenu_session_groups','table_name','DE','table_name','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_contextmenu_session_groups' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_contextmenu_session_groups','group','DE','group')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_contextmenu_session_groups' and `column_name`='group' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_contextmenu_session_groups','name','DE','name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_contextmenu_session_groups' and `column_name`='name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_contextmenu_session_groups','table_name','DE','table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_contextmenu_session_groups' and `column_name`='table_name' and `language`='DE';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_contextmenu_session_groups','ds_contextmenu')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_contextmenu_session_groups__table_name\":\"ds_contextmenu__table_name\",\"ds_contextmenu_session_groups__name\":\"ds_contextmenu__name\"}',`constraint_name`='fk_ds_ctx_sgr_ds_ctx',`active`='1',`searchable`='0',`autosync`='1' where `table_name`='ds_contextmenu_session_groups' and `reference_table_name`='ds_contextmenu';
-- END DS ds_contextmenu_session_groups





END //
-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_contextmenu_params.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_CONTEXTMENU_PARAMS` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_CONTEXTMENU_PARAMS`()
    MODIFIES SQL DATA
BEGIN

-- BEGIN DS ds_contextmenu_params
-- NAME: Parameter

insert into `ds`
                  (`table_name`)
                  values
                  ('ds_contextmenu_params')
                  on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Parameter',`reorderfield`='',`use_history`='0',`searchfield`='param',`displayfield`='param',`sortfield`='param',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`cssstyle`='',`read_table`='',`existsreal`='1',`class_name`='Datenstamm',`special_add_panel`='',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='1',`character_set_name`='' where `table_name`='ds_contextmenu_params';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_contextmenu_params','name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_contextmenu_params' and `column_name`='name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_contextmenu_params','param')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_contextmenu_params' and `column_name`='param';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_contextmenu_params','table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_contextmenu_params' and `column_name`='table_name';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('administration','ds_contextmenu_params')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='1',`append`='1',`existsreal`='1' where `role`='administration' and `table_name`='ds_contextmenu_params';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('_default_','ds_contextmenu_params')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_contextmenu_params';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_contextmenu_params','name','DE','Name','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_contextmenu_params' and `column_name`='name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_contextmenu_params','param','DE','Parameter','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_contextmenu_params' and `column_name`='param' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_contextmenu_params','table_name','DE','Tabelle','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_contextmenu_params' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_contextmenu_params','name','DE','Name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_contextmenu_params' and `column_name`='name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_contextmenu_params','param','DE','Param')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_contextmenu_params' and `column_name`='param' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_contextmenu_params','table_name','DE','Tabelle')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_contextmenu_params' and `column_name`='table_name' and `language`='DE';
insert into `ds_reference_tables`
                  (`table_name`,`reference_table_name`)
                  values
                  ('ds_contextmenu_params','ds_contextmenu')
                  on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_contextmenu_params__table_name\":\"ds_contextmenu__table_name\",\"ds_contextmenu_params__name\":\"ds_contextmenu__name\"}',`active`='1',`constraint_name`='fk_ds_ctx_pr_ds_ctx',`searchable`='0',`autosync`='1' where `table_name`='ds_contextmenu_params' and `reference_table_name`='ds_contextmenu';
-- END DS ds_contextmenu_params


-- call UPDATE_DS_SETUP( );
END //

-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_custom_listview_config.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_CUSTOM_LISTVIEW_CONFIG` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_CUSTOM_LISTVIEW_CONFIG`()
    MODIFIES SQL DATA
BEGIN

IF (
  NOT EXISTS(
    select * from INFORMATION_SCHEMA.tables
    WHERE table_schema = database()
    and table_name = 'ds_custom_listview_config'
  )
) THEN 
    create table if not exists ds_custom_listview_config (
        login varchar(100) not null,
        table_name varchar(128) not null,
        column_name varchar(100) not null,
        primary key (login,table_name,column_name),

        constraint `fk_ds_custom_listview_config_ds_column`
        foreign key (table_name,column_name)
        references ds_column (table_name,column_name)
        on delete cascade
        on update cascade,

        flex integer default 1,
        width fixed(15,6) default -1,
        hidden tinyint default 0,
        position integer default 999
    );
    create or replace view  view_readtable_ds_custom_listview_config as
    select * from ds_custom_listview_config
    where login = getSessionUser();
    call UPDATE_DS_SETUP( );
END IF;


-- BEGIN DS ds_custom_listview_config
-- NAME: Listeneinstellungen

insert into `ds`
                  (`table_name`)
                  values
                  ('ds_custom_listview_config')
                  on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Listeneinstellungen',`reorderfield`='position',`use_history`='0',`searchfield`='table_name',`displayfield`='table_name',`sortfield`='position',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`read_table`='view_readtable_ds_custom_listview_config',`cssstyle`='',`class_name`='Datenstamm',`special_add_panel`='',`existsreal`='1',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`combined`='0',`phpexporterfilename`='',`default_pagesize`='100',`allowform`='1',`character_set_name`='',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_custom_listview_config';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_custom_listview_config','column_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(100)',`character_maximum_length`='100',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_custom_listview_config' and `column_name`='column_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_custom_listview_config','flex')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='1',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='0',`data_type`='int',`column_key`='',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='\'\'' where `table_name`='ds_custom_listview_config' and `column_name`='flex';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_custom_listview_config','hidden')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='0',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='\'\'' where `table_name`='ds_custom_listview_config' and `column_name`='hidden';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_custom_listview_config','login')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='{:getSessionUser()}',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='0',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(100)',`character_maximum_length`='100',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='\'\'' where `table_name`='ds_custom_listview_config' and `column_name`='login';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_custom_listview_config','position')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='999',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='0',`data_type`='int',`column_key`='',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='\'\'' where `table_name`='ds_custom_listview_config' and `column_name`='position';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_custom_listview_config','table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_custom_listview_config' and `column_name`='table_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_custom_listview_config','width')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='-1',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='0',`data_type`='int',`column_key`='',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='\'\'' where `table_name`='ds_custom_listview_config' and `column_name`='width';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('_default_','ds_custom_listview_config')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='1',`append`='1',`existsreal`='0' where `role`='_default_' and `table_name`='ds_custom_listview_config';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_custom_listview_config','column_name','DE','Spalte','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='2',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_custom_listview_config' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_custom_listview_config','flex','DE','Flex','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='numberfield',`position`='4',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_custom_listview_config' and `column_name`='flex' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_custom_listview_config','hidden','DE','versteckt','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='checkbox',`position`='5',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_custom_listview_config' and `column_name`='hidden' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_custom_listview_config','login','DE','Login','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_custom_listview_config' and `column_name`='login' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_custom_listview_config','position','DE','Position','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='numberfield',`position`='3',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_custom_listview_config' and `column_name`='position' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_custom_listview_config','table_name','DE','Tabelle','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='1',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_custom_listview_config' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_custom_listview_config','width','DE','Breite','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='numberfield',`position`='6',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_custom_listview_config' and `column_name`='width' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_custom_listview_config','column_name','DE','Spalte')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='2',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_custom_listview_config' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_custom_listview_config','flex','DE','Flex')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='4',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_custom_listview_config' and `column_name`='flex' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_custom_listview_config','hidden','DE','versteckt')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='5',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_custom_listview_config' and `column_name`='hidden' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_custom_listview_config','login','DE','Login')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_custom_listview_config' and `column_name`='login' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_custom_listview_config','position','DE','Position')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='3',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_custom_listview_config' and `column_name`='position' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_custom_listview_config','table_name','DE','Tabelle')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='1',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_custom_listview_config' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_custom_listview_config','width','DE','Breite')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='6',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_custom_listview_config' and `column_name`='width' and `language`='DE';
insert into `ds_reference_tables`
                  (`table_name`,`reference_table_name`)
                  values
                  ('ds_custom_listview_config','ds_column')
                  on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_custom_listview_config__column_name\":\"ds_column__column_name\",\"ds_custom_listview_config__table_name\":\"ds_column__table_name\"}',`constraint_name`='fk_ds_custom_listview_config_ds_column',`active`='0',`searchable`='0',`autosync`='1' where `table_name`='ds_custom_listview_config' and `reference_table_name`='ds_column';
-- END DS ds_custom_listview_config




END //
-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_db_types_fieldtype.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_DB_TYPES_FIELDTYPE` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_DB_TYPES_FIELDTYPE`()
    MODIFIES SQL DATA
BEGIN


-- BEGIN DS ds_db_types_fieldtype
-- NAME: Datenstamm DB-Feldtypen

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_db_types_fieldtype')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Datenstamm DB-Feldtypen',`reorderfield`='',`use_history`='0',`searchfield`='dbtype',`displayfield`='dbtype',`sortfield`='dbtype',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`syncable`='0',`cssstyle`='',`alternativeformxtype`='',`read_table`='',`class_name`='Datenstamm',`special_add_panel`='',`existsreal`='1',`character_set_name`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_db_types_fieldtype';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_db_types_fieldtype','dbtype')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(32)',`character_maximum_length`='32',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0'  where `table_name`='ds_db_types_fieldtype' and `column_name`='dbtype';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_db_types_fieldtype','fieldtype')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(32)',`character_maximum_length`='32',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0'  where `table_name`='ds_db_types_fieldtype' and `column_name`='fieldtype';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_db_types_fieldtype')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='ds_db_types_fieldtype';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_db_types_fieldtype','dbtype','DE','DB-Datentyp','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_db_types_fieldtype' and `column_name`='dbtype' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_db_types_fieldtype','fieldtype','DE','Feldtyp','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_db_types_fieldtype' and `column_name`='fieldtype' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_db_types_fieldtype','dbtype','DE','DB-Datentyp')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_db_types_fieldtype' and `column_name`='dbtype' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_db_types_fieldtype','fieldtype','DE','Feldtyp')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_db_types_fieldtype' and `column_name`='fieldtype' and `language`='DE';
-- END DS ds_db_types_fieldtype




END //
-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_dropdownfields.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_DROPDOWNFIELDS` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_DROPDOWNFIELDS`()
    MODIFIES SQL DATA
BEGIN


-- BEGIN DS ds_dropdownfields
-- NAME: Auswahlfelder

insert into `ds`
                  (`table_name`)
                  values
                  ('ds_dropdownfields')
                  on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Auswahlfelder',`reorderfield`='',`use_history`='0',`searchfield`='name',`displayfield`='name',`sortfield`='name',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`cssstyle`='',`read_table`='',`existsreal`='1',`class_name`='Datenstamm',`special_add_panel`='',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='1',`character_set_name`='' where `table_name`='ds_dropdownfields';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_dropdownfields','displayfield')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_dropdownfields' and `column_name`='displayfield';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_dropdownfields','filterconfig')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='text',`column_key`='',`column_type`='text',`character_maximum_length`='65535',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_dropdownfields' and `column_name`='filterconfig';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_dropdownfields','idfield')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_dropdownfields' and `column_name`='idfield';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_dropdownfields','name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_dropdownfields' and `column_name`='name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_dropdownfields','table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_dropdownfields' and `column_name`='table_name';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('administration','ds_dropdownfields')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='1',`append`='1',`existsreal`='1' where `role`='administration' and `table_name`='ds_dropdownfields';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('_default_','ds_dropdownfields')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_dropdownfields';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_dropdownfields','displayfield','DE','displayfield','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='tualodsfields',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_dropdownfields' and `column_name`='displayfield' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_dropdownfields','idfield','DE','idfield','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='tualodsfields',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_dropdownfields' and `column_name`='idfield' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_dropdownfields','name','DE','name','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_dropdownfields' and `column_name`='name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_dropdownfields','table_name','DE','table_name','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='1',`active`='1' where `table_name`='ds_dropdownfields' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_dropdownfields','displayfield','DE','Anzeigefeld')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='tualodsfields',`position`='2',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_dropdownfields' and `column_name`='displayfield' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_dropdownfields','idfield','DE','ID-Feld')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='tualodsfields',`position`='3',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_dropdownfields' and `column_name`='idfield' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_dropdownfields','name','DE','Name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='1',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_dropdownfields' and `column_name`='name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_dropdownfields','table_name','DE','Tabelle')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_dropdownfields' and `column_name`='table_name' and `language`='DE';
insert into `ds_reference_tables`
                  (`table_name`,`reference_table_name`)
                  values
                  ('ds_dropdownfields','ds')
                  on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_dropdownfields__table_name\":\"ds__table_name\"}',`active`='1',`constraint_name`='fk_ds_dropdownfields_ds',`searchable`='0',`autosync`='1' where `table_name`='ds_dropdownfields' and `reference_table_name`='ds';
-- END DS ds_dropdownfields


-- call UPDATE_DS_SETUP( );
END //


-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_listfilter.sql 
DELIMITER ;

create or replace view view_ds_access_by_role as
select table_name from ds_access where `role` in (select `group` from `VIEW_SESSION_GROUPS`) and (`read`+`write`+`delete`+`append` > 0)
group by table_name
;



-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_nm_tables.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_NM_TABLES` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_NM_TABLES`()
    MODIFIES SQL DATA
BEGIN

-- BEGIN DS ds_nm_tables
-- NAME: Mehrfachauswahllisten

insert into `ds`
                  (`table_name`)
                  values
                  ('ds_nm_tables')
                  on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Mehrfachauswahllisten',`reorderfield`='position',`use_history`='0',`searchfield`='table_name',`displayfield`='table_name',`sortfield`='position',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`cssstyle`='',`read_table`='',`existsreal`='1',`class_name`='Datenstamm',`special_add_panel`='',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`character_set_name`='' where `table_name`='ds_nm_tables';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_nm_tables','active')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_nm_tables' and `column_name`='active';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_nm_tables','constraint_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_nm_tables' and `column_name`='constraint_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_nm_tables','hidden')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_nm_tables' and `column_name`='hidden';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_nm_tables','intermedia_table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='MUL',`column_type`='varchar(32)',`character_maximum_length`='32',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_nm_tables' and `column_name`='intermedia_table_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_nm_tables','label')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_nm_tables' and `column_name`='label';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_nm_tables','language')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='DE',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(3)',`character_maximum_length`='3',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_nm_tables' and `column_name`='language';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_nm_tables','position')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='99',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='int',`column_key`='',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_nm_tables' and `column_name`='position';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_nm_tables','referenced_constraint_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_nm_tables' and `column_name`='referenced_constraint_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_nm_tables','referenced_table_json')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='longtext',`column_key`='',`column_type`='longtext',`character_maximum_length`='4294967295',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_nm_tables' and `column_name`='referenced_table_json';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_nm_tables','referenced_table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='MUL',`column_type`='varchar(32)',`character_maximum_length`='32',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_nm_tables' and `column_name`='referenced_table_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_nm_tables','table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(32)',`character_maximum_length`='32',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_nm_tables' and `column_name`='table_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_nm_tables','table_name_json')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='longtext',`column_key`='',`column_type`='longtext',`character_maximum_length`='4294967295',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_nm_tables' and `column_name`='table_name_json';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('administration','ds_nm_tables')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='0',`append`='0',`existsreal`='1' where `role`='administration' and `table_name`='ds_nm_tables';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('_default_','ds_nm_tables')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_nm_tables';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_nm_tables','active','DE','Aktiv','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_nm_tables' and `column_name`='active' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_nm_tables','hidden','DE','Versteckt','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_nm_tables' and `column_name`='hidden' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_nm_tables','intermedia_table_name','DE','IM-Tabelle','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_nm_tables' and `column_name`='intermedia_table_name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_nm_tables','label','DE','Label','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_nm_tables' and `column_name`='label' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_nm_tables','table_name','DE','Tabelle','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='',`position`='999',`hidden`='0',`active`='1' where `table_name`='ds_nm_tables' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_nm_tables','active','DE','Aktiv')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='checkbox',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_nm_tables' and `column_name`='active' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_nm_tables','hidden','DE','Versteckt')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='checkbox',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_nm_tables' and `column_name`='hidden' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_nm_tables','intermedia_table_name','DE','IM Tabelle')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_nm_tables' and `column_name`='intermedia_table_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_nm_tables','label','DE','Label')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textarea',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_nm_tables' and `column_name`='label' and `language`='DE';
insert into `ds_reference_tables`
                  (`table_name`,`reference_table_name`)
                  values
                  ('ds_nm_tables','ds')
                  on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_nm_tables__table_name\":\"ds__table_name\"}',`active`='1',`constraint_name`='fk_ds_nm_tables_r_ds',`searchable`='0',`autosync`='1' where `table_name`='ds_nm_tables' and `reference_table_name`='ds';
-- END DS ds_nm_tables


call UPDATE_DS_SETUP( );
END //

-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_pdf_reports.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_PDF_REPORTS` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_PDF_REPORTS`()
    MODIFIES SQL DATA
BEGIN


create or replace view `view_readtable_ds_pdf_reports_ds_all_prepare` AS 
select 
    `ds_pdf_reports`.`name`,
    `ds`.`table_name`
from `ds_pdf_reports`,`ds`
;

create or replace view `view_readtable_ds_pdf_reports_ds_all` AS 

select 
    `ic`.`table_name`,
    `ic`.`name`,
    ifnull(`ds_pdf_reports_ds`.`active`,0) AS `active` 
from 
    `view_readtable_ds_pdf_reports_ds_all_prepare` `ic`
    left join 
        `ds_pdf_reports_ds` 
    on
        `ds_pdf_reports_ds`.`table_name` = `ic`.`table_name`
        and  `ds_pdf_reports_ds`.`name` = `ic`.`name`
;



-- BEGIN DS ds_pdf_reports
-- NAME: PDF-Berichte

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_pdf_reports')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='PDF-Berichte',`reorderfield`='',`use_history`='0',`searchfield`='name',`displayfield`='name',`sortfield`='name',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`character_set_name`='utf8',`globalsearch`='0',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`cssstyle`='',`read_table`='',`class_name`='Datenstamm-Berichte',`special_add_panel`='',`existsreal`='1',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_pdf_reports';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_pdf_reports','author')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='mail & parcel network GmbH',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(50)',`character_maximum_length`='50',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_pdf_reports' and `column_name`='author';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_pdf_reports','filename')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='{GUID}.pdf',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(50)',`character_maximum_length`='50',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_pdf_reports' and `column_name`='filename';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_pdf_reports','font')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='dejavusans',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='MUL',`column_type`='varchar(20)',`character_maximum_length`='20',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_pdf_reports' and `column_name`='font';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_pdf_reports','footer')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='text',`column_key`='',`column_type`='text',`character_maximum_length`='65535',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_pdf_reports' and `column_name`='footer';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_pdf_reports','header')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='text',`column_key`='',`column_type`='text',`character_maximum_length`='65535',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_pdf_reports' and `column_name`='header';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_pdf_reports','height')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='297',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(10)',`character_maximum_length`='10',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_pdf_reports' and `column_name`='height';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_pdf_reports','name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0' ,`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_pdf_reports' and `column_name`='name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_pdf_reports','subject')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(50)',`character_maximum_length`='50',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_pdf_reports' and `column_name`='subject';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_pdf_reports','template')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='text',`column_key`='',`column_type`='text',`character_maximum_length`='65535',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_pdf_reports' and `column_name`='template';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_pdf_reports','templatetype')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(20)',`character_maximum_length`='20',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_pdf_reports' and `column_name`='templatetype';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_pdf_reports','title')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(50)',`character_maximum_length`='50',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_pdf_reports' and `column_name`='title';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_pdf_reports','unit')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='mm',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='MUL',`column_type`='varchar(5)',`character_maximum_length`='5',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_pdf_reports' and `column_name`='unit';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_pdf_reports','width')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='210',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(10)',`character_maximum_length`='10',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_pdf_reports' and `column_name`='width';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_pdf_reports')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='1',`delete`='1',`append`='1',`existsreal`='1' where `role`='administration' and `table_name`='ds_pdf_reports';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_pdf_reports')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_pdf_reports';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_pdf_reports','author','DE','Autor','Allgemein/Meta')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='3',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_pdf_reports' and `column_name`='author' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_pdf_reports','filename','DE','Dateiname','Allgemein/Meta')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='1',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_pdf_reports' and `column_name`='filename' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_pdf_reports','font','DE','Schrift','Allgemein/Seite')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='combobox_ds_pdf_reports_fonts_id',`position`='6',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_pdf_reports' and `column_name`='font' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_pdf_reports','footer','DE','Fuss','Allgemein/Template')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textarea',`position`='12',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_pdf_reports' and `column_name`='footer' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_pdf_reports','header','DE','Kopf','Allgemein/Template')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textarea',`position`='10',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_pdf_reports' and `column_name`='header' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_pdf_reports','height','DE','Höhe','Allgemein/Seite')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='8',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_pdf_reports' and `column_name`='height' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_pdf_reports','name','DE','Name','Allgemein/Satzinformation')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_pdf_reports' and `column_name`='name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_pdf_reports','subject','DE','Betreff','Allgemein/Meta')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='4',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_pdf_reports' and `column_name`='subject' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_pdf_reports','template','DE','Seite','Allgemein/Template')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textarea',`position`='11',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_pdf_reports' and `column_name`='template' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_pdf_reports','templatetype','DE','Templatetype','Allgemein/Template')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='9',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_pdf_reports' and `column_name`='templatetype' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_pdf_reports','title','DE','Titel','Allgemein/Meta')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='2',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_pdf_reports' and `column_name`='title' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_pdf_reports','unit','DE','Einheit','Allgemein/Seite')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='combobox_ds_pdf_reports_units_id',`position`='5',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_pdf_reports' and `column_name`='unit' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_pdf_reports','width','DE','Breite','Allgemein/Seite')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='7',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_pdf_reports' and `column_name`='width' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_pdf_reports','author','DE','Autor')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='4',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_pdf_reports' and `column_name`='author' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_pdf_reports','filename','DE','Dateiname')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='2',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_pdf_reports' and `column_name`='filename' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_pdf_reports','font','DE','Schrift')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='6',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_pdf_reports' and `column_name`='font' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_pdf_reports','height','DE','Höhe')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='9',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_pdf_reports' and `column_name`='height' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_pdf_reports','name','DE','Name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='1',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_pdf_reports' and `column_name`='name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_pdf_reports','subject','DE','Betreff')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='5',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_pdf_reports' and `column_name`='subject' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_pdf_reports','template','DE','Template')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='10',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_pdf_reports' and `column_name`='template' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_pdf_reports','title','DE','Titel')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='3',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_pdf_reports' and `column_name`='title' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_pdf_reports','unit','DE','Einheit')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='7',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_pdf_reports' and `column_name`='unit' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_pdf_reports','width','DE','Breite')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='8',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_pdf_reports' and `column_name`='width' and `language`='DE';
insert into `ds_nm_tables`
                    (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                    values
                    ('ds_pdf_reports','fk_ds_pdf_reports_ds_ds_pdf_reports_tn','fk_ds_pdf_reports_ds_ds_tn','DE','')
                    on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds',`intermedia_table_name`='ds_pdf_reports_ds',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_pdf_reports_ds__name\":\"ds_pdf_reports__name\"}',`referenced_table_json`='{\"ds_pdf_reports_ds__table_name\":\"ds__table_name\"}' where `table_name`='ds_pdf_reports' and `constraint_name`='fk_ds_pdf_reports_ds_ds_pdf_reports_tn' and `referenced_constraint_name`='fk_ds_pdf_reports_ds_ds_tn';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_pdf_reports','ds')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_pdf_reports__table_name\":\"ds__table_name\"}',`constraint_name`='fk_ds_pdf_reports_ds_tn',`active`='0',`searchable`='0',`autosync`='1' where `table_name`='ds_pdf_reports' and `reference_table_name`='ds';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_pdf_reports','ds_pdf_reports_fonts')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_pdf_reports__font\":\"ds_pdf_reports_fonts__id\"}',`constraint_name`='fk_ds_pdf_reports_ds_pdf_reports_fonts_tn',`active`='0',`searchable`='0',`autosync`='1' where `table_name`='ds_pdf_reports' and `reference_table_name`='ds_pdf_reports_fonts';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_pdf_reports','ds_pdf_reports_units')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_pdf_reports__unit\":\"ds_pdf_reports_units__id\"}',`constraint_name`='fk_ds_pdf_reports_ds_pdf_reports_units_tn',`active`='0',`searchable`='0',`autosync`='1' where `table_name`='ds_pdf_reports' and `reference_table_name`='ds_pdf_reports_units';
-- END DS ds_pdf_reports


-- BEGIN DS ds_pdf_reports_ds
-- NAME: PDF-Berichte Datenstämme

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_pdf_reports_ds')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='PDF-Berichte Datenstämme',`reorderfield`='',`use_history`='0',`searchfield`='table_name',`displayfield`='table_name',`sortfield`='table_name',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`character_set_name`='utf8',`globalsearch`='0',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`cssstyle`='',`read_table`='view_readtable_ds_pdf_reports_ds_all',`class_name`='Datenstamm-Berichte',`special_add_panel`='',`existsreal`='1',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_pdf_reports_ds';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_pdf_reports_ds','active')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='tinyint',`column_key`='',`column_type`='int(4)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_pdf_reports_ds' and `column_name`='active';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_pdf_reports_ds','name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0' ,`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_pdf_reports_ds' and `column_name`='name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_pdf_reports_ds','table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0' ,`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_pdf_reports_ds' and `column_name`='table_name';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_pdf_reports_ds')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='1',`delete`='1',`append`='1',`existsreal`='1' where `role`='administration' and `table_name`='ds_pdf_reports_ds';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_pdf_reports_ds')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_pdf_reports_ds';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_pdf_reports_ds','name','DE','name','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_pdf_reports_ds' and `column_name`='name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_pdf_reports_ds','table_name','DE','table_name','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_pdf_reports_ds' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_pdf_reports_ds','active','DE','Aktiv')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='1',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_pdf_reports_ds' and `column_name`='active' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_pdf_reports_ds','name','DE','Name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_pdf_reports_ds' and `column_name`='name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_pdf_reports_ds','table_name','DE','Tabelle')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='2',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_pdf_reports_ds' and `column_name`='table_name' and `language`='DE';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_pdf_reports_ds','ds')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_pdf_reports_ds__table_name\":\"ds__table_name\"}',`constraint_name`='fk_ds_pdf_reports_ds_ds_tn',`active`='0',`searchable`='0',`autosync`='1' where `table_name`='ds_pdf_reports_ds' and `reference_table_name`='ds';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_pdf_reports_ds','ds_pdf_reports')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_pdf_reports_ds__name\":\"ds_pdf_reports__name\"}',`constraint_name`='fk_ds_pdf_reports_ds_ds_pdf_reports_tn',`active`='1',`searchable`='0',`autosync`='1' where `table_name`='ds_pdf_reports_ds' and `reference_table_name`='ds_pdf_reports';
-- END DS ds_pdf_reports_ds


-- BEGIN DS ds_pdf_reports_fonts
-- NAME: PDF-Berichte-Schriften

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_pdf_reports_fonts')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='PDF-Berichte-Schriften',`reorderfield`='',`use_history`='0',`searchfield`='id',`displayfield`='id',`sortfield`='id',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`character_set_name`='utf8',`globalsearch`='0',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`cssstyle`='',`read_table`='',`class_name`='Datenstamm-Berichte',`special_add_panel`='',`existsreal`='1',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_pdf_reports_fonts';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_pdf_reports_fonts','id')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0' ,`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(20)',`character_maximum_length`='20',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_pdf_reports_fonts' and `column_name`='id';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_pdf_reports_fonts')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='1',`append`='1',`existsreal`='1' where `role`='administration' and `table_name`='ds_pdf_reports_fonts';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_pdf_reports_fonts')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_pdf_reports_fonts';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_pdf_reports_fonts','id','DE','Schrift','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_pdf_reports_fonts' and `column_name`='id' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_pdf_reports_fonts','id','DE','Schrift')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_pdf_reports_fonts' and `column_name`='id' and `language`='DE';
insert into `ds_dropdownfields`
                    (`table_name`,`name`)
                    values
                    ('ds_pdf_reports_fonts','id')
                    on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='id',`displayfield`='id',`filterconfig`='' where `table_name`='ds_pdf_reports_fonts' and `name`='id';
insert into `ds_nm_tables`
                    (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                    values
                    ('ds_pdf_reports_fonts','fk_ds_pdf_reports_ds_pdf_reports_fonts_tn','fk_ds_pdf_reports_ds_pdf_reports_units_tn','DE','')
                    on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds_pdf_reports_units',`intermedia_table_name`='ds_pdf_reports',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_pdf_reports__font\":\"ds_pdf_reports_fonts__id\"}',`referenced_table_json`='{\"ds_pdf_reports__unit\":\"ds_pdf_reports_units__id\"}' where `table_name`='ds_pdf_reports_fonts' and `constraint_name`='fk_ds_pdf_reports_ds_pdf_reports_fonts_tn' and `referenced_constraint_name`='fk_ds_pdf_reports_ds_pdf_reports_units_tn';
-- END DS ds_pdf_reports_fonts


-- BEGIN DS ds_pdf_reports_units
-- NAME: PDF-Berichte-Einheiten

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_pdf_reports_units')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='PDF-Berichte-Einheiten',`reorderfield`='',`use_history`='0',`searchfield`='id',`displayfield`='id',`sortfield`='id',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`character_set_name`='utf8',`globalsearch`='0',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`cssstyle`='',`read_table`='',`class_name`='Datenstamm-Berichte',`special_add_panel`='',`existsreal`='1',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_pdf_reports_units';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_pdf_reports_units','id')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0' ,`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(5)',`character_maximum_length`='5',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_pdf_reports_units' and `column_name`='id';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_pdf_reports_units')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='1',`delete`='1',`append`='1',`existsreal`='1' where `role`='administration' and `table_name`='ds_pdf_reports_units';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_pdf_reports_units')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_pdf_reports_units';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_pdf_reports_units','id','DE','Kennzeichen','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_pdf_reports_units' and `column_name`='id' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_pdf_reports_units','id','DE','Kennzeichen')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_pdf_reports_units' and `column_name`='id' and `language`='DE';
insert into `ds_dropdownfields`
                    (`table_name`,`name`)
                    values
                    ('ds_pdf_reports_units','ID')
                    on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='id',`displayfield`='id',`filterconfig`='' where `table_name`='ds_pdf_reports_units' and `name`='ID';
insert into `ds_nm_tables`
                    (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                    values
                    ('ds_pdf_reports_units','fk_ds_pdf_reports_ds_pdf_reports_units_tn','fk_ds_pdf_reports_ds_pdf_reports_fonts_tn','DE','')
                    on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds_pdf_reports_fonts',`intermedia_table_name`='ds_pdf_reports',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_pdf_reports__unit\":\"ds_pdf_reports_units__id\"}',`referenced_table_json`='{\"ds_pdf_reports__font\":\"ds_pdf_reports_fonts__id\"}' where `table_name`='ds_pdf_reports_units' and `constraint_name`='fk_ds_pdf_reports_ds_pdf_reports_units_tn' and `referenced_constraint_name`='fk_ds_pdf_reports_ds_pdf_reports_fonts_tn';
-- END DS ds_pdf_reports_units



END //
-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_preview_form_label.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_PREVIEW_FORM_LABEL` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_PREVIEW_FORM_LABEL`()
    MODIFIES SQL DATA
BEGIN

-- BEGIN DS ds_preview_form_label
-- NAME: Vorschau

CREATE OR REPLACE VIEW `view_readtable_ds_preview_form_label_all` AS 
select ifnull(`tc`.`table_name`,`ic`.`table_name`) AS `table_name`,
ifnull(`tc`.`column_name`,`ic`.`column_name`) AS `column_name`,
ifnull(`tc`.`language`,'DE') AS `language`,ifnull(`tc`.`label`,`ic`.`column_name`) AS `label`,
ifnull(`tc`.`xtype`,'displayfield') AS `xtype`,ifnull(`tc`.`field_path`,'') AS `editor`,
ifnull(`tc`.`position`,999) AS `position`,ifnull(`tc`.`active`,0) AS `active` 

from (`ds_column` `ic` left join `ds_preview_form_label` `tc` on(`tc`.`table_name` = `ic`.`table_name` and `tc`.`column_name` = `ic`.`column_name`));


insert into `ds`
                  (`table_name`)
                  values
                  ('ds_preview_form_label')
                  on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Vorschau',`reorderfield`='position',`use_history`='0',`searchfield`='column_name',`displayfield`='column_name',`sortfield`='position',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`cssstyle`='',`read_table`='view_readtable_ds_preview_form_label_all',`existsreal`='1',`class_name`='Datenstamm',`special_add_panel`='',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`character_set_name`='' where `table_name`='ds_preview_form_label';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_preview_form_label','active')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='1',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_preview_form_label' and `column_name`='active';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_preview_form_label','column_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='ds_column',`referenced_column_name`='column_name',`is_referenced`='NO',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_preview_form_label' and `column_name`='column_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_preview_form_label','editor')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(100)',`character_maximum_length`='100',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_preview_form_label' and `column_name`='editor';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_preview_form_label','field_path')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_preview_form_label' and `column_name`='field_path';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_preview_form_label','label')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='{column_name}',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_preview_form_label' and `column_name`='label';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_preview_form_label','language')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='DE',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(3)',`character_maximum_length`='3',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_preview_form_label' and `column_name`='language';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_preview_form_label','position')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='int',`column_key`='',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_preview_form_label' and `column_name`='position';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_preview_form_label','table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='ds_column',`referenced_column_name`='table_name',`is_referenced`='NO',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_preview_form_label' and `column_name`='table_name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_preview_form_label','xtype')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='displayfield',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_preview_form_label' and `column_name`='xtype';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('administration','ds_preview_form_label')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='0',`append`='0',`existsreal`='1' where `role`='administration' and `table_name`='ds_preview_form_label';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('_default_','ds_preview_form_label')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_preview_form_label';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_preview_form_label','active','DE','active','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='7',`hidden`='1',`active`='1' where `table_name`='ds_preview_form_label' and `column_name`='active' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_preview_form_label','column_name','DE','column_name','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='1',`hidden`='1',`active`='1' where `table_name`='ds_preview_form_label' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_preview_form_label','field_path','DE','field_path','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='6',`hidden`='1',`active`='1' where `table_name`='ds_preview_form_label' and `column_name`='field_path' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_preview_form_label','label','DE','label','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='3',`hidden`='0',`active`='1' where `table_name`='ds_preview_form_label' and `column_name`='label' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_preview_form_label','language','DE','language','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='2',`hidden`='1',`active`='1' where `table_name`='ds_preview_form_label' and `column_name`='language' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_preview_form_label','position','DE','position','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='5',`hidden`='1',`active`='1' where `table_name`='ds_preview_form_label' and `column_name`='position' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_preview_form_label','table_name','DE','table_name','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='1',`active`='1' where `table_name`='ds_preview_form_label' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_preview_form_label','xtype','DE','xtype','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='4',`hidden`='0',`active`='1' where `table_name`='ds_preview_form_label' and `column_name`='xtype' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_preview_form_label','active','DE','Aktiv')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='6',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_preview_form_label' and `column_name`='active' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_preview_form_label','column_name','DE','Spalte')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='1',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_preview_form_label' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_preview_form_label','field_path','DE','Pfad')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='3',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_preview_form_label' and `column_name`='field_path' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_preview_form_label','label','DE','Label')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='4',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_preview_form_label' and `column_name`='label' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_preview_form_label','language','DE','Sprache')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='2',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_preview_form_label' and `column_name`='language' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_preview_form_label','position','DE','Position')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='7',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_preview_form_label' and `column_name`='position' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_preview_form_label','table_name','DE','Tabelle')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_preview_form_label' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_preview_form_label','xtype','DE','Typ')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='formxtype_combobox',`position`='5',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_preview_form_label' and `column_name`='xtype' and `language`='DE';
insert into `ds_reference_tables`
                  (`table_name`,`reference_table_name`)
                  values
                  ('ds_preview_form_label','ds')
                  on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_preview_form_label__table_name\":\"ds__table_name\"}',`active`='1',`constraint_name`='fk_ds_preview_form_label_ds',`searchable`='0',`autosync`='1' where `table_name`='ds_preview_form_label' and `reference_table_name`='ds';
insert into `ds_reference_tables`
                  (`table_name`,`reference_table_name`)
                  values
                  ('ds_preview_form_label','ds_column')
                  on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_preview_form_label__table_name\":\"ds_column__table_name\",\"ds_preview_form_label__column_name\":\"ds_column__column_name\"}',`active`='0',`constraint_name`='fk_ds_preview_form_label_ds_column',`searchable`='0',`autosync`='1' where `table_name`='ds_preview_form_label' and `reference_table_name`='ds_column';
-- END DS ds_preview_form_label


-- call UPDATE_DS_SETUP( );
END //

-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_reference_tables.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_REFERENCE_TABLES` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_REFERENCE_TABLES`()
    MODIFIES SQL DATA
BEGIN



-- BEGIN DS ds_reference_tables
-- NAME: Referenzen

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_reference_tables')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Referenzen',`reorderfield`='',`use_history`='0',`searchfield`='reference_table_name',`displayfield`='reference_table_name',`sortfield`='reference_table_name',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='',`sync_view`='',`syncable`='0',`cssstyle`='',`read_table`='',`existsreal`='1',`class_name`='Datenstamm',`special_add_panel`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`allowForm`='0',`alternativeformxtype`='',`character_set_name`='',`default_pagesize`='100',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_reference_tables';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_reference_tables','active')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`is_primary`='0' ,`syncable`='0',`update_value`='',`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_reference_tables' and `column_name`='active';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_reference_tables','autosync')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`is_primary`='0' ,`syncable`='0',`update_value`='',`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_reference_tables' and `column_name`='autosync';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_reference_tables','columnsdef')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`is_primary`='0' ,`syncable`='0',`update_value`='',`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='longtext',`column_key`='',`column_type`='longtext',`character_maximum_length`='4294967295',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_reference_tables' and `column_name`='columnsdef';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_reference_tables','constraint_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`is_primary`='0' ,`syncable`='0',`update_value`='',`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_reference_tables' and `column_name`='constraint_name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_reference_tables','reference_table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`is_primary`='1' ,`syncable`='0',`update_value`='',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_reference_tables' and `column_name`='reference_table_name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_reference_tables','searchable')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`is_primary`='0' ,`syncable`='0',`update_value`='',`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_reference_tables' and `column_name`='searchable';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_reference_tables','table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`is_primary`='1' ,`syncable`='0',`update_value`='',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_reference_tables' and `column_name`='table_name';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_reference_tables')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='0',`append`='0',`existsreal`='1' where `role`='administration' and `table_name`='ds_reference_tables';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_reference_tables')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_reference_tables';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_reference_tables','reference_table_name','DE','reference_table_name','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_reference_tables' and `column_name`='reference_table_name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_reference_tables','table_name','DE','table_name','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_reference_tables' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_reference_tables','active','DE','Aktiv')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_reference_tables' and `column_name`='active' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_reference_tables','autosync','DE','auto. Sync')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_reference_tables' and `column_name`='autosync' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_reference_tables','columnsdef','DE','columnsdef')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_reference_tables' and `column_name`='columnsdef' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_reference_tables','constraint_name','DE','Name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_reference_tables' and `column_name`='constraint_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_reference_tables','reference_table_name','DE','reference_table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_reference_tables' and `column_name`='reference_table_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_reference_tables','table_name','DE','Tabelle')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_reference_tables' and `column_name`='table_name' and `language`='DE';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_reference_tables','ds')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_reference_tables__reference_table_name\":\"ds__table_name\"}',`active`='1',`constraint_name`='fk_ds_reference_tables_r_ds',`searchable`='0',`autosync`='1' where `table_name`='ds_reference_tables' and `reference_table_name`='ds';
-- END DS ds_reference_tables




END //
-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_renderer.sql 

DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_RENDERER` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_RENDERER`()
    MODIFIES SQL DATA
BEGIN


IF (
  NOT EXISTS(
    select * from INFORMATION_SCHEMA.tables
    WHERE table_schema = database()
    and table_name = 'ds_renderer'
  )
) THEN 

    create table if not exists `ds_pug_templates`(
        id varchar(50) not null primary key,
        name varchar(255) not null,
        note longtext,
        template longtext not null
    )   ;
    create table if not exists ds_renderer (
        table_name varchar(128) not null,
        pug_template varchar(50) not null,

        label varchar(100) not null,

        primary key (table_name,pug_template),

        constraint `fk_ds_renderer_table_name`
        foreign key (table_name)
        references ds(table_name)
        on delete cascade
        on update cascade,

        constraint `fk_ds_renderer_pug_template`
        foreign key (pug_template)
        references ds_pug_templates(id)
        on delete cascade
        on update cascade
    );

    call UPDATE_DS_SETUP( );
END IF;



call addFieldIfNotExists('ds_renderer','orientation','varchar(20) default \'portrait\' ');
call addFieldIfNotExists('ds_renderer','useremote','tinyint default 0');

-- BEGIN DS ds_pug_templates
-- NAME: PUG-Templates

insert into `ds`
                  (`table_name`)
                  values
                  ('ds_pug_templates')
                  on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='PUG-Templates',`reorderfield`='',`use_history`='0',`searchfield`='name',`displayfield`='name',`sortfield`='name',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`read_table`='',`cssstyle`='',`class_name`='Datenstamm',`special_add_panel`='',`existsreal`='1',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`combined`='0',`phpexporterfilename`='',`default_pagesize`='100',`allowform`='1',`character_set_name`='',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_pug_templates';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_pug_templates','id')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(50)',`character_maximum_length`='50',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_pug_templates' and `column_name`='id';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_pug_templates','name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_pug_templates' and `column_name`='name';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_pug_templates','note')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='longtext',`column_key`='',`column_type`='longtext',`character_maximum_length`='4294967295',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_pug_templates' and `column_name`='note';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_pug_templates','template')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`data_type`='longtext',`column_key`='',`column_type`='longtext',`character_maximum_length`='4294967295',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_pug_templates' and `column_name`='template';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('administration','ds_pug_templates')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='1',`delete`='1',`append`='1',`existsreal`='0' where `role`='administration' and `table_name`='ds_pug_templates';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('_default_','ds_pug_templates')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='ds_pug_templates';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_pug_templates','id','DE','Template-Kennung','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_pug_templates' and `column_name`='id' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_pug_templates','name','DE','Name','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_pug_templates' and `column_name`='name' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_pug_templates','note','DE','Anmerkungen','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textarea',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_pug_templates' and `column_name`='note' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_pug_templates','template','DE','Template','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='tualocodejade',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_pug_templates' and `column_name`='template' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_pug_templates','id','DE','Template-Kennung')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_pug_templates' and `column_name`='id' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_pug_templates','name','DE','Name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_pug_templates' and `column_name`='name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_pug_templates','note','DE','Hinweis')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_pug_templates' and `column_name`='note' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_pug_templates','template','DE','Template')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_pug_templates' and `column_name`='template' and `language`='DE';
insert into `ds_dropdownfields`
                  (`table_name`,`name`)
                  values
                  ('ds_pug_templates','id')
                  on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='id',`displayfield`='name',`filterconfig`='' where `table_name`='ds_pug_templates' and `name`='id';
insert into `ds_dropdownfields`
                  (`table_name`,`name`)
                  values
                  ('ds_pug_templates','id')
                  on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='id',`displayfield`='name',`filterconfig`='' where `table_name`='ds_pug_templates' and `name`='id';
insert into `ds_nm_tables`
                  (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                  values
                  ('ds_pug_templates','fk_ds_renderer_pug_template','fk_ds_renderer_table_name','DE','')
                  on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds',`intermedia_table_name`='ds_renderer',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_renderer__pug_template\":\"ds_pug_templates__id\"}',`referenced_table_json`='{\"ds_renderer__table_name\":\"ds__table_name\"}' where `table_name`='ds_pug_templates' and `constraint_name`='fk_ds_renderer_pug_template' and `referenced_constraint_name`='fk_ds_renderer_table_name';
-- END DS ds_pug_templates




-- BEGIN DS ds_renderer
-- NAME: Renderer

insert into `ds`
                  (`table_name`)
                  values
                  ('ds_renderer')
                  on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Renderer',`reorderfield`='',`use_history`='0',`searchfield`='label',`displayfield`='label',`sortfield`='label',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`read_table`='',`cssstyle`='',`class_name`='Datenstamm-Berichte',`special_add_panel`='',`existsreal`='1',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`combined`='0',`phpexporterfilename`='',`default_pagesize`='100',`allowform`='1',`character_set_name`='',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_renderer';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_renderer','label')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(100)',`character_maximum_length`='100',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_renderer' and `column_name`='label';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_renderer','pug_template')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(50)',`character_maximum_length`='50',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_renderer' and `column_name`='pug_template';
insert into `ds_column`
                  (`table_name`,`column_name`)
                  values
                  ('ds_renderer','table_name')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0',`writeable`='1',`note`='' where `table_name`='ds_renderer' and `column_name`='table_name';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('administration','ds_renderer')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='1',`delete`='1',`append`='1',`existsreal`='0' where `role`='administration' and `table_name`='ds_renderer';
insert into `ds_access`
                  (`role`,`table_name`)
                  values
                  ('_default_','ds_renderer')
                  on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='ds_renderer';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_renderer','label','DE','Text','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_renderer' and `column_name`='label' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_renderer','pug_template','DE','Template','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='combobox_ds_pug_templates_id',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_renderer' and `column_name`='pug_template' and `language`='DE';
insert into `ds_column_form_label`
                  (`table_name`,`column_name`,`language`,`label`,`field_path`)
                  values
                  ('ds_renderer','table_name','DE','Tabelle','Allgemein')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_renderer' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_renderer','label','DE','Text')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='2',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_renderer' and `column_name`='label' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_renderer','pug_template','DE','Template')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='column_ds_pug_templates_id',`editor`='',`position`='1',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_renderer' and `column_name`='pug_template' and `language`='DE';
insert into `ds_column_list_label`
                  (`table_name`,`column_name`,`language`,`label`)
                  values
                  ('ds_renderer','table_name','DE','Tabelle')
                  on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`renderer`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_renderer' and `column_name`='table_name' and `language`='DE';
insert into `ds_reference_tables`
                  (`table_name`,`reference_table_name`)
                  values
                  ('ds_renderer','ds')
                  on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_renderer__table_name\":\"ds__table_name\"}',`constraint_name`='fk_ds_renderer_table_name',`active`='0',`searchable`='0',`autosync`='1' where `table_name`='ds_renderer' and `reference_table_name`='ds';
insert into `ds_reference_tables`
                  (`table_name`,`reference_table_name`)
                  values
                  ('ds_renderer','ds_pug_templates')
                  on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_renderer__pug_template\":\"ds_pug_templates__id\"}',`constraint_name`='fk_ds_renderer_pug_template',`active`='0',`searchable`='0',`autosync`='1' where `table_name`='ds_renderer' and `reference_table_name`='ds_pug_templates';
-- END DS ds_renderer





-- call UPDATE_DS_SETUP( );
END //



-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_renderer_stylesheet.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_RENDERER_STYLESHEET` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_RENDERER_STYLESHEET`()
    MODIFIES SQL DATA
BEGIN
    IF (
        NOT EXISTS(
            select * from INFORMATION_SCHEMA.tables
            WHERE table_schema = database()
            and table_name = 'ds_renderer_stylesheet'
        )
    ) THEN 

        create table `ds_renderer_stylesheet_groups`(
            `id` int(11) NOT NULL DEFAULT 0,
            `name` varchar(255) DEFAULT NULL,
            PRIMARY KEY (`id`),
            UNIQUE KEY `uidx_ds_renderer_stylesheet_groups_name` (`name`)
        ) COMMENT='possible groups for css stylesheets';




        create table `ds_renderer_stylesheet`(
            
            `classname` varchar(50) not null,
            `group` int(11) NOT NULL DEFAULT 0,
            
            PRIMARY KEY (`classname`),
            KEY `idx_ds_renderer_stylesheet_group` (`group`),
            
            CONSTRAINT `fk_ds_renderer_stylesheet_group` 
            FOREIGN KEY (`group`) 
            REFERENCES `ds_renderer_stylesheet_groups` (`id`) 
            ON DELETE CASCADE ON UPDATE CASCADE
        );

    
        create table `ds_renderer_stylesheet_attributes`(
            
            `classname` varchar(50) not null,
            `attribute` varchar(50) not null,

            `values` text not null,
            
            PRIMARY KEY (`classname`,`attribute`),
            KEY `idx_ds_renderer_stylesheet_attributes_classname` (`classname`),
            KEY `idx_ds_renderer_stylesheet_attributes_attribute` (`attribute`),
            
            CONSTRAINT `fk_ds_renderer_stylesheet_attributes_classname` 
            FOREIGN KEY (`classname`) 
            REFERENCES `ds_renderer_stylesheet` (`classname`) 
            ON DELETE CASCADE ON UPDATE CASCADE
            
            
        );

        
        INSERT INTO `ds_renderer_stylesheet_groups` VALUES (1,'LETTER-ISO-5008') on duplicate key update `id`=values(`id`);
        INSERT INTO `ds_renderer_stylesheet` (`classname`,`group`) VALUES ('address',1 ),
        ('page',1 ),
        ('pagebackground',1 ),
        ('pagecontent',1 ),
        ('pageinfo',1 ),
        ('pagemargins',1 ),
        ('senderaddress',1)  
        on duplicate key update `group`=values(`group`);

        INSERT INTO `ds_renderer_stylesheet_attributes` (`classname`,`attribute`,`values`) 
        VALUES 
        ('address','border','1px solid black' ),
        ('address','font-size','1em' ),
        ('address','height','27.3mm' ),
        ('address','left','20mm' ),
        ('address','overflow','hidden'),
                ('address','padding-left','5mm' ),
        ('address','position','fixed' ),
        ('address','top','44.7mm' ),
        ('address','width','85mm' ),
        ('page','font-family','DejaVu Sans'),
                ('page','font-size','10pt' ),
        ('page','margin-bottom','0mm' ),
        ('page','margin-left','0mm' ),
        ('page','margin-right','0mm' ),
        ('page','margin-top','0mm'),
                ('pagebackground','bottom','0mm' ),
        ('pagebackground','left','0mm' ),
        ('pagebackground','position','fixed' ),
        ('pagebackground','right','0mm'),
                ('pagebackground','top','0mm' ),
        ('pagebackground','z-index','-1' ),
        ('pagecontent','border','1px dashed black' ),
        ('pagecontent','margin-left','0mm'),
                ('pagecontent','margin-right','0mm' ),
        ('pagecontent','margin-top','95.46' ),
        ('pageinfo','border','1px solid green' ),
        ('pageinfo','margin-right','10mm' ),
        ('pageinfo','margin-top','32mm' ),
        ('pageinfo','position','fixed'),
                ('pageinfo','width','75mm' ),
        ('pagemargins','padding-bottom','5mm' ),
        ('pagemargins','padding-left','25mm' ),
        ('pagemargins','padding-right','15mm' ),
        ('pagemargins','padding-top','10mm' ),
        ('senderaddress','font-size','6pt' ),
        ('senderaddress','top','32mm')
        on duplicate key update `classname`=values(`classname`);


    END IF;


    create or replace view `ds_renderer_stylesheet_attributes_dd` as
    select `attribute` from `ds_renderer_stylesheet_attributes` group by `attribute`;

    create or replace view `view_readtable_ds_renderer_stylesheet` as
    select 

        `ds_renderer_stylesheet`.`group`,
        `ds_renderer_stylesheet`.`classname`,

        concat(if(`ds_renderer_stylesheet`.`classname` = ':root', '', '.'),`ds_renderer_stylesheet`.`classname`,'{ ',
            group_concat(
                concat( `ds_renderer_stylesheet_attributes`.`attribute`,': ',`ds_renderer_stylesheet_attributes`.`values`)
                separator '; '
            ),
            '}'
        ) css

    from
    `ds_renderer_stylesheet` 
        left join `ds_renderer_stylesheet_attributes` 
            on `ds_renderer_stylesheet`.`classname` = `ds_renderer_stylesheet_attributes`.`classname`
    group by `ds_renderer_stylesheet`.`group`,
    `ds_renderer_stylesheet`.`classname`;


    create or replace view `view_readtable_ds_renderer_stylesheet_groups` as
    select
        `ds_renderer_stylesheet_groups`.`id`,
        `ds_renderer_stylesheet_groups`.`name`,
        group_concat( css order by `view_readtable_ds_renderer_stylesheet`.`classname` separator ' ' ) css

    from 
        `ds_renderer_stylesheet_groups`
        left join `view_readtable_ds_renderer_stylesheet` 
            on `view_readtable_ds_renderer_stylesheet`.`group` = `ds_renderer_stylesheet_groups`.`id`
    group by `ds_renderer_stylesheet_groups`.`id`,
    `ds_renderer_stylesheet_groups`.`name`;






    create table if not exists ds_renderer_stylesheet_groups_assign (
        
        `pug_id` varchar(50) not null,
        `group_id` int(11) NOT NULL DEFAULT 0,
        `active`tinyint default 0,

        primary key (`pug_id`,`group_id`),
        
        CONSTRAINT `fk_ds_renderer_stylesheet_groups_assign_group_id` 
        FOREIGN KEY (`group_id`) 
        REFERENCES `ds_renderer_stylesheet_groups` (`id`) 
        ON DELETE CASCADE ON UPDATE CASCADE,

        CONSTRAINT `fk_ds_renderer_stylesheet_groups_assign_pug_id` 
        FOREIGN KEY (`pug_id`) 
        REFERENCES `ds_pug_templates` (`id`) 
        ON DELETE CASCADE ON UPDATE CASCADE
        
    );

    create or replace view view_readtable_ds_renderer_stylesheet_groups_assign as 
    select 
        ds_pug_templates.id pug_id,
        ds_renderer_stylesheet_groups.id group_id,
        ifnull(ds_renderer_stylesheet_groups_assign.active,0) active,
        ifnull(view_readtable_ds_renderer_stylesheet_groups.css,'') css
    from 
        ds_renderer_stylesheet_groups
        join ds_pug_templates 
        left join ds_renderer_stylesheet_groups_assign
            on ds_pug_templates.id = ds_renderer_stylesheet_groups_assign.pug_id
            and ds_renderer_stylesheet_groups.id = ds_renderer_stylesheet_groups_assign.group_id
        left join view_readtable_ds_renderer_stylesheet_groups
            on ds_renderer_stylesheet_groups.id = view_readtable_ds_renderer_stylesheet_groups.id
    ;


    



-- BEGIN DS ds_renderer
-- NAME: Renderer

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_renderer')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Renderer',`reorderfield`='',`use_history`='0',`searchfield`='label',`displayfield`='label',`sortfield`='label',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`syncable`='0',`cssstyle`='',`alternativeformxtype`='',`read_table`='',`class_name`='Datenstamm-Berichte',`special_add_panel`='',`existsreal`='1',`character_set_name`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='',`combined`='0',`default_pagesize`='100',`allowForm`='1',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_renderer';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_renderer','label')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(100)',`character_maximum_length`='100',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_renderer' and `column_name`='label';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_renderer','orientation')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='NO',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(20)',`character_maximum_length`='20',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_renderer' and `column_name`='orientation';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_renderer','pug_template')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(50)',`character_maximum_length`='50',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_renderer' and `column_name`='pug_template';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_renderer','table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_renderer' and `column_name`='table_name';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_renderer')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='1',`delete`='1',`append`='1',`existsreal`='0' where `role`='administration' and `table_name`='ds_renderer';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_renderer')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='ds_renderer';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_renderer','label','DE','Text','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_renderer' and `column_name`='label' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_renderer','pug_template','DE','Template','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='combobox_ds_pug_templates_id',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_renderer' and `column_name`='pug_template' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_renderer','table_name','DE','Tabelle','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_renderer' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_renderer','label','DE','Text')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='2',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_renderer' and `column_name`='label' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_renderer','pug_template','DE','Template')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='column_ds_pug_templates_id',`editor`='',`position`='1',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_renderer' and `column_name`='pug_template' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_renderer','table_name','DE','Tabelle')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_renderer' and `column_name`='table_name' and `language`='DE';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_renderer','ds')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_renderer__table_name\":\"ds__table_name\"}',`constraint_name`='fk_ds_renderer_table_name',`active`='0',`searchable`='0',`autosync`='1' where `table_name`='ds_renderer' and `reference_table_name`='ds';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_renderer','ds_pug_templates')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_renderer__pug_template\":\"ds_pug_templates__id\"}',`constraint_name`='fk_ds_renderer_pug_template',`active`='0',`searchable`='0',`autosync`='1' where `table_name`='ds_renderer' and `reference_table_name`='ds_pug_templates';
-- END DS ds_renderer


-- BEGIN DS ds_renderer_stylesheet
-- NAME: DS Renderer Stylesheet

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_renderer_stylesheet')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='DS Renderer Stylesheet',`reorderfield`='',`use_history`='0',`searchfield`='classname',`displayfield`='classname',`sortfield`='classname',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`syncable`='0',`cssstyle`='',`alternativeformxtype`='',`read_table`='',`class_name`='Datenstamm-Berichte',`special_add_panel`='',`existsreal`='1',`character_set_name`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='1',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_renderer_stylesheet';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_renderer_stylesheet','classname')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(50)',`character_maximum_length`='50',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_renderer_stylesheet' and `column_name`='classname';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_renderer_stylesheet','group')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`writeable`='1',`note`='',`data_type`='int',`column_key`='MUL',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_renderer_stylesheet' and `column_name`='group';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_renderer_stylesheet')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='1',`delete`='1',`append`='1',`existsreal`='0' where `role`='administration' and `table_name`='ds_renderer_stylesheet';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_renderer_stylesheet')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='ds_renderer_stylesheet';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_renderer_stylesheet','classname','DE','Klasse','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_renderer_stylesheet' and `column_name`='classname' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_renderer_stylesheet','group','DE','Stylegruppe','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_renderer_stylesheet' and `column_name`='group' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_renderer_stylesheet','classname','DE','Klasse')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='1',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_renderer_stylesheet' and `column_name`='classname' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_renderer_stylesheet','group','DE','Stylegruppe')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_renderer_stylesheet' and `column_name`='group' and `language`='DE';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_renderer_stylesheet','ds_renderer_stylesheet_groups')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_renderer_stylesheet__group\":\"ds_renderer_stylesheet_groups__id\"}',`constraint_name`='fk_ds_renderer_stylesheet_group',`active`='1',`searchable`='0',`autosync`='1' where `table_name`='ds_renderer_stylesheet' and `reference_table_name`='ds_renderer_stylesheet_groups';
-- END DS ds_renderer_stylesheet


-- BEGIN DS ds_renderer_stylesheet_attributes
-- NAME: Attribute

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_renderer_stylesheet_attributes')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Attribute',`reorderfield`='',`use_history`='0',`searchfield`='attribute',`displayfield`='attribute',`sortfield`='attribute',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`syncable`='0',`cssstyle`='',`alternativeformxtype`='',`read_table`='',`class_name`='Datenstamm-Berichte',`special_add_panel`='',`existsreal`='1',`character_set_name`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='1',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_renderer_stylesheet_attributes';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_renderer_stylesheet_attributes','attribute')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(50)',`character_maximum_length`='50',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_renderer_stylesheet_attributes' and `column_name`='attribute';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_renderer_stylesheet_attributes','classname')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(50)',`character_maximum_length`='50',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_renderer_stylesheet_attributes' and `column_name`='classname';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_renderer_stylesheet_attributes','enclose')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='NO',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(50)',`character_maximum_length`='50',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_renderer_stylesheet_attributes' and `column_name`='enclose';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_renderer_stylesheet_attributes','values')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`writeable`='1',`note`='',`data_type`='text',`column_key`='',`column_type`='text',`character_maximum_length`='65535',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_renderer_stylesheet_attributes' and `column_name`='values';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_renderer_stylesheet_attributes')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='1',`delete`='1',`append`='1',`existsreal`='0' where `role`='administration' and `table_name`='ds_renderer_stylesheet_attributes';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_renderer_stylesheet_attributes')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='ds_renderer_stylesheet_attributes';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_renderer_stylesheet_attributes','attribute','DE','Attribut','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='combobox_ds_renderer_stylesheet_attributes_dd_attribute',`position`='1',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_renderer_stylesheet_attributes' and `column_name`='attribute' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_renderer_stylesheet_attributes','classname','DE','Klassename','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_renderer_stylesheet_attributes' and `column_name`='classname' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_renderer_stylesheet_attributes','enclose','DE','einbetten in','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='999',`hidden`='1',`active`='1',`allowempty`='0' where `table_name`='ds_renderer_stylesheet_attributes' and `column_name`='enclose' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_renderer_stylesheet_attributes','values','DE','Wert','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='2',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_renderer_stylesheet_attributes' and `column_name`='values' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_renderer_stylesheet_attributes','attribute','DE','Attribut')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='1',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_renderer_stylesheet_attributes' and `column_name`='attribute' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_renderer_stylesheet_attributes','classname','DE','Klassenname')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_renderer_stylesheet_attributes' and `column_name`='classname' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_renderer_stylesheet_attributes','enclose','DE','Einbetten in')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='999',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_renderer_stylesheet_attributes' and `column_name`='enclose' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_renderer_stylesheet_attributes','values','DE','Wert')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='2',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_renderer_stylesheet_attributes' and `column_name`='values' and `language`='DE';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_renderer_stylesheet_attributes','ds_renderer_stylesheet')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_renderer_stylesheet_attributes__classname\":\"ds_renderer_stylesheet__classname\"}',`constraint_name`='fk_ds_renderer_stylesheet_attributes_classname',`active`='1',`searchable`='0',`autosync`='1' where `table_name`='ds_renderer_stylesheet_attributes' and `reference_table_name`='ds_renderer_stylesheet';
-- END DS ds_renderer_stylesheet_attributes


-- BEGIN DS ds_renderer_stylesheet_attributes_dd
-- NAME: CSS Stylesheet Attribute

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_renderer_stylesheet_attributes_dd')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='CSS Stylesheet Attribute',`reorderfield`='',`use_history`='0',`searchfield`='attribute',`displayfield`='attribute',`sortfield`='attribute',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`syncable`='0',`cssstyle`='',`alternativeformxtype`='',`read_table`='',`class_name`='Datenstamm-Berichte',`special_add_panel`='',`existsreal`='1',`character_set_name`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='1',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_renderer_stylesheet_attributes_dd';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_renderer_stylesheet_attributes_dd','attribute')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(50)',`character_maximum_length`='50',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_renderer_stylesheet_attributes_dd' and `column_name`='attribute';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_renderer_stylesheet_attributes_dd')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='ds_renderer_stylesheet_attributes_dd';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_renderer_stylesheet_attributes_dd','attribute','DE','Attribut')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_renderer_stylesheet_attributes_dd' and `column_name`='attribute' and `language`='DE';
insert into `ds_dropdownfields`
                    (`table_name`,`name`)
                    values
                    ('ds_renderer_stylesheet_attributes_dd','attribute')
                    on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='attribute',`displayfield`='attribute',`filterconfig`='' where `table_name`='ds_renderer_stylesheet_attributes_dd' and `name`='attribute';
-- END DS ds_renderer_stylesheet_attributes_dd


-- BEGIN DS ds_renderer_stylesheet_groups
-- NAME: DS Renderer Gruppen

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_renderer_stylesheet_groups')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='DS Renderer Gruppen',`reorderfield`='',`use_history`='0',`searchfield`='name',`displayfield`='name',`sortfield`='name',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`syncable`='0',`cssstyle`='',`alternativeformxtype`='',`read_table`='view_readtable_ds_renderer_stylesheet_groups',`class_name`='Datenstamm-Berichte',`special_add_panel`='',`existsreal`='1',`character_set_name`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='1',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_renderer_stylesheet_groups';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_renderer_stylesheet_groups','css')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='',`writeable`='0',`note`='',`data_type`='longtext',`column_key`='',`column_type`='longtext',`character_maximum_length`='4294967295',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_renderer_stylesheet_groups' and `column_name`='css';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_renderer_stylesheet_groups','id')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='{#serial}',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`writeable`='1',`note`='',`data_type`='int',`column_key`='PRI',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_renderer_stylesheet_groups' and `column_name`='id';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_renderer_stylesheet_groups','name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='NO',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='UNI',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_renderer_stylesheet_groups' and `column_name`='name';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_renderer_stylesheet_groups')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='1',`delete`='1',`append`='1',`existsreal`='0' where `role`='administration' and `table_name`='ds_renderer_stylesheet_groups';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_renderer_stylesheet_groups')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='ds_renderer_stylesheet_groups';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_renderer_stylesheet_groups','id','DE','ID','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_renderer_stylesheet_groups' and `column_name`='id' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_renderer_stylesheet_groups','name','DE','Name','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_renderer_stylesheet_groups' and `column_name`='name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_renderer_stylesheet_groups','css','DE','css')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_renderer_stylesheet_groups' and `column_name`='css' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_renderer_stylesheet_groups','id','DE','ID')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='1',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_renderer_stylesheet_groups' and `column_name`='id' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_renderer_stylesheet_groups','name','DE','Name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_renderer_stylesheet_groups' and `column_name`='name' and `language`='DE';
insert into `ds_dropdownfields`
                    (`table_name`,`name`)
                    values
                    ('ds_renderer_stylesheet_groups','id')
                    on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='id',`displayfield`='name',`filterconfig`='' where `table_name`='ds_renderer_stylesheet_groups' and `name`='id';
insert into `ds_nm_tables`
                    (`table_name`,`constraint_name`,`referenced_constraint_name`,`language`,`label`)
                    values
                    ('ds_renderer_stylesheet_groups','fk_ds_renderer_stylesheet_groups_assign_group_id','fk_ds_renderer_stylesheet_groups_assign_pug_id','DE','')
                    on duplicate key update `table_name`=values(`table_name`),`constraint_name`=values(`constraint_name`),`referenced_constraint_name`=values(`referenced_constraint_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_nm_tables` set `referenced_table_name`='ds_pug_templates',`intermedia_table_name`='ds_renderer_stylesheet_groups_assign',`position`='99',`hidden`='0',`active`='0',`table_name_json`='{\"ds_renderer_stylesheet_groups_assign__group_id\":\"ds_renderer_stylesheet_groups__id\"}',`referenced_table_json`='{\"ds_renderer_stylesheet_groups_assign__pug_id\":\"ds_pug_templates__id\"}' where `table_name`='ds_renderer_stylesheet_groups' and `constraint_name`='fk_ds_renderer_stylesheet_groups_assign_group_id' and `referenced_constraint_name`='fk_ds_renderer_stylesheet_groups_assign_pug_id';
-- END DS ds_renderer_stylesheet_groups


-- BEGIN DS ds_renderer_stylesheet_groups_assign
-- NAME: CSS Zuweisungen

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_renderer_stylesheet_groups_assign')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='CSS Zuweisungen',`reorderfield`='',`use_history`='0',`searchfield`='group_id',`displayfield`='group_id',`sortfield`='group_id',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`syncable`='0',`cssstyle`='',`alternativeformxtype`='',`read_table`='view_readtable_ds_renderer_stylesheet_groups_assign',`class_name`='Datenstamm-Berichte',`special_add_panel`='',`existsreal`='1',`character_set_name`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='1',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_renderer_stylesheet_groups_assign';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_renderer_stylesheet_groups_assign','active')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`writeable`='1',`note`='',`data_type`='tinyint',`column_key`='',`column_type`='int(4)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_renderer_stylesheet_groups_assign' and `column_name`='active';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_renderer_stylesheet_groups_assign','css')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='',`writeable`='0',`note`='',`data_type`='longtext',`column_key`='',`column_type`='longtext',`character_maximum_length`='4294967295',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_renderer_stylesheet_groups_assign' and `column_name`='css';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_renderer_stylesheet_groups_assign','group_id')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`writeable`='1',`note`='',`data_type`='int',`column_key`='PRI',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_renderer_stylesheet_groups_assign' and `column_name`='group_id';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_renderer_stylesheet_groups_assign','pug_id')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(50)',`character_maximum_length`='50',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_renderer_stylesheet_groups_assign' and `column_name`='pug_id';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_renderer_stylesheet_groups_assign')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='1',`delete`='1',`append`='1',`existsreal`='0' where `role`='administration' and `table_name`='ds_renderer_stylesheet_groups_assign';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_renderer_stylesheet_groups_assign')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='ds_renderer_stylesheet_groups_assign';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_renderer_stylesheet_groups_assign','active','DE','Aktiv','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='checkbox',`position`='999',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_renderer_stylesheet_groups_assign' and `column_name`='active' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_renderer_stylesheet_groups_assign','group_id','DE','CSS Gruppe','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displaycombobox_ds_renderer_stylesheet_groups_id',`position`='0',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_renderer_stylesheet_groups_assign' and `column_name`='group_id' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_renderer_stylesheet_groups_assign','pug_id','DE','Template','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_renderer_stylesheet_groups_assign' and `column_name`='pug_id' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_renderer_stylesheet_groups_assign','active','DE','Aktiv')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='999',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_renderer_stylesheet_groups_assign' and `column_name`='active' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_renderer_stylesheet_groups_assign','css','DE','css')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_renderer_stylesheet_groups_assign' and `column_name`='css' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_renderer_stylesheet_groups_assign','group_id','DE','CSS Gruppe')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='column_ds_renderer_stylesheet_groups_id',`editor`='',`position`='0',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_renderer_stylesheet_groups_assign' and `column_name`='group_id' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_renderer_stylesheet_groups_assign','pug_id','DE','Template')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_renderer_stylesheet_groups_assign' and `column_name`='pug_id' and `language`='DE';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_renderer_stylesheet_groups_assign','ds_pug_templates')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_renderer_stylesheet_groups_assign__pug_id\":\"ds_pug_templates__id\"}',`constraint_name`='fk_ds_renderer_stylesheet_groups_assign_pug_id',`active`='1',`searchable`='0',`autosync`='1' where `table_name`='ds_renderer_stylesheet_groups_assign' and `reference_table_name`='ds_pug_templates';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_renderer_stylesheet_groups_assign','ds_renderer_stylesheet_groups')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_renderer_stylesheet_groups_assign__group_id\":\"ds_renderer_stylesheet_groups__id\"}',`constraint_name`='fk_ds_renderer_stylesheet_groups_assign_group_id',`active`='1',`searchable`='0',`autosync`='1' where `table_name`='ds_renderer_stylesheet_groups_assign' and `reference_table_name`='ds_renderer_stylesheet_groups';
-- END DS ds_renderer_stylesheet_groups_assign




END //
-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_searchfields.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_SEARCHFIELDS` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_SEARCHFIELDS`()
    MODIFIES SQL DATA
BEGIN

create or replace view `view_readtable_ds_searchfields` as

select 
    ifnull(ds_searchfields.active,0) active,
    ds_column.table_name,
    ds_column.column_name
from 
    ds_column
    left join ds_searchfields
        on (ds_searchfields.table_name,ds_searchfields.column_name)  = (ds_column.table_name,ds_column.column_name)
;


-- BEGIN DS ds_searchfields
-- NAME: durchsuchbare Felder

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_searchfields')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='durchsuchbare Felder',`reorderfield`='',`use_history`='0',`searchfield`='column_name',`displayfield`='column_name',`sortfield`='column_name',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`syncable`='0',`cssstyle`='',`alternativeformxtype`='',`read_table`='view_readtable_ds_searchfields',`class_name`='Datenstamm',`special_add_panel`='',`existsreal`='1',`character_set_name`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_searchfields';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_searchfields','active')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='NO',`writeable`='1',`note`='',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_searchfields' and `column_name`='active';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_searchfields','column_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_searchfields' and `column_name`='column_name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_searchfields','table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='ds_searchfields' and `column_name`='table_name';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_searchfields')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='1',`delete`='1',`append`='1',`existsreal`='0' where `role`='administration' and `table_name`='ds_searchfields';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_searchfields')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='ds_searchfields';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_searchfields','active','DE','aktiv','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='checkbox',`position`='999',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_searchfields' and `column_name`='active' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_searchfields','column_name','DE','Spalte','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_searchfields' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_searchfields','table_name','DE','Tabelle','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='ds_searchfields' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_searchfields','active','DE','aktiv')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='999',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_searchfields' and `column_name`='active' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_searchfields','column_name','DE','Spalte')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_searchfields' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_searchfields','table_name','DE','Tabelle')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='ds_searchfields' and `column_name`='table_name' and `language`='DE';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_searchfields','ds_column')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_searchfields__column_name\":\"ds_column__column_name\",\"ds_searchfields__table_name\":\"ds_column__table_name\"}',`constraint_name`='fk_ds_column_ds_searchfields',`active`='0',`searchable`='0',`autosync`='1' where `table_name`='ds_searchfields' and `reference_table_name`='ds_column';
-- END DS ds_searchfields







END //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_SEARCHFIELDS_INDEX` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_SEARCHFIELDS_INDEX`()
    MODIFIES SQL DATA
BEGIN
    
    DECLARE done INT DEFAULT FALSE;
    DECLARE str_table varchar(128);
    DECLARE str_column varchar(128);
    DECLARE u_active VARCHAR(64);

    DECLARE cur CURSOR FOR 
            select 
                ifnull(ds_searchfields.active,0) active,
                ds_column.table_name,
                ds_column.column_name
            from 
                ds_column
                left join ds_searchfields
                    on (ds_searchfields.table_name,ds_searchfields.column_name)  = (ds_column.table_name,ds_column.column_name)
            where ds_column.existsreal=1
            having active = 1
            ;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    OPEN cur;
    read_loop: LOOP
        FETCH cur INTO u_active,str_table,str_column;
        IF done THEN
            LEAVE read_loop;
        END IF;
        

        -- SET @sqlstmt = CONCAT('ALTER TABLE `',str_table,'` ADD FULLTEXT `fidx_',str_table,'_',str_column,'` (`',str_column,'`) ');
        SET @sqlstmt = CONCAT('call create__fulltext_index(database(),',QUOTE(str_table),',',QUOTE(CONCAT('fidx_',str_table,'_',str_column,'')),',',QUOTE(str_column),' )');

        insert `cron_queries_toexecute` (`id`,`createtime`,`query`) values (uuid(),now(),@sqlstmt);
--        select @sqlstmt;

--        PREPARE st FROM @sqlstmt;
--        EXECUTE st;
--        DEALLOCATE PREPARE st;
        SET done = false;


    END LOOP;
    CLOSE cur;
END //

-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_sync_data.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_SYNC_DATA` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_SYNC_DATA`()
    MODIFIES SQL DATA
BEGIN
-- BEGIN DS ds_sync_data
-- NAME: Sync.

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_sync_data')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Sync.',`reorderfield`='',`use_history`='0',`searchfield`='name',`displayfield`='name',`sortfield`='id',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='0',`writetable`='',`character_set_name`='utf8',`globalsearch`='0',`listselectionmodel`='rowmodel',`sync_view`='',`cssstyle`='',`read_table`='',`class_name`='Datenstamm',`special_add_panel`='cmp_ds_setup_adddssync',`existsreal`='1',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_sync_data';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_sync_data','checkssl')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='0',`note`='',`deferedload`='0',`writeable`='0' where `table_name`='ds_sync_data' and `column_name`='checkssl';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_sync_data','foreign_table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='0',`note`='',`deferedload`='0',`writeable`='0' where `table_name`='ds_sync_data' and `column_name`='foreign_table_name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_sync_data','get_oauth')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='0',`note`='',`deferedload`='0',`writeable`='0' where `table_name`='ds_sync_data' and `column_name`='get_oauth';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_sync_data','id')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='{#serial}',`default_max_value`='10000000',`default_min_value`='10000',`update_value`='',`is_primary`='1',`syncable`='0' ,`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='int',`column_key`='PRI',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='0',`note`='',`deferedload`='0',`writeable`='0' where `table_name`='ds_sync_data' and `column_name`='id';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_sync_data','msg_get_oauth')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='0',`note`='',`deferedload`='0',`writeable`='0' where `table_name`='ds_sync_data' and `column_name`='msg_get_oauth';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_sync_data','msg_set_oauth')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='0',`note`='',`deferedload`='0',`writeable`='0' where `table_name`='ds_sync_data' and `column_name`='msg_set_oauth';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_sync_data','name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='0',`note`='',`deferedload`='0',`writeable`='0' where `table_name`='ds_sync_data' and `column_name`='name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_sync_data','set_oauth')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='0',`note`='',`deferedload`='0',`writeable`='0' where `table_name`='ds_sync_data' and `column_name`='set_oauth';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_sync_data','sync_id')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='UNI',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='0',`note`='',`deferedload`='0',`writeable`='0' where `table_name`='ds_sync_data' and `column_name`='sync_id';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_sync_data','table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='MUL',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='0',`note`='',`deferedload`='0',`writeable`='0' where `table_name`='ds_sync_data' and `column_name`='table_name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_sync_data','url')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0' ,`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(100)',`character_maximum_length`='100',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='0',`note`='',`deferedload`='0',`writeable`='0' where `table_name`='ds_sync_data' and `column_name`='url';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_sync_data')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='1',`append`='1',`existsreal`='1' where `role`='administration' and `table_name`='ds_sync_data';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_sync_data')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_sync_data';
insert into `ds_addcommands`
                    (`table_name`,`xtype`)
                    values
                    ('ds_sync_data','ds_sync_command')
                    on duplicate key update `table_name`=values(`table_name`),`xtype`=values(`xtype`);
insert into `ds_addcommands`
                    (`table_name`,`xtype`)
                    values
                    ('ds_sync_data','ds_sync_command')
                    on duplicate key update `table_name`=values(`table_name`),`xtype`=values(`xtype`);
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_sync_data','checkssl','DE','checkssl','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_sync_data' and `column_name`='checkssl' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_sync_data','foreign_table_name','DE','foreign_table_name','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_sync_data' and `column_name`='foreign_table_name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_sync_data','get_oauth','DE','get_oauth','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_sync_data' and `column_name`='get_oauth' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_sync_data','id','DE','id','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_sync_data' and `column_name`='id' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_sync_data','msg_get_oauth','DE','msg_get_oauth','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_sync_data' and `column_name`='msg_get_oauth' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_sync_data','msg_set_oauth','DE','msg_set_oauth','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_sync_data' and `column_name`='msg_set_oauth' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_sync_data','name','DE','name','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_sync_data' and `column_name`='name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_sync_data','set_oauth','DE','set_oauth','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_sync_data' and `column_name`='set_oauth' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_sync_data','sync_id','DE','sync_id','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_sync_data' and `column_name`='sync_id' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_sync_data','table_name','DE','table_name','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_sync_data' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_sync_data','url','DE','url','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_sync_data' and `column_name`='url' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_sync_data','checkssl','DE','checkssl')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_sync_data' and `column_name`='checkssl' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_sync_data','foreign_table_name','DE','foreign_table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_sync_data' and `column_name`='foreign_table_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_sync_data','get_oauth','DE','get_oauth')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_sync_data' and `column_name`='get_oauth' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_sync_data','id','DE','id')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_sync_data' and `column_name`='id' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_sync_data','msg_get_oauth','DE','msg_get_oauth')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_sync_data' and `column_name`='msg_get_oauth' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_sync_data','msg_set_oauth','DE','msg_set_oauth')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_sync_data' and `column_name`='msg_set_oauth' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_sync_data','name','DE','name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_sync_data' and `column_name`='name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_sync_data','set_oauth','DE','set_oauth')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_sync_data' and `column_name`='set_oauth' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_sync_data','sync_id','DE','sync_id')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_sync_data' and `column_name`='sync_id' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_sync_data','table_name','DE','table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_sync_data' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_sync_data','url','DE','url')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_sync_data' and `column_name`='url' and `language`='DE';
insert into `ds_dropdownfields`
                    (`table_name`,`name`)
                    values
                    ('ds_sync_data','Name')
                    on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='id',`displayfield`='name',`filterconfig`='' where `table_name`='ds_sync_data' and `name`='Name';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_sync_data','ds')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_sync_data__table_name\":\"ds__table_name\"}',`constraint_name`='fk_ds_sync_data_ds',`active`='1',`searchable`='0',`autosync`='1' where `table_name`='ds_sync_data' and `reference_table_name`='ds';
-- END DS ds_sync_data



END //
-- SOURCE FILE: ./src//000-setup/005.ds.setup.ds_trigger.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_TRIGGER` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_TRIGGER`()
    MODIFIES SQL DATA
BEGIN


-- BEGIN DS ds_trigger
-- NAME: Trigger

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_trigger')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Trigger',`reorderfield`='',`use_history`='0',`searchfield`='table_name',`displayfield`='table_name',`sortfield`='table_name',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`character_set_name`='latin1',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`cssstyle`='',`read_table`='',`class_name`='Datenstamm',`special_add_panel`='',`existsreal`='1',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_trigger';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_trigger','program')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_trigger' and `column_name`='program';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_trigger','table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(128)',`character_maximum_length`='128',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_trigger' and `column_name`='table_name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_trigger','type')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='ds_trigger' and `column_name`='type';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_trigger')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='1',`append`='1',`existsreal`='1' where `role`='administration' and `table_name`='ds_trigger';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_trigger')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_trigger';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_trigger','program','DE','Programm','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='tualodstrigger',`position`='1',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_trigger' and `column_name`='program' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_trigger','table_name','DE','Datenstamm','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='combobox_ds_tabelle',`position`='2',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_trigger' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_trigger','type','DE','Typ','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='3',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_trigger' and `column_name`='type' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_trigger','program','DE','Programm')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='1',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_trigger' and `column_name`='program' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_trigger','table_name','DE','Tabelle')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='2',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_trigger' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_trigger','type','DE','Typ')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='3',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_trigger' and `column_name`='type' and `language`='DE';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_trigger','ds')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_trigger__table_name\":\"ds__table_name\"}',`constraint_name`='fk_ds_trigger_ds',`active`='1',`searchable`='0',`autosync`='1' where `table_name`='ds_trigger' and `reference_table_name`='ds';
-- END DS ds_trigger


END //

-- SOURCE FILE: ./src//000-setup/005.ds.setup.view_session_groups.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_VIEW_SESSION_GROUPS` //
CREATE PROCEDURE `UPDATE_DS_SETUP_VIEW_SESSION_GROUPS`()
    MODIFIES SQL DATA
BEGIN

-- BEGIN DS view_session_groups
-- NAME: Systemgruppen

insert into `ds`
                    (`table_name`)
                    values
                    ('view_session_groups')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Systemgruppen',`reorderfield`='',`use_history`='0',`searchfield`='group',`displayfield`='group',`sortfield`='group',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`syncable`='0',`cssstyle`='',`alternativeformxtype`='',`read_table`='',`class_name`='Datenstamm',`special_add_panel`='',`existsreal`='1',`character_set_name`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='view_session_groups';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('view_session_groups','group')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='0',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8mb4',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='view_session_groups' and `column_name`='group';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','view_session_groups')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='view_session_groups';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('view_session_groups','group','DE','Gruppe','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='view_session_groups' and `column_name`='group' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('view_session_groups','group','DE','Gruppe')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='view_session_groups' and `column_name`='group' and `language`='DE';
-- END DS view_session_groups




END //
-- SOURCE FILE: ./src//000-setup/005.ds.setup.view_session_users.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_VIEW_SESSION_USERS` //
CREATE PROCEDURE `UPDATE_DS_SETUP_VIEW_SESSION_USERS`()
    MODIFIES SQL DATA
BEGIN


-- BEGIN DS view_session_users
-- NAME: Benutzer

insert into `ds`
                    (`table_name`)
                    values
                    ('view_session_users')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Benutzer',`reorderfield`='',`use_history`='0',`searchfield`='anzeigename',`displayfield`='anzeigename',`sortfield`='anzeigename',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`syncable`='0',`cssstyle`='',`alternativeformxtype`='',`read_table`='',`class_name`='Datenstamm',`special_add_panel`='',`existsreal`='1',`character_set_name`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='view_session_users';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('view_session_users','anzeigename')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='',`writeable`='1',`note`='',`data_type`='text',`column_key`='',`column_type`='text',`character_maximum_length`='65535',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='view_session_users' and `column_name`='anzeigename';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('view_session_users','login')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='0',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='view_session_users' and `column_name`='login';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','view_session_users')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='view_session_users';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('view_session_users','anzeigename','DE','Anzeigename','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='1',`active`='0',`allowempty`='0' where `table_name`='view_session_users' and `column_name`='anzeigename' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('view_session_users','login','DE','Login','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='999',`hidden`='1',`active`='0',`allowempty`='0' where `table_name`='view_session_users' and `column_name`='login' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('view_session_users','anzeigename','DE','Anzeigename')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='view_session_users' and `column_name`='anzeigename' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('view_session_users','login','DE','Login')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='view_session_users' and `column_name`='login' and `language`='DE';
insert into `ds_dropdownfields`
                    (`table_name`,`name`)
                    values
                    ('view_session_users','login')
                    on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='login',`displayfield`='anzeigename',`filterconfig`='' where `table_name`='view_session_users' and `name`='login';
-- END DS view_session_users




END //
-- SOURCE FILE: ./src//000-setup/005.ds_setup.ds_column_list_export.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_DS_COLUMN_LIST_EXRORT` //
CREATE PROCEDURE `UPDATE_DS_SETUP_DS_COLUMN_LIST_EXRORT`()
    MODIFIES SQL DATA
BEGIN

-- BEGIN DS ds_column_list_export
-- NAME: Liste

insert into `ds`
                    (`table_name`)
                    values
                    ('ds_column_list_export')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Export-Liste',`reorderfield`='position',`use_history`='0',`searchfield`='column_name',`displayfield`='column_name',`sortfield`='position',`searchany`='1',`hint`='',`overview_tpl`='',`writetable`='',`sync_table`='',`globalsearch`='0',`sync_view`='',`read_table`='view_readtable_ds_column_list_export',`existsreal`='1',`combined`='0',`default_pagesize`='100',`cssstyle`='',`syncable`='0',`class_name`='Datenstamm',`special_add_panel`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`allowForm`='0',`character_set_name`='',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='ds_column_list_export';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_column_list_export','active')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='1',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`existsreal`='1',`deferedload`='0',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`writeable`='1',`note`='' where `table_name`='ds_column_list_export' and `column_name`='active';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_column_list_export','column_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='ds_column',`referenced_column_name`='column_name',`is_referenced`='NO',`existsreal`='1',`deferedload`='0',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(100)',`character_maximum_length`='100',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`writeable`='1',`note`='' where `table_name`='ds_column_list_export' and `column_name`='column_name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_column_list_export','label')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`existsreal`='1',`deferedload`='0',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`writeable`='1',`note`='' where `table_name`='ds_column_list_export' and `column_name`='label';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_column_list_export','language')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='DE',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`existsreal`='1',`deferedload`='0',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(3)',`character_maximum_length`='3',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`writeable`='1',`note`='' where `table_name`='ds_column_list_export' and `column_name`='language';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_column_list_export','position')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`referenced_table`='',`referenced_column_name`='',`is_referenced`='NO',`existsreal`='1',`deferedload`='0',`data_type`='int',`column_key`='',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`writeable`='1',`note`='' where `table_name`='ds_column_list_export' and `column_name`='position';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('ds_column_list_export','table_name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='0',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`referenced_table`='ds_column',`referenced_column_name`='table_name',`is_referenced`='NO',`existsreal`='1',`deferedload`='0',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(64)',`character_maximum_length`='64',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`writeable`='1',`note`='' where `table_name`='ds_column_list_export' and `column_name`='table_name';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','ds_column_list_export')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='0',`append`='0',`existsreal`='1' where `role`='administration' and `table_name`='ds_column_list_export';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','ds_column_list_export')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='ds_column_list_export';
insert into `ds_addcommands`
                    (`table_name`,`xtype`)
                    values
                    ('ds_column_list_export','ds_cloneformlabel_export_command')
                    on duplicate key update `table_name`=values(`table_name`),`xtype`=values(`xtype`);
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_column_list_export','active','DE','Aktiv','Allgemein/Angaben')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='checkbox',`position`='0',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_export' and `column_name`='active' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_column_list_export','column_name','DE','Spalte','Allgemein/Satzinformationen')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='4',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_export' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_column_list_export','label','DE','Label','Allgemein/Angaben')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='1',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_export' and `column_name`='label' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_column_list_export','language','DE','Sprache','Allgemein/Satzinformationen')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='5',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_export' and `column_name`='language' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_column_list_export','position','DE','Position','Allgemein/Angaben')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='number0',`position`='2',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_export' and `column_name`='position' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('ds_column_list_export','table_name','DE','Tabelle','Allgemein/Satzinformationen')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='3',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='ds_column_list_export' and `column_name`='table_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_column_list_export','active','DE','Aktiv')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='checkcolumn',`editor`='',`position`='0',`hidden`='0',`active`='1',`summaryrenderer`='',`summarytype`='',`sync_table`='',`sync_view`='',`writetable`='',`globalsearch`='0',`syncable`='0',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_list_export' and `column_name`='active' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_column_list_export','column_name','DE','Spalte')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='4',`hidden`='1',`active`='1',`summaryrenderer`='',`summarytype`='',`sync_table`='',`sync_view`='',`writetable`='',`globalsearch`='0',`syncable`='0',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_list_export' and `column_name`='column_name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_column_list_export','label','DE','Label')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='textfield',`position`='1',`hidden`='0',`active`='1',`summaryrenderer`='',`summarytype`='',`sync_table`='',`sync_view`='',`writetable`='',`globalsearch`='0',`syncable`='0',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_list_export' and `column_name`='label' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_column_list_export','language','DE','Sprache')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='5',`hidden`='1',`active`='1',`summaryrenderer`='',`summarytype`='',`sync_table`='',`sync_view`='',`writetable`='',`globalsearch`='0',`syncable`='0',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_list_export' and `column_name`='language' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_column_list_export','position','DE','Position')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='2',`hidden`='0',`active`='1',`summaryrenderer`='',`summarytype`='',`sync_table`='',`sync_view`='',`writetable`='',`globalsearch`='0',`syncable`='0',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_list_export' and `column_name`='position' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('ds_column_list_export','table_name','DE','Tabelle')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='3',`hidden`='1',`active`='1',`summaryrenderer`='',`summarytype`='',`sync_table`='',`sync_view`='',`writetable`='',`globalsearch`='0',`syncable`='0',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='ds_column_list_export' and `column_name`='table_name' and `language`='DE';
insert into `ds_reference_tables`
                    (`table_name`,`reference_table_name`)
                    values
                    ('ds_column_list_export','ds_column')
                    on duplicate key update `table_name`=values(`table_name`),`reference_table_name`=values(`reference_table_name`);
update `ds_reference_tables` set `columnsdef`='{\"ds_column_list_export__column_name\":\"ds_column__column_name\",\"ds_column_list_export__table_name\":\"ds_column__table_name\"}',`searchable`='0',`autosync`='1',`constraint_name`='fk_ds_column_list_export_ds_column',`active`='0' where `table_name`='ds_column_list_export' and `reference_table_name`='ds_column';




-- call UPDATE_DS_SETUP( );

END //
-- SOURCE FILE: ./src//000-setup/009.ds.setup.sql 

DELIMITER ;

create table if not exists setup_parameters(
    cmp varchar(64) not null,
    id varchar(64) not null,
    primary key (cmp,id),
    name varchar(255) not null,
    description varchar(4000) not null default ''
);


create table if not exists `setup` (  
    `id` varchar(64) NOT NULL,  
    `rolle` varchar(255) NOT NULL,  
    `cmp` varchar(64) NOT NULL,  
    `daten` longtext DEFAULT NULL,  
    `vererbbar` tinyint(1) DEFAULT NULL,  
    PRIMARY KEY (`id`,`rolle`,`cmp`),
    CONSTRAINT `fk_setup_setup_parameters`
    FOREIGN KEY (cmp,id) REFERENCES setup_parameters (cmp,id)
    ON DELETE CASCADE
    ON UPDATE CASCADE
) ;




alter table setup modify `id` varchar(64) NOT NULL;
alter table setup modify `cmp` varchar(64) NOT NULL;

insert into setup_parameters (cmp,id,name)
select cmp,id,id from setup group by cmp,id
on duplicate key update id=values(id);





call addForeignKeyIfNotExists ('setup','setup_parameters','fk_setup_setup_parameters','cmp,id','cmp,id','cascade','cascade');

DELIMITER //


DROP TRIGGER IF EXISTS `trigger_setup_bi` //

CREATE TRIGGER `trigger_setup_bi`
    BEFORE INSERT
    ON `setup` FOR EACH ROW
BEGIN
    insert into setup_parameters (cmp,id,name) values (NEW.cmp,NEW.id,NEW.id) ON DUPLICATE KEY UPDATE id=values(id);
END //  



DROP PROCEDURE IF EXISTS `CREATE_VIEW_SESSION_GROUPS` //
CREATE PROCEDURE `CREATE_VIEW_SESSION_GROUPS`()
    MODIFIES SQL DATA
BEGIN

    IF (
    NOT EXISTS(
        select * from INFORMATION_SCHEMA.tables
        WHERE table_schema = database()
        and table_name = 'view_session_groups'
    )
    ) THEN 

        CREATE VIEW  `view_session_groups` AS 
        select '_default_' AS `group`;

    END IF;

END //

DELIMITER ;

call CREATE_VIEW_SESSION_GROUPS();
DROP PROCEDURE IF EXISTS `CREATE_VIEW_SESSION_GROUPS`;

create or replace view view_readtable_setup as
select 
    concat(setup_parameters.`cmp`,'|',VIEW_SESSION_GROUPS.group) param,
    concat(setup_parameters.`cmp`,'|',VIEW_SESSION_GROUPS.group,'|',setup_parameters.`id`) paramkey,
    setup_parameters.`id`,
    VIEW_SESSION_GROUPS.group `rolle`,
    setup_parameters.`cmp`,
    ifnull(setup.`daten`,'') `daten`
from 
    VIEW_SESSION_GROUPS
    JOIN 
    setup_parameters 
    left join setup on
    (setup_parameters.id,setup_parameters.cmp,VIEW_SESSION_GROUPS.group) = (setup.id,setup.cmp,setup.rolle)
;


insert into `ds`                     (`table_name`,`title`,`reorderfield`,`use_history`,`searchfield`,`displayfield`,`sortfield`,`searchany`,`hint`,`overview_tpl`,`sync_table`,`writetable`,`globalsearch`,`listselectionmodel`,`sync_view`,`syncable`,`cssstyle`,`read_table`,`class_name`,`special_add_panel`,`existsreal`,`read_filter`,`listxtypeprefix`,`phpexporter`,`phpexporterfilename`,`combined`,`default_pagesize`,`allowForm`,`character_set_name`,`alternativeformxtype`,`listviewbaseclass`,`showactionbtn`)                     values                     ('setup_parameters','Setup-Parameter','','0','name','name','name','1','','','','','0','tualomultirowmodel','','0','','','Unklassifiziert','','1','','listview','XlsxWriter','{GUID}','0','100','0','','','Tualo.DataSets.ListView','1')                     on duplicate key update `table_name`=values(`table_name`);
insert into `ds_column`                     (`table_name`,`column_name`,`default_value`,`default_max_value`,`default_min_value`,`update_value`,`is_primary`,`syncable`,`referenced_table`,
`referenced_column_name`,`is_nullable`,`is_referenced`,`data_type`,`column_key`,`column_type`,`character_maximum_length`,`numeric_precision`,`numeric_scale`,`character_set_name`,`privileges`,`existsreal`,`deferedload`,`writeable`,`note`)                     values                     
('setup_parameters','cmp','','10000000','0','','1','0','','','NO','NO','varchar','PRI','varchar(64)','64','0','0','utf8','select,insert,update,references','1','0','1',''),
('setup_parameters','description','','10000000','0','','0','0','','','NO','NO','varchar','','varchar(4000)','4000','0','0','utf8','select,insert,update,references','1','0','1',''),
('setup_parameters','id','','10000000','0','','1','0','','','NO','NO','varchar','PRI','varchar(64)','64','0','0','utf8','select,insert,update,references','1','0','1',''),
('setup_parameters','name','','10000000','0','','0','0','','','NO','NO','varchar','','varchar(255)','255','0','0','utf8','select,insert,update,references','1','0','1','')                     on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
insert into `ds_access`                     (`role`,`table_name`,`read`,`write`,`delete`,`append`,`existsreal`)                     values                     ('_default_','setup_parameters','1','0','0','0','0')                     on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
insert into `ds_column_form_label`                     (`table_name`,`column_name`,`language`,`label`,`xtype`,`field_path`,`position`,`hidden`,`active`,`allowempty`)                     values                     ('setup_parameters','cmp','DE','cmp','displayfield','Allgemein','0','0','0','1'),('setup_parameters','id','DE','id','displayfield','Allgemein','0','0','0','1')                     on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`);
insert into `ds_column_list_label`                     (`table_name`,`column_name`,`language`,`label`,`xtype`,`editor`,`position`,`summaryrenderer`,`renderer`,`summarytype`,`hidden`,`active`,`filterstore`,`flex`,`direction`,`align`,`grouped`)                     values                     ('setup_parameters','cmp','DE','cmp','gridcolumn','','0','','','','0','1','','1.00','ASC','left','0'),('setup_parameters','description','DE','description','gridcolumn','','999','','','','0','1','','1.00','ASC','left','0'),('setup_parameters','id','DE','id','gridcolumn','','0','','','','0','1','','1.00','ASC','left','0'),('setup_parameters','name','DE','name','gridcolumn','','999','','','','0','1','','1.00','ASC','left','0')                     on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`);
insert into `ds_dropdownfields`                     (`table_name`,`name`,`idfield`,`displayfield`,`filterconfig`)                     values                     ('setup_parameters','id','id','name','')                     on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);



DELIMITER //


DROP FUNCTION IF EXISTS `getSetup` //
CREATE FUNCTION `getSetup`(
	in_cmp varchar(64),
    in_key varchar(36)
)
RETURNS longtext
DETERMINISTIC
BEGIN
    DECLARE result longtext;

    select
        max( daten ) daten
    into 
        result
    from 
        view_readtable_setup
    where 
        id = in_key
        and cmp = in_cmp
    ;
    return result;
END //
-- SOURCE FILE: ./src//000-setup/099.ds.setup.update_ds_setup_all.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `UPDATE_DS_SETUP_ALL` //
CREATE PROCEDURE `UPDATE_DS_SETUP_ALL`()
    MODIFIES SQL DATA
BEGIN
call UPDATE_DS_SETUP( );

call debug_message('UPDATE_DS_SETUP_DS');
    call UPDATE_DS_SETUP_DS();
call debug_message('UPDATE_DS_SETUP_DS_ACCESS');
    call UPDATE_DS_SETUP_DS_ACCESS();
call debug_message('UPDATE_DS_SETUP_DS_ADDCOMMANDS');
    call UPDATE_DS_SETUP_DS_ADDCOMMANDS();

call debug_message('UPDATE_DS_SETUP_DS_CLASS');
    call UPDATE_DS_SETUP_DS_CLASS();
call debug_message('UPDATE_DS_SETUP_DS_ADDCOMMANDS');
    call UPDATE_DS_SETUP_DS_ADDCOMMANDS();
call debug_message('UPDATE_DS_SETUP_DS_ADDITIONAL_COLUMNS');
    call UPDATE_DS_SETUP_DS_ADDITIONAL_COLUMNS();
call debug_message('UPDATE_DS_SETUP_DS_COLUMN_FORM_LABEL');
    call UPDATE_DS_SETUP_DS_COLUMN_FORM_LABEL();
call debug_message('UPDATE_DS_SETUP_DS_COLUMN_LIST_LABEL');
    call UPDATE_DS_SETUP_DS_COLUMN_LIST_LABEL();
call debug_message('UPDATE_DS_SETUP_DS_COLUMN_TAGFIELDS');
    call UPDATE_DS_SETUP_DS_COLUMN_TAGFIELDS();
call debug_message('UPDATE_DS_SETUP_DS_COLUMN');
    call UPDATE_DS_SETUP_DS_COLUMN();
call debug_message('UPDATE_DS_SETUP_DS_CONTEXTMENU_PARAMS');
    call UPDATE_DS_SETUP_DS_CONTEXTMENU_PARAMS();

call debug_message('UPDATE_DS_SETUP_DS_CONTEXTMENU_GROUPS');
    call UPDATE_DS_SETUP_DS_CONTEXTMENU_GROUPS();
call debug_message('UPDATE_DS_SETUP_DS_CONTEXTMENU');
    call UPDATE_DS_SETUP_DS_CONTEXTMENU();
call debug_message('UPDATE_DS_SETUP_DS_DROPDOWNFIELDS');
    call UPDATE_DS_SETUP_DS_DROPDOWNFIELDS();
call debug_message('UPDATE_DS_SETUP_DS_NM_TABLES');
    call UPDATE_DS_SETUP_DS_NM_TABLES();
call debug_message('UPDATE_DS_SETUP_DS_PREVIEW_FORM_LABEL');
    call UPDATE_DS_SETUP_DS_PREVIEW_FORM_LABEL();
call debug_message('UPDATE_DS_SETUP_DS_COLUMN_FORM_PROPERTIES');
    call UPDATE_DS_SETUP_DS_COLUMN_FORM_PROPERTIES();

call debug_message('UPDATE_DS_SETUP_DS_RENDERER');
    call UPDATE_DS_SETUP_DS_RENDERER();

call debug_message('UPDATE_DS_SETUP_DS_CUSTOM_LISTVIEW_CONFIG');
    call UPDATE_DS_SETUP_DS_CUSTOM_LISTVIEW_CONFIG();

call debug_message('UPDATE_DS_SETUP_DATEIEN');
    call UPDATE_DS_SETUP_DATEIEN();

call debug_message('UPDATE_DS_SETUP_DS_TRIGGER');
    call UPDATE_DS_SETUP_DS_TRIGGER();

call debug_message('UPDATE_DS_SETUP_DS_PDF_REPORTS');
    call UPDATE_DS_SETUP_DS_PDF_REPORTS();

call debug_message('UPDATE_DS_SETUP_DS_COLUMN_LIST_EXPORT');
    call UPDATE_DS_SETUP_DS_COLUMN_LIST_EXPORT();

call debug_message('UPDATE_DS_SETUP_DS_REFERENCE_TABLES');
    call UPDATE_DS_SETUP_DS_REFERENCE_TABLES();

call debug_message('UPDATE_DS_SETUP_DS_SYNC_DATA');
    call UPDATE_DS_SETUP_DS_SYNC_DATA();

call debug_message('UPDATE_DS_SETUP_DS_DB_TYPES_FIELDTYPE');
    call UPDATE_DS_SETUP_DS_DB_TYPES_FIELDTYPE();
    
call debug_message('UPDATE_DS_SETUP_DS_RENDERER_STYLESHEET');
    call UPDATE_DS_SETUP_DS_RENDERER_STYLESHEET();

call debug_message('UPDATE_DS_SETUP_DS_COLUMN_RENDERER');
    call UPDATE_DS_SETUP_DS_COLUMN_RENDERER();

call debug_message('UPDATE_DS_SETUP_DS_COMBINED_TABLES');
    call UPDATE_DS_SETUP_DS_COMBINED_TABLES();

call debug_message('UPDATE_DS_SETUP_VIEW_SESSION_GROUPS');
    call UPDATE_DS_SETUP_VIEW_SESSION_GROUPS();

call debug_message('UPDATE_DS_SETUP_DS_SEARCHFIELDS');
    call UPDATE_DS_SETUP_DS_SEARCHFIELDS();

call debug_message('UPDATE_DS_SETUP_VIEW_SESSION_USERS');
    call UPDATE_DS_SETUP_VIEW_SESSION_USERS();    

    
call UPDATE_DS_SETUP( );
call UPDATE_DS_SETUP_DS_SEARCHFIELDS_INDEX();


update ds set listxtypeprefix='listview' where listxtypeprefix='';
update ds set listviewbaseclass='Tualo.DataSets.ListView' where listviewbaseclass='';


END  //

-- SOURCE FILE: ./src//000-setup/basic.sql 

-- SOURCE FILE: ./src//001-dso/001-dso-ddl.sql 
delimiter ;


create table if not exists ds_object (
    id varchar(128) primary key,
    table_name varchar(128) not null,
    parent varchar(128) default null,

    key `idx_ds_object_parent` (`parent`),

    constraint `fk_ds_object_parent`
    foreign key (`parent`)
    references `ds_object`(`id`)
    on update cascade
    on delete set null

);


-- SOURCE FILE: ./src//001.query/000.view_ds_record_object_query.sql 
delimiter //


DROP FUNCTION IF EXISTS getOrderBy //
CREATE FUNCTION getOrderBy( in_table_name char(128) ) 
RETURNS longtext
DETERMINISTIC
BEGIN 
    DECLARE result_sql longtext;

    /*
    SELECT 
        concat(' ORDER BY ',group_concat(  concat(
        FIELDQUOTE(`column_name`),' ', `direction`) order by `position` ),'')
    INTO 
        result_sql
    FROM 
        ds_query
        join ds_query_order_by
            on ds_query.queryid = ds_query_order_by.queryid
            and ds_query.queryid = in_queryid;
    */

    IF (result_sql is null) THEN
        select 
            concat(' ORDER BY ',/*'`',ds.table_name,'`.`',*/FIELDQUOTE(ds.sortfield),'') fieldtext

        into
            result_sql
        from 
            ds
            join ds_column
            on ds.table_name = ds_column.table_name
            and ds_column.column_name = ds.sortfield
        where 
            ds.table_name = in_table_name
            and ds.sortfield is not null
            and ds.sortfield <> ''
        ;
    END IF;

    RETURN ifnull(result_sql,'');
END //

/*
delimiter ;

create or replace view view_ds_record_object_query as 
select 
    ds_column_list_label.table_name,
    concat(
        'json_object(',

            quote('__table_name'),',',quote(ds_column_list_label.table_name),', ',
            quote('__displayfield'),',', ifnull( ds.displayfield,'""') ,', ',
            quote('__id'),',', getDSKeySQL(ds_column_list_label.table_name) ,', ',
            quote('__rownumber'),', ROW_NUMBER() OVER ( ', getOrderBy( ds_column_list_label.table_name), ')   , ',

            group_concat( concat( quote( concat( ds_column_list_label.table_name,'__',ds_column_list_label.column_name)) ,",",ds_column_list_label.column_name  ) ),
        ')'
    ) object_query
from 
	ds_column 
    join ds_column_list_label 
    	on (ds_column.table_name,ds_column.column_name) =  (ds_column_list_label.table_name,ds_column_list_label.column_name) 
        and ds_column.existsreal=1
        and ds_column_list_label.active=1
    join ds
        on ds.table_name = ds_column.table_name
group by ds_column_list_label.table_name

;
*/
-- SOURCE FILE: ./src//001.test.ddl.sql 

/*
DELIMITER ;
drop database if exists testds;
create database testds;

use testds;
create table testdaten(
    id integer primary key,
    name varchar(100) not null,
    datum date,
    datumzeit datetime,
    zeit time,
    checkde tinyint default 1,
    brutto fixed(15,6)
);


DELIMITER //
CREATE PROCEDURE fillTestdataTable(IN NumRows INT)
BEGIN
    DECLARE i INT;
    SET i = 1;
    START TRANSACTION;
    WHILE i <= NumRows DO
        INSERT INTO testdaten (id,name,datum,datumzeit,zeit,brutto)  select i id, concat('Name ',i) name,date_add(current_date, interval (RAND()*-100) DAY) dt, now(), CURRENT_TIME,RAND() br;
        SET i = i + 1;
    END WHILE;
    COMMIT;
END//
DELIMITER ;

call fillTestdataTable(10000);
*/
-- SOURCE FILE: ./src//003.debug_message.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `debug_message` //
CREATE PROCEDURE `debug_message`( in msg VARCHAR(4000))
MODIFIES SQL DATA
COMMENT '
Print messages if the session variable @debug is set to 1.
'
BEGIN
    IF @debug=1 THEN
        select msg debug_message;
    END IF;
END //

-- SOURCE FILE: ./src//003.doubleqoute.sql 
DELIMITER //



DROP FUNCTION IF EXISTS `DOUBLEQUOTE` //
CREATE FUNCTION `DOUBLEQUOTE`(txt longtext)
RETURNS longtext
NO SQL
BEGIN 
    RETURN CONCAT('"',REPLACE(txt,'"','\"'),'"');
END //

-- SOURCE FILE: ./src//004.ds.run.procs.sql 
-- DELIMITER ;

-- call UPDATE_DS_SETUP( database() );
-- select count(*) ds_count from ds;
-- select count(*) ds_column_count from ds_column;

-- SOURCE FILE: ./src//010.ds.ddl.sql 
DELIMITER ;

DROP TABLE IF  EXISTS `ds_query_values_varchar`;
DROP TABLE IF  EXISTS `ds_query_values_double`;
DROP TABLE IF  EXISTS `ds_query_values_datetime`;
DROP TABLE IF  EXISTS `ds_query_values_date`;
DROP TABLE IF  EXISTS `ds_query_values_time`;
DROP TABLE IF  EXISTS `ds_query_values_bigint`;

DROP TABLE IF  EXISTS `ds_query_filter_varchar`;
DROP TABLE IF  EXISTS `ds_query_filter_double`;
DROP TABLE IF  EXISTS `ds_query_filter_datetime`;
DROP TABLE IF  EXISTS `ds_query_filter_date`;
DROP TABLE IF  EXISTS `ds_query_filter_time`;
DROP TABLE IF  EXISTS `ds_query_filter_bigint`;

DROP TABLE IF  EXISTS `ds_query_order_by`;
DROP TABLE IF  EXISTS `ds_query_filter`;
DROP TABLE IF  EXISTS `ds_query_id_value`;
DROP TABLE IF  EXISTS `ds_query_values`;
DROP TABLE IF  EXISTS `ds_query_filter_id`;


DROP TABLE IF  EXISTS DS_REQUEST_DATETIME_VALUES;
DROP TABLE IF  EXISTS  DS_REQUEST_DATE_VALUES;
DROP TABLE IF  EXISTS  DS_REQUEST_FLOAT_VALUES;
DROP TABLE IF  EXISTS  DS_REQUEST_INT_VALUES;
DROP TABLE IF  EXISTS  DS_REQUEST_STR_VALUES;
DROP TABLE IF  EXISTS  DS_REQUEST_TIME_VALUES;

DROP TABLE IF  EXISTS DS_QUERY_DATETIME_VALUES;
DROP TABLE IF  EXISTS DS_QUERY_DATE_VALUES;
DROP TABLE IF  EXISTS DS_QUERY_DATETIME_VALUES;
DROP TABLE IF  EXISTS DS_QUERY_FLOAT_VALUES;
DROP TABLE IF  EXISTS DS_QUERY_TIME_VALUES;
DROP TABLE IF  EXISTS DS_QUERY_STR_VALUES;
DROP TABLE IF  EXISTS DS_QUERY_INT_VALUES;

DROP TABLE IF  EXISTS DS_QUERY_SORTER;
DROP TABLE IF  EXISTS DS_QUERY_LIMITS;
DROP TABLE IF  EXISTS DS_QUERY_FLD;
DROP TABLE IF  EXISTS DS_REQUEST_FLD;

DROP TABLE IF EXISTS `ds_query_filter_sql`;


DROP TABLE IF  EXISTS `ds_query`;


CREATE TABLE IF NOT EXISTS `ds_query` (
	`queryid` varchar(36) not null primary key,
	`table_name` varchar(128) not null,
	`query_start` integer not null default 0,
	`query_limit` integer not null default 100,
	`createtime` datetime not null,
	`operation` varchar(36) not null,
	key `idx_ds_query_table_name`(`table_name`)
);


call addFieldIfNotExists('ds_query','operation','varchar(36) not null');

CREATE TABLE IF NOT EXISTS `ds_query_order_by` (
	`queryid` varchar(36) not null,
	`column_name` varchar(64) not null,
	`position` integer not null default 0,
	primary key (`queryid`,`column_name`),
	`direction` varchar(5) not null,
	
	constraint `fk_ds_query_order_by_ds_query` 
	foreign key (`queryid`)
	references `ds_query` (`queryid`)
	on delete cascade
	on update cascade
);


CREATE TABLE IF NOT EXISTS `ds_query_filter` (
	`filterid` varchar(36) not null primary key,
	`queryid` varchar(36) not null,
	`column_name` varchar(64) not null,
	`operation` varchar(15) not null,
	`location` varchar(10) not null default 'where',
	key `idx_ds_query_filter_queryid` (`queryid`),

  constraint `fk_ds_query_filter_ds_query` 
	foreign key (`queryid`)
	references `ds_query` (`queryid`)
	on delete cascade
	on update cascade
);



CREATE TABLE IF NOT EXISTS `ds_query_filter_id` (
	`queryid` varchar(36) not null primary key,
	`value` varchar(4000) not null,
	`operation` varchar(5) not null,
	`location` varchar(10) not null default 'where',
	key `idx_ds_query_filter_id_queryid` (`queryid`),

  constraint `fk_dds_query_filter_id_ds_query` 
	foreign key (`queryid`)
	references `ds_query` (`queryid`)
	on delete cascade
	on update cascade
);

CREATE TABLE IF NOT EXISTS `ds_query_filter_sql` (
	`queryid` varchar(36) not null primary key,
	`column_def` varchar(255) not null,
	`value` longtext,
	`operation` varchar(8) not null,
	`location` varchar(10) not null default 'where',
	key `idx_ds_query_filter_sqld_queryid` (`queryid`),

  constraint `fk_ds_query_filter_sql_ds_query` 
	foreign key (`queryid`)
	references `ds_query` (`queryid`)
	on delete cascade
	on update cascade
);

	
CREATE TABLE IF NOT EXISTS `ds_query_filter_date` (
	`filterid` varchar(36) not null,
	`filtervalue` date,
	primary key (`filterid`,`filtervalue`),
  constraint `fk_ds_query_filter_date_ds_query_filter` 
	foreign key (`filterid`)
	references `ds_query_filter` (`filterid`)
	on delete cascade
	on update cascade
);

	
CREATE TABLE IF NOT EXISTS `ds_query_filter_datetime` (
	`filterid` varchar(36) not null,
	`filtervalue` datetime,
	primary key (`filterid`,`filtervalue`),
  constraint `fk_ds_query_filter_datetime_ds_query_filter` 
	foreign key (`filterid`)
	references `ds_query_filter` (`filterid`)
	on delete cascade
	on update cascade
);

	
CREATE TABLE IF NOT EXISTS `ds_query_filter_time` (
	`filterid` varchar(36) not null,
	`filtervalue` time,
	primary key (`filterid`,`filtervalue`),
  constraint `fk_ds_query_filter_time_ds_query_filter` 
	foreign key (`filterid`)
	references `ds_query_filter` (`filterid`)
	on delete cascade
	on update cascade
);

CREATE TABLE IF NOT EXISTS `ds_query_filter_bigint` (
	`filterid` varchar(36) not null,
	`filtervalue` bigint,
	primary key (`filterid`,`filtervalue`),
  constraint `fk_ds_query_filter_bigint_ds_query_filter` 
	foreign key (`filterid`)
	references `ds_query_filter` (`filterid`)
	on delete cascade
	on update cascade
);


CREATE TABLE IF NOT EXISTS `ds_query_filter_double` (
	`filterid` varchar(36) not null,
	`filtervalue` double,
	primary key (`filterid`,`filtervalue`),
  constraint `fk_ds_query_filter_double_ds_query_filter` 
	foreign key (`filterid`)
	references `ds_query_filter` (`filterid`)
	on delete cascade
	on update cascade
);

CREATE TABLE IF NOT EXISTS `ds_query_filter_varchar` (
	`filterid` varchar(36) not null,
	`filtervalue` longtext,
	primary key (`filterid`),
  constraint `fk_ds_query_filter_varchar_ds_query_filter` 
	foreign key (`filterid`)
	references `ds_query_filter` (`filterid`)
	on delete cascade
	on update cascade
);





-- DS VALUES

CREATE TABLE IF NOT EXISTS `ds_query_values` (
	`valueid` varchar(36) not null primary key,
	`queryid` varchar(36) not null,
	`column_name` varchar(64) not null,
	`isdefault` bool not null default false,
	`isfunction` bool not null default false,
	key `idx_ds_values_queryid` (`queryid`),
	unique key `uidx_ds_values_queryid_column_name`(`queryid`,`column_name`),
  constraint `fk_ds_query_values_ds_query` 
	foreign key (`queryid`)
	references `ds_query` (`queryid`)
	on delete cascade
	on update cascade
);


CREATE TABLE IF NOT EXISTS `ds_query_id_value` (
	`queryid` varchar(36) not null primary key,
	`value` longtext not null,
  constraint `fk_ds_query_id_value_ds_query` 
	foreign key (`queryid`)
	references `ds_query` (`queryid`)
	on delete cascade
	on update cascade
);



CREATE TABLE IF NOT EXISTS `ds_query_values_date` (
	`valueid` varchar(36) not null,
	`value` date,
	primary key (`valueid`),
  constraint `fk_ds_query_values_date_ds_query_values` 
	foreign key (`valueid`)
	references `ds_query_values` (`valueid`)
	on delete cascade
	on update cascade
);

CREATE TABLE IF NOT EXISTS `ds_query_values_datetime` (
	`valueid` varchar(36) not null,
	`value` datetime,
	primary key (`valueid`),
  constraint `fk_ds_query_values_datetime_ds_query_values` 
	foreign key (`valueid`)
	references `ds_query_values` (`valueid`)
	on delete cascade
	on update cascade
);


CREATE TABLE IF NOT EXISTS `ds_query_values_time` (
	`valueid` varchar(36) not null,
	`value` time,
	primary key (`valueid`),
  constraint `fk_ds_query_values_time_ds_query_values` 
	foreign key (`valueid`)
	references `ds_query_values` (`valueid`)
	on delete cascade
	on update cascade
);


CREATE TABLE IF NOT EXISTS `ds_query_values_bigint` (
	`valueid` varchar(36) not null,
	`value` bigint,
	primary key (`valueid`),
  constraint `fk_ds_query_values_bigint_ds_query_values` 
	foreign key (`valueid`)
	references `ds_query_values` (`valueid`)
	on delete cascade
	on update cascade
);


CREATE TABLE IF NOT EXISTS `ds_query_values_double` (
	`valueid` varchar(36) not null,
	`value` double,
	primary key (`valueid`),
  constraint `fk_ds_query_values_double_ds_query_values` 
	foreign key (`valueid`)
	references `ds_query_values` (`valueid`)
	on delete cascade
	on update cascade
);


CREATE TABLE IF NOT EXISTS `ds_query_values_varchar` (
	`valueid` varchar(36) not null,
	`value` longtext,
	primary key (`valueid`),
  constraint `fk_ds_query_values_varchar_ds_query_values` 
	foreign key (`valueid`)
	references `ds_query_values` (`valueid`)
	on delete cascade
	on update cascade
);


CREATE TABLE IF NOT EXISTS `ds_dictionary`(
    `key` varchar(36),
    `lang` varchar(10),
    `msg` varchar(255),
    primary key (`key`,`lang`)
);
create or replace view `view_lang_ds_dictionary` as
select * from `ds_dictionary` where lang='DE';












-- SOURCE FILE: ./src//011.ds.functions.sql 
DELIMITER //
DROP FUNCTION IF EXISTS `FIELDQUOTE` //
CREATE FUNCTION `FIELDQUOTE`(in_str varchar(255))
RETURNS varchar(100)
DETERMINISTIC NO SQL
BEGIN
	RETURN concat('`',in_str,'`');
END //




DROP FUNCTION IF EXISTS `standardize_version` //
CREATE FUNCTION standardize_version(version VARCHAR(255)) RETURNS varchar(255) CHARSET latin1 DETERMINISTIC NO SQL
BEGIN
  DECLARE tail VARCHAR(255);
  DECLARE head, ret VARCHAR(255) DEFAULT NULL;

  SET tail = SUBSTRING_INDEX (version,'-',1);

  WHILE tail IS NOT NULL DO 
    SET head = SUBSTRING_INDEX(tail, '.', 1);
    SET tail = NULLIF(SUBSTRING(tail, LOCATE('.', tail) + 1), tail);
    SET ret = CONCAT_WS('.', ret, CONCAT(REPEAT('0', 3 - LENGTH(CAST(head AS UNSIGNED))), head));
  END WHILE;

  RETURN ret;
END //

-- SOURCE FILE: ./src//019.isDSOperationAllowed.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS `isDSOperationAllowed` //
CREATE PROCEDURE `isDSOperationAllowed` 
(
    in_table_name varchar(64),
    in_type varchar(64)
)
BEGIN
    DECLARE signal_message longtext;

    IF  (in_type='read') 
    AND (!EXISTS( SELECT max(`read`) x FROM ds_access WHERE `role` in (SELECT `group` FROM VIEW_SESSION_GROUPS) and table_name=in_table_name HAVING x=1 ) ) THEN
        select ifnull(max(msg), 'Lesen von `{table_name}` ist nicht erlaubt.') INTO signal_message from view_lang_ds_dictionary where `key`='DS_READ_NOT_ALLOWED';
        SET signal_message=replace(signal_message,'{table_name}',in_table_name);
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = signal_message;
    END IF;

    IF  (in_type='write')
        AND (!EXISTS( SELECT max(`write`) x FROM ds_access WHERE `role` in (SELECT `group` FROM VIEW_SESSION_GROUPS) and table_name=in_table_name HAVING x=1 ) )
    THEN
        select ifnull(max(msg), 'Schreiben in `{table_name}` ist nicht erlaubt.') INTO signal_message from view_lang_ds_dictionary where `key`='DS_WRITE_NOT_ALLOWED';
        SET signal_message=replace(signal_message,'{table_name}',in_table_name);
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = signal_message;
    END IF;

    IF  (in_type='append')
        AND (!EXISTS( SELECT max(`append`) x FROM ds_access WHERE `role` in (SELECT `group` FROM VIEW_SESSION_GROUPS) and table_name=in_table_name HAVING x=1 ) )
    THEN
        select ifnull(max(msg), 'Anlegen in `{table_name}` ist nicht erlaubt.') INTO signal_message from view_lang_ds_dictionary where `key`='DS_APPEND_NOT_ALLOWED';
        SET signal_message=replace(signal_message,'{table_name}',in_table_name);
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = signal_message;
    END IF;

    IF  (in_type='delete')
        AND (!EXISTS( SELECT max(`delete`) x FROM ds_access WHERE `role` in (SELECT `group` FROM VIEW_SESSION_GROUPS) and table_name=in_table_name HAVING x=1 ) )
    THEN
        select ifnull(max(msg), 'Löschen in `{table_name}` ist nicht erlaubt.') INTO signal_message from view_lang_ds_dictionary where `key`='DS_DELETE_NOT_ALLOWED';
        SET signal_message=replace(signal_message,'{table_name}',in_table_name);
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = signal_message;
    END IF;

END //

-- SOURCE FILE: ./src//020.createDSNewTableIndex.sql 


DROP PROCEDURE IF EXISTS createDSNewTableIndex //
CREATE PROCEDURE createDSNewTableIndex(IN tbl CHAR(64), IN col CHAR(64), OUT newnr BIGINT )
BEGIN

SET  @tbl = tbl;
SET  @col = col;

SET @RES_CALC_NEW_TABLEINDEX=0;
SET @RES_CALC_CHECK_TABLEINDEX=0;

SELECT default_max_value, default_min_value INTO @default_max_value,@default_min_value FROM `ds_column` where table_name= @tbl and column_name=@col;

call debug_message(concat(  'default_max_value ',@default_max_value  ) );
call debug_message(concat(  'default_min_value ',@default_min_value  ) );

SET @s = CONCAT('SELECT ifnull(max( cast( ',@col,' as signed integer) ),',@default_min_value,' ) + 1 INTO @RES_CALC_NEW_TABLEINDEX FROM ',@tbl,' where cast( ',@col,' as signed integer) >= ',@default_min_value,' and cast( ',@col,' as signed integer) < ',@default_max_value,' ' );
PREPARE stmt FROM @s;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

call debug_message(concat(  'RES_CALC_NEW_TABLEINDEX ',@RES_CALC_NEW_TABLEINDEX  ) );


SET @s = CONCAT('SELECT ',col,' into @RES_CALC_CHECK_TABLEINDEX FROM ',tbl,' where ',col,' =  @RES_CALC_NEW_TABLEINDEX  ' );

call debug_message(concat(  'S ',@s  ) );


PREPARE stmt FROM @s;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

call debug_message(concat(  'RES_CALC_NEW_TABLEINDEX ',@RES_CALC_NEW_TABLEINDEX  ) );

IF (@RES_CALC_CHECK_TABLEINDEX=@RES_CALC_NEW_TABLEINDEX) THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Der Nummerkreis ist erschöft';
END IF;

SET newnr = @RES_CALC_NEW_TABLEINDEX;

END
//


-- SOURCE FILE: ./src//099.dateien.sql 
delimiter ;

create table if not exists `dateien` (
    name varchar(100) primary key,
    datei int(11) default 0,
    key `idx_dateien_datei` (`datei`)
);

CREATE TABLE if not exists `dateien_doc` (
  `name` varchar(100) NOT NULL,
  `doc_id` int(11) NOT NULL,
  `mime` varchar(150) NOT NULL,
  `ext` varchar(50) NOT NULL,
  `column_name` varchar(50) NOT NULL,
  `original_filename` varchar(255) DEFAULT NULL,
  `filesize` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`doc_id`),
  KEY `fk_dateien_doc` (`name`),
  CONSTRAINT `fk_dateien_doc` FOREIGN KEY (`doc_id`) REFERENCES `dateien` (`datei`) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE if not exists `dateien_docdata` (
  `doc_id` int(11) NOT NULL,
  `page` int(11) NOT NULL DEFAULT 0,
  `data` longtext DEFAULT NULL,
  PRIMARY KEY (`doc_id`,`page`),
  CONSTRAINT `dateien_docdata_ibfk_1` FOREIGN KEY (`doc_id`) REFERENCES `dateien_doc` (`doc_id`) ON DELETE CASCADE ON UPDATE CASCADE
);


insert into `ds`                     (`table_name`,`title`,`reorderfield`,`use_history`,`searchfield`,`displayfield`,`sortfield`,`searchany`,`hint`,`overview_tpl`,`sync_table`,`writetable`,`globalsearch`,`listselectionmodel`,`sync_view`,`read_table`,`cssstyle`,`class_name`,`special_add_panel`,`existsreal`,`read_filter`,`syncable`,`listxtypeprefix`,`phpexporter`,`combined`,`phpexporterfilename`,`default_pagesize`,`allowform`,`character_set_name`,`alternativeformxtype`,`listviewbaseclass`,`showactionbtn`)                     values                     ('dateien','Dateien','','0','name','name','name','1','','','','','0','tualomultirowmodel','','','','Unklassifiziert','','1','','0','listview','XlsxWriter','0','','100','1','','','Tualo.DataSets.ListView','1')                     on duplicate key update `table_name`=values(`table_name`);
insert into `ds_column`                     (`table_name`,`column_name`,`default_value`,`default_max_value`,`default_min_value`,`update_value`,`is_primary`,`syncable`,`is_nullable`,`referenced_table`,`referenced_column_name`,`is_referenced`,`data_type`,`column_key`,`column_type`,`character_maximum_length`,`numeric_precision`,`numeric_scale`,`character_set_name`,`privileges`,`existsreal`,`deferedload`,`writeable`,`note`)                     values                     
('dateien','datei','','10000000','0','','0','0','YES','','','','int','','int(11)','0','10','0','','select,insert,update,references','1','0','1',''),
('dateien','name','{GUID}','10000000','0','','1','0','NO','','','0','varchar','PRI','varchar(100)','100','0','0','utf8','select,insert,update,references','1','0','1','\'\'')                     
on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
insert into `ds_access`                     (`role`,`table_name`,`read`,`write`,`delete`,`append`,`existsreal`)                     values                     ('administration','dateien','0','1','1','1','0'),('_default_','dateien','1','0','0','0','0')                     on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
insert into `ds_column_form_label`                     (`table_name`,`column_name`,`language`,`label`,`xtype`,`field_path`,`position`,`hidden`,`active`,`allowempty`)                     values                     ('dateien','datei','DE','Datei','dsdocumentfield','Allgemein','999','0','1','1'),('dateien','name','DE','Name','textfield','Allgemein','0','0','1','1')                     on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`);
insert into `ds_column_list_label`                     (`table_name`,`column_name`,`language`,`label`,`xtype`,`editor`,`position`,`summaryrenderer`,`summarytype`,`hidden`,`active`,`filterstore`,`renderer`,`flex`,`direction`,`align`,`grouped`)                     values                     ('dateien','datei','DE','Datei','gridcolumn','','999','','','1','1','','','1.00','ASC','left','0'),('dateien','name','DE','Name','gridcolumn','','0','','','0','1','','','1.00','ASC','left','0')                     on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`);

-- SOURCE FILE: ./src//100-div/101-farben.sql 
CREATE TABLE IF NOT EXISTS `farben` (
  `name` varchar(255) DEFAULT NULL,
  
  `rgb` varchar(20) NOT NULL DEFAULT '',

  PRIMARY KEY (`rgb`)
);


-- BEGIN DS farben
-- NAME: Farben

insert into `ds`
                    (`table_name`)
                    values
                    ('farben')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Farben',`reorderfield`='',`use_history`='0',`searchfield`='name',`displayfield`='name',`sortfield`='name',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='tualomultirowmodel',`sync_view`='',`syncable`='0',`cssstyle`='',`alternativeformxtype`='',`read_table`='',`class_name`='Datenstamm',`special_add_panel`='',`existsreal`='1',`character_set_name`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='farben';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('farben','name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0' where `table_name`='farben' and `column_name`='name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('farben','rgb')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='',`writeable`='1',`note`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(20)',`character_maximum_length`='20',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`deferedload`='0'  where `table_name`='farben' and `column_name`='rgb';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','farben')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='1',`delete`='1',`append`='1',`existsreal`='0' where `role`='administration' and `table_name`='farben';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','farben')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='0' where `role`='_default_' and `table_name`='farben';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('farben','name','DE','Name','Allgemein/Angaben')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='farben' and `column_name`='name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('farben','rgb','DE','RGB','Allgemein/Angaben')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='1',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='farben' and `column_name`='rgb' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('farben','name','DE','Name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='farben' and `column_name`='name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('farben','rgb','DE','RGB')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='1',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`filterstore`='',`grouped`='0',`flex`='1.00',`direction`='ASC',`align`='left' where `table_name`='farben' and `column_name`='rgb' and `language`='DE';
insert into `ds_dropdownfields`
                    (`table_name`,`name`)
                    values
                    ('farben','rgb')
                    on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='rgb',`displayfield`='name',`filterconfig`='' where `table_name`='farben' and `name`='rgb';
-- END DS farben



-- SOURCE FILE: ./src//900.ds.createclient.sql 

DELIMITER //

DROP PROCEDURE IF EXISTS `ADD_OR_UPDATE_CLIENTDB` //
CREATE PROCEDURE `ADD_OR_UPDATE_CLIENTDB`(
    in in_session_db varchar(64),
    in in_client_db varchar(64)
)
    MODIFIES SQL DATA
BEGIN



    SET @s=concat( 'CREATE DATABASE IF NOT EXISTS ',in_client_db,' ');
    PREPARE stmt1 FROM @s;
    execute stmt1;
    DEALLOCATE PREPARE stmt1;


    SET @s=concat( '
        CREATE OR REPLACE VIEW ',in_client_db,'.sessionsview_macc_groups as

        select
            macc_groups.*
        from
        ',in_session_db,'.macc_groups macc_groups
        join ',in_session_db,'.macc_users_groups macc_users_groups
            on macc_users_groups.group = macc_groups.name
        join ',in_session_db,'.macc_users macc_users
            on macc_users_groups.id = macc_users.login
        join ',in_session_db,'.macc_users_clients macc_users_clients
            on 
            macc_users_clients.client = ',quote(in_client_db),' and (
                macc_users_clients.login = macc_users.login
                or macc_users.typ=\'master\'
            )
    ');
    PREPARE stmt1 FROM @s;
    execute stmt1;
    DEALLOCATE PREPARE stmt1;

    SET @s=concat( '
        CREATE OR REPLACE VIEW ',in_client_db,'.sessionsview_macc_users_clients as
        select
            macc_users_clients.*
        from
            ',in_session_db,'.macc_users_clients macc_users_clients
        where macc_users_clients.client = database()
    ');

    PREPARE stmt1 FROM @s;
    execute stmt1;
    DEALLOCATE PREPARE stmt1;


END //

-- SOURCE FILE: ./src//901.ds.test.sql 

-- call TEST_GET_DS_WHERE_FILTER();
-- call TEST_GET_DS_READ();
/*
call TEST_GET_DS_INSERT();
call TEST_GET_DS_UPDATE();

-- select char(10) x;
-- select char(10) x;


SET @query=uuid();



call initializeDSQuery(@query,'read','testdaten');


call addDSOrderFieldByFieldName(@query ,'testdaten__id','desc',1);

call addDSQueryFilterByFieldName(@query,'testdaten__id','having','<',150);
call addDSQueryFilterByFieldName(@query,'testdaten__name','where','in','Name 2');
call addDSQueryFilterByFieldName(@query,'testdaten__name','where','in','Name 6');
call addDSQueryFilterByFieldName(@query,'testdaten__name','where','in','Name 7');
call addDSQueryFilterByFieldName(@query,'testdaten__name','where','in','Name 8');
call addDSQueryFilterByFieldName(@query,'testdaten__name','where','in','Name 9');
*/



-- SOURCE FILE: ./src//999.ds.createNewClient.sql 
-- 999.ds.createNewClient
DELIMITER //
DROP PROCEDURE IF EXISTS `createNewClient` //
CREATE PROCEDURE `createNewClient`(in session_db varchar(64), in new_client varchar(64) ,in host varchar(64), in port integer)
    MODIFIES SQL DATA
BEGIN
    DECLARE RANDOMPW varchar(64);
    DECLARE USERNAME varchar(64);

    SET USERNAME = concat('U',new_client);
    SET RANDOMPW = uuid();

    SET @id = null;
    SET @s = concat("select id into @id from ",session_db,".macc_clients where id =  '",new_client,"'");

        PREPARE stmt1 FROM @s;
        execute stmt1   ; 
        DEALLOCATE PREPARE stmt1;
    IF @id is null THEN
        
        SET @s = concat("INSERT INTO ",session_db,".macc_clients 
        (`id`,`username`,`password`,`host`,`port`)
        VALUES ('",new_client,"','",USERNAME,"','",RANDOMPW,"','",host,"','",port,"')");
        PREPARE stmt1 FROM @s;
        execute stmt1 ;
        DEALLOCATE PREPARE stmt1;



        SET @s = concat("CREATE USER ",USERNAME,"@'%' IDENTIFIED BY  '",RANDOMPW,"'");
        PREPARE stmt1 FROM @s;
        execute stmt1;
        DEALLOCATE PREPARE stmt1;

        SET @s = concat("GRANT ALL ON ",new_client,".* TO ",USERNAME,"@'%'");
        PREPARE stmt1 FROM @s;
        execute stmt1;
        DEALLOCATE PREPARE stmt1;

        


    END IF;



END //
-- SOURCE FILE: ./src//999.ds.mastercopy.proc.sql 
DELIMITER //

create table if not exists ds_copy_master_config (
  table_name varchar(64) primary key,
  position integer default 0,
  copy_data tinyint default 0,
  ddl_type varchar(10) default 'table',
  copy_ds_config tinyint default 1,
  note varchar(255) default '',
  run_procedure_before  varchar(255) default '',
  run_procedure_after  varchar(255) default '',
  run_procedure_final  varchar(255) default ''
) //


DROP FUNCTION IF EXISTS `getTableKeys` //
CREATE FUNCTION `getTableKeys`(in_database varchar(64), in_table_name varchar(64) )
RETURNS longtext
READS SQL DATA
COMMENT ''
BEGIN
    DECLARE strDEF longtext;

    SELECT 
        group_concat(
            A.x
            SEPARATOR ',
            '
        )
        INTO strDEF
    FROM (
    SELECT
        
concat(
IF (NON_UNIQUE = 1,'' ,' UNIQUE '),
' KEY ',
' `',INDEX_NAME,'`',
' (',
group_concat(
    concat('`',COLUMN_NAME,'`')
    ORDER BY SEQ_IN_INDEX
    SEPARATOR ','
),
') '

) x
        

    FROM
        INFORMATION_SCHEMA.STATISTICS
    WHERE
        TABLE_SCHEMA = in_database
        and TABLE_NAME = in_table_name
        and INDEX_NAME <> 'PRIMARY'

    GROUP BY INDEX_NAME
    ) A;


    RETURN strDEF;
END //


DROP FUNCTION IF EXISTS `getTableForeignKeys` //
CREATE FUNCTION `getTableForeignKeys`(in_database varchar(64), in_table_name varchar(64) )
RETURNS longtext
READS SQL DATA
COMMENT ''
BEGIN
    DECLARE strDEF longtext;
SELECT
group_concat(
      concat(' 
        CONSTRAINT `',lower(CONSTRAINT_NAME),'`
        FOREIGN KEY (',COLUMN_NAMES,')
        REFERENCES `',REFERENCED_TABLE_NAME,'` (',REFERENCED_COLUMN_NAMES,')
        ON DELETE ',DELETE_RULE,'
        ON UPDATE ',UPDATE_RULE,'
      ')
      SEPARATOR ',
      '
) 
INTO strDEF
FROM (
SELECT
	C.CONSTRAINT_NAME,
    C.TABLE_NAME,
    C.REFERENCED_TABLE_NAME,
    C.COLUMN_NAMES,
    C.REFERENCED_COLUMN_NAMES,
    
    R.DELETE_RULE,
    R.UPDATE_RULE
FROM (
select 
	col.CONSTRAINT_NAME,
    col.TABLE_NAME,
    col.REFERENCED_TABLE_NAME,
    
    group_concat(
      concat('`',lower(COLUMN_NAME),'`')
      ORDER BY col.ORDINAL_POSITION
      SEPARATOR ','
    ) COLUMN_NAMES,
    group_concat(
      concat('`',lower(REFERENCED_COLUMN_NAME),'`')
      ORDER BY col.ORDINAL_POSITION
      SEPARATOR ','
    ) REFERENCED_COLUMN_NAMES
    FROM
    information_schema.key_column_usage col
    WHERE
        col.table_name=in_table_name
        and col.table_schema=in_database
        and col.CONSTRAINT_NAME <> 'PRIMARY'
    GROUP BY col.TABLE_NAME,col.CONSTRAINT_NAME
) C
JOIN
information_schema.REFERENTIAL_CONSTRAINTS R
ON c.CONSTRAINT_NAME = R.CONSTRAINT_NAME
AND c.TABLE_NAME = R.TABLE_NAME
AND  R.CONSTRAINT_SCHEMA = in_database
) X
;


    RETURN strDEF;
END //

DROP FUNCTION IF EXISTS `getCreateTableDDL` //
CREATE FUNCTION `getCreateTableDDL`(in_database varchar(64), in_table_name varchar(64),in_resultdatabase varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT ''
BEGIN
    DECLARE strFIELDS longtext;
    DECLARE strPRIMARY longtext;
    DECLARE strFK longtext;
    DECLARE strKEY longtext;

    select 
    group_concat(
    concat(
        '`',lower(COLUMN_NAME),'`',
        ' ',
        COLUMN_TYPE,
        
        if (IS_NULLABLE='NO' and COLUMN_DEFAULT is null,' NOT NULL ',
            if (IS_NULLABLE='YES',  concat(' DEFAULT ',ifnull(COLUMN_DEFAULT,'NULL')) ,  concat(' DEFAULT ',ifnull(COLUMN_DEFAULT,'NULL'), ' NOT NULL') )
        )

        
    )
    
    ORDER BY col.ORDINAL_POSITION
    SEPARATOR ',
    '
    ) g
    INTO 
    strFIELDS
    FROM
    information_schema.columns col
    WHERE
    col.table_name=in_table_name
    and col.table_schema=in_database
    GROUP BY col.TABLE_NAME 
    ;



    select 
    group_concat(
    concat(
        '`',lower(COLUMN_NAME),'`'
    )
    ORDER BY col.ORDINAL_POSITION
    SEPARATOR ','
    ) g
    INTO 
        strPRIMARY
    FROM
        information_schema.columns col
    WHERE
        col.table_name=in_table_name
        and col.table_schema=in_database
        and col.COLUMN_KEY='PRI'
    GROUP BY col.TABLE_NAME 
    ;

    SET strFK = (select getTableForeignKeys(in_database,in_table_name));
    SET strKEY = (select getTableKeys(in_database,in_table_name));

    RETURN concat('
    CREATE TABLE IF NOT EXISTS ',if(in_resultdatabase<>'',concat('`',in_resultdatabase,'`.'),''),'`',in_table_name,'`(
        ',
        strFIELDS,
        '',
        if(
            strPRIMARY is null,'',
            concat(', PRIMARY KEY(',strPRIMARY,')')
        ),

        '',
        if(
            strFK is null,'',
            concat(', ',strFK,'')
        ),

        '',
        if(
            strKEY is null,'',
            concat(', ',strKEY,'')
        ),

    '
    )'
    );

END //

DROP PROCEDURE IF EXISTS `mastercopyDDL` //
CREATE PROCEDURE `mastercopyDDL`(in from_db varchar(64), in to_db varchar(64) )
    MODIFIES SQL DATA
BEGIN

    DECLARE done INT DEFAULT FALSE;
    DECLARE loop_table_name VARCHAR(64);
    DECLARE loop_copy_data tinyint;
    DECLARE loop_ddl_type VARCHAR(64);
    DECLARE loop_copy_ds_config tinyint;
    DECLARE use_sql longtext;

    DECLARE cur CURSOR FOR SELECT lower(table_name) table_name,copy_data,ddl_type,copy_ds_config FROM ds_copy_master_config ORDER BY position ;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;




    OPEN cur;
    read_loop: LOOP
        FETCH cur INTO loop_table_name,loop_copy_data,loop_ddl_type,loop_copy_ds_config;

        IF done THEN
            LEAVE read_loop;
        END IF;
        


        call debug_message(concat('tablename ',loop_table_name));

        SET @s= concat('CREATE DATABASE IF NOT EXISTS ',to_db);
        PREPARE stmt1 FROM @s;
        execute stmt1;
        DEALLOCATE PREPARE stmt1;



        SET @s= getCreateTableDDL(from_db,loop_table_name,to_db);
        -- concat( 'SHOW CREATE TABLE  ',loop_table_name,' ');
        IF @s is null THEN
            select loop_table_name, 'return null';
             SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error';
        ELSE 
            /*
            SELECT concat('
            
            ',
            @s,'
            
            
            ');
            */


            PREPARE stmt1 FROM @s;
            execute stmt1;
            DEALLOCATE PREPARE stmt1;

        END IF;
        


        SET done=false;

    END LOOP;
    CLOSE cur;





END //




DROP PROCEDURE IF EXISTS `mastercopyData` //
CREATE PROCEDURE `mastercopyData`(in from_db varchar(64), in to_db varchar(64) )
    MODIFIES SQL DATA
BEGIN

    DECLARE done INT DEFAULT FALSE;
    DECLARE loop_table_name VARCHAR(64);
    DECLARE loop_copy_data tinyint;
    DECLARE loop_ddl_type VARCHAR(64);
    DECLARE loop_copy_ds_config tinyint;
    DECLARE use_sql longtext;

    DECLARE cur CURSOR FOR SELECT lower(table_name) table_name,copy_data,ddl_type,copy_ds_config FROM ds_copy_master_config where copy_data=1 ORDER BY position ;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;




    OPEN cur;
    read_loop: LOOP
        FETCH cur INTO loop_table_name,loop_copy_data,loop_ddl_type,loop_copy_ds_config;

        IF done THEN
            LEAVE read_loop;
        END IF;


         call debug_message(concat('tablename ',loop_table_name));

        SELECT 
            group_concat(
                concat('`',col.COLUMN_NAME,'`')
                ORDER BY ORDINAL_POSITION
                separator ','
            )
        INTO 
            @f
        FROM 
            information_schema.columns col
        WHERE col.table_schema = from_db and col.table_name = loop_table_name
        ;


        SELECT 
            group_concat(
                concat('`',col.COLUMN_NAME,'`=values(`',col.COLUMN_NAME,'`)')
                ORDER BY ORDINAL_POSITION
                separator ','
            )
        INTO 
            @updates
        FROM 
            information_schema.columns col
        WHERE col.table_schema = from_db and col.table_name = loop_table_name and col.COLUMN_KEY='PRI'
        ;



        SET @s= concat( '
        INSERT INTO `',to_db,'`.`',loop_table_name,'`
        (',@f,')
        SELECT 
            ',@f,' 
        FROM `',from_db,'`.`',loop_table_name,'`
        ON DUPLICATE KEY UPDATE ', @updates ,'
        ');
        PREPARE stmt1 FROM @s;
        execute stmt1;
        DEALLOCATE PREPARE stmt1;


        SET done=false;

    END LOOP;
    CLOSE cur;





END //




DROP PROCEDURE IF EXISTS `mastercopyDSConfig` //
CREATE PROCEDURE `mastercopyDSConfig`(in from_db varchar(64), in to_db varchar(64) )
    MODIFIES SQL DATA
BEGIN

    DECLARE done INT DEFAULT FALSE;
    DECLARE loop_table_name VARCHAR(64);
    DECLARE loop_copy_data tinyint;
    DECLARE loop_ddl_type VARCHAR(64);
    DECLARE loop_copy_ds_config tinyint;
    DECLARE loop_ds_config_table VARCHAR(64);
    DECLARE use_sql longtext;

    DECLARE cur CURSOR FOR SELECT ds_config_table, lower(table_name) table_name,copy_data,ddl_type,copy_ds_config FROM ds_copy_master_config join (
        select 'ds' ds_config_table UNION 
        select 'ds_access' ds_config_table UNION 
        select 'ds_addcommands' ds_config_table UNION 
        select 'ds_additional_columns' ds_config_table UNION 
        select 'ds_column' ds_config_table UNION 
        select 'ds_column_form_label' ds_config_table UNION 
        select 'ds_column_list_label' ds_config_table UNION 
        select 'ds_column_tagfields' ds_config_table UNION 
        select 'ds_contextmenu' ds_config_table UNION 
        select 'ds_contextmenu_params' ds_config_table UNION 
        select 'ds_dropdownfields' ds_config_table UNION 
        select 'ds_nm_tables' ds_config_table UNION 
        select 'ds_pdf_reports_ds' ds_config_table UNION 
        select 'ds_preview_form_label' ds_config_table UNION 
        select 'ds_reference_tables' ds_config_table UNION 
        select 'ds_searchfields' ds_config_table UNION 
        select 'ds_trigger' ds_config_table 
    ) ds_config_tables where copy_ds_config=1 ORDER BY position ;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;




    OPEN cur;
    read_loop: LOOP
        FETCH cur INTO loop_ds_config_table, loop_table_name,loop_copy_data,loop_ddl_type,loop_copy_ds_config;

        IF done THEN
            LEAVE read_loop;
        END IF;


         call debug_message(concat('tablename ',loop_ds_config_table,loop_table_name));

        SELECT 
            group_concat(
                concat('`',col.COLUMN_NAME,'`')
                ORDER BY ORDINAL_POSITION
                separator ','
            )
        INTO 
            @f
        FROM 
            information_schema.columns col
        WHERE col.table_schema = from_db and col.table_name = loop_ds_config_table
        ;


        SELECT 
            group_concat(
                concat('`',col.COLUMN_NAME,'`=values(`',col.COLUMN_NAME,'`)')
                ORDER BY ORDINAL_POSITION
                separator ','
            )
        INTO 
            @updates
        FROM 
            information_schema.columns col
        WHERE col.table_schema = from_db and col.table_name = loop_ds_config_table and col.COLUMN_KEY='PRI'
        ;



        SET @s= concat( '
        INSERT INTO `',to_db,'`.`',loop_ds_config_table,'`
        (',@f,')
        SELECT 
            ',@f,' 
        FROM `',from_db,'`.`',loop_ds_config_table,'` WHERE TABLE_NAME = "',loop_table_name, '" ON DUPLICATE KEY UPDATE ', @updates ,'');
        

        PREPARE stmt1 FROM @s;
        execute stmt1;
        DEALLOCATE PREPARE stmt1;


        SET done=false;

    END LOOP;
    CLOSE cur;





END //



DROP PROCEDURE IF EXISTS `mastercopy` //
CREATE PROCEDURE `mastercopy`(in from_db varchar(64), in to_db varchar(64) )
    MODIFIES SQL DATA
BEGIN

    SET FOREIGN_KEY_CHECKS=0;

    call mastercopyDDL ( from_db, to_db);
    call mastercopyData ( from_db, to_db);
    call mastercopyDSConfig (  from_db, to_db );
    call createNewClient('sessions',to_db,'127.0.0.1',3306);

    SET FOREIGN_KEY_CHECKS=1;

END //

-- CALL mastercopy('db00010','xyz') \G
-- select getCreateTableDDL('db00010','adressen','xyz') x \G
-- call createNewClient('sessions','xyz','127.0.0.1',3306);

-- SOURCE FILE: ./src//cron/500.ds-setup.sql 
DELIMITER ;

insert into `ds_class` (`class_name`) values ('Aufgabenplanung') on duplicate key update `class_name`=values(`class_name`);







CREATE TABLE IF NOT EXISTS  `crontab_applications` (
  `id` varchar(255) NOT NULL,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
);
CREATE TABLE IF NOT EXISTS `crontab_weekdays` (
  `id` varchar(15) NOT NULL,
  `name` varchar(20) NOT NULL,
  PRIMARY KEY (`id`)
);


create table if not exists `cron_log_dateien`(
    id integer primary key,
    name varchar(255) not null,
    datum date not null,
    zeit time not null
);

create table if not exists `cron_log_dateien_daten`(
    id integer not null,
    seite integer not null,
    primary key (id,seite),
    daten varchar(4000)
);


CREATE TABLE IF NOT EXISTS  `crontab` (
  `id` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `anwendung` varchar(255) NOT NULL,
  `supanwendung` varchar(255) NOT NULL,
  `minute` varchar(15) NOT NULL,
  `stunde` varchar(15) NOT NULL,
  `tag` varchar(15) NOT NULL,
  `monat` varchar(15) NOT NULL,
  `wochentag` varchar(15) NOT NULL,
  `letzterstart` datetime DEFAULT NULL,
  `status` tinyint(4) DEFAULT 0,
  `isrunning` tinyint(4) DEFAULT 0,
  `startat` datetime DEFAULT NULL,
  `stopat` datetime DEFAULT NULL,
  `errormsg` text DEFAULT NULL,
  `resultmsg` text DEFAULT NULL,
  `haserror` tinyint(4) DEFAULT 0,
  `sekunden_laufzeit` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),



  CONSTRAINT `fk_crontab_crontab_weekdays` FOREIGN KEY (`wochentag`) REFERENCES `crontab_weekdays` (`id`) 
  ON UPDATE CASCADE
  ON DELETE RESTRICT,

  CONSTRAINT `fk_crontab_crontab_applications` FOREIGN KEY (`anwendung`) REFERENCES `crontab_applications` (`id`) 
  ON UPDATE CASCADE
  ON DELETE RESTRICT

);


CREATE TABLE IF NOT EXISTS`cron_queries` (
  `id` int(11) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `query` LONGTEXT,
  PRIMARY KEY (`id`)
);

CREATE TABLE IF NOT EXISTS`cron_queries_toexecute` (
  `id` varchar(36) NOT NULL,
  `createtime` datetime,
  `query` LONGTEXT,
  PRIMARY KEY (`id`)
);


call UPDATE_DS_SETUP_ALL();

insert into ds_trigger (type,table_name,program) values
  ('program','crontab','cmp_cron/trigger/crontab/trigger.php')
on duplicate key update program=values(program);




insert into crontab_weekdays (id,name) values ('*','Alle') on duplicate key update name=values(name);
insert into crontab_weekdays (id,name) values ('Mon','Montag') on duplicate key update name=values(name);
insert into crontab_weekdays (id,name) values ('Tue','Dienstag') on duplicate key update name=values(name);
insert into crontab_weekdays (id,name) values ('Wed','Mittwoch') on duplicate key update name=values(name);
insert into crontab_weekdays (id,name) values ('Thu','Donnerstag') on duplicate key update name=values(name);
insert into crontab_weekdays (id,name) values ('Fri','Freitag') on duplicate key update name=values(name);
insert into crontab_weekdays (id,name) values ('Sat','Samstag') on duplicate key update name=values(name);
insert into crontab_weekdays (id,name) values ('Sun','Sonntag') on duplicate key update name=values(name);


insert into  crontab_weekdays (id,name) values ('thu-sat','Dienstag-Samstag'),
('mon-fri','Montag-Freitag') on duplicate key update id=values(id),name=values(name);


call addFieldIfNotExists('crontab','isrunning','tinyint default 0');
call addFieldIfNotExists('crontab','startat','datetime');
call addFieldIfNotExists('crontab','stopat','datetime');
call addFieldIfNotExists('crontab','errormsg','varchar(255)');
call addFieldIfNotExists('crontab','resultmsg','varchar(255)');
call addFieldIfNotExists('crontab','haserror','tinyint default 0');

create or replace view `view_readtable_crontab` as
select
  id,
  name,
  anwendung,
  supanwendung,
  minute,
  stunde,
  tag,
  monat,
  wochentag,
  letzterstart,
  status,
  isrunning,
  startat,
  stopat,
  errormsg,
  resultmsg,
  haserror,
  TIME_TO_SEC(TIMEDIFF(ifnull(startat,now()),ifnull(stopat,now()))) sekunden_laufzeit,
  if(
      haserror=1,
      'row-color-orangered2',
      if(TIME_TO_SEC(TIMEDIFF(ifnull(startat,now()),ifnull(stopat,now())))>20,'row-color-lightyellow2','row-color-white')
  ) `_rowclass_even`,
  if( haserror=1,
      'row-color-orangered4',
      if(TIME_TO_SEC(TIMEDIFF(ifnull(startat,now()),ifnull(stopat,now())))>20,'row-color-lightyellow4','row-color-gray95')
  ) `_rowclass_odd`
from crontab
;




-- BEGIN DS crontab
-- NAME: Aufgabenplanung

insert into `ds`
                    (`table_name`)
                    values
                    ('crontab')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Aufgabenplanung',`reorderfield`='',`use_history`='0',`searchfield`='name',`displayfield`='name',`sortfield`='name',`searchany`='0',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`character_set_name`='latin1',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`cssstyle`='',`read_table`='view_readtable_crontab',`class_name`='Aufgabenplanung',`special_add_panel`='',`existsreal`='1',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='crontab';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab','anwendung')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab' and `column_name`='anwendung';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab','errormsg')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='text',`column_key`='',`column_type`='text',`character_maximum_length`='65535',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab' and `column_name`='errormsg';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab','haserror')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab' and `column_name`='haserror';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab','id')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='{#serial}',`default_max_value`='10000000',`default_min_value`='10000',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='int',`column_key`='PRI',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab' and `column_name`='id';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab','isrunning')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab' and `column_name`='isrunning';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab','letzterstart')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='datetime',`column_key`='',`column_type`='datetime',`character_maximum_length`='0',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab' and `column_name`='letzterstart';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab','minute')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(15)',`character_maximum_length`='15',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab' and `column_name`='minute';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab','monat')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(15)',`character_maximum_length`='15',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab' and `column_name`='monat';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab','name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab' and `column_name`='name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab','resultmsg')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='text',`column_key`='',`column_type`='text',`character_maximum_length`='65535',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab' and `column_name`='resultmsg';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab','sekunden_laufzeit')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='bigint',`column_key`='',`column_type`='bigint(17)',`character_maximum_length`='0',`numeric_precision`='19',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab' and `column_name`='sekunden_laufzeit';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab','startat')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='datetime',`column_key`='',`column_type`='datetime',`character_maximum_length`='0',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab' and `column_name`='startat';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab','status')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='0',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='tinyint',`column_key`='',`column_type`='tinyint(4)',`character_maximum_length`='0',`numeric_precision`='3',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab' and `column_name`='status';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab','stopat')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='datetime',`column_key`='',`column_type`='datetime',`character_maximum_length`='0',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab' and `column_name`='stopat';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab','stunde')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(15)',`character_maximum_length`='15',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab' and `column_name`='stunde';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab','supanwendung')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='.',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab' and `column_name`='supanwendung';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab','tag')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(15)',`character_maximum_length`='15',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab' and `column_name`='tag';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab','wochentag')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(15)',`character_maximum_length`='15',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab' and `column_name`='wochentag';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab','_rowclass_even')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`is_referenced`='',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(22)',`character_maximum_length`='22',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='0' where `table_name`='crontab' and `column_name`='_rowclass_even';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab','_rowclass_odd')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='YES',`is_referenced`='',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(22)',`character_maximum_length`='22',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='0' where `table_name`='crontab' and `column_name`='_rowclass_odd';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','crontab')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='1',`delete`='1',`append`='1',`existsreal`='1' where `role`='administration' and `table_name`='crontab';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','crontab')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='crontab';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('crontab','anwendung','DE','Anwendung','Aufgabe')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='combobox_crontab_applications_anwendung',`position`='3',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='crontab' and `column_name`='anwendung' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('crontab','id','DE','ID','Aufgabe')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='1',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='crontab' and `column_name`='id' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('crontab','minute','DE','Minute','Aufgabe')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='4',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='crontab' and `column_name`='minute' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('crontab','monat','DE','Monat','Aufgabe')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='8',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='crontab' and `column_name`='monat' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('crontab','name','DE','Name','Aufgabe')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='2',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='crontab' and `column_name`='name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('crontab','status','DE','Aktiv','Aufgabe')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='checkbox',`position`='9',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='crontab' and `column_name`='status' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('crontab','stunde','DE','Stunde','Aufgabe')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='5',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='crontab' and `column_name`='stunde' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('crontab','tag','DE','Tag','Aufgabe')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='6',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='crontab' and `column_name`='tag' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('crontab','wochentag','DE','Wochentag','Aufgabe')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='combobox_crontab_weekdays_wochhentag',`position`='7',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='crontab' and `column_name`='wochentag' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab','anwendung','DE','Anwendung')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='column_crontab_applications_anwendung',`editor`='',`position`='3',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab' and `column_name`='anwendung' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab','errormsg','DE','errormsg')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab' and `column_name`='errormsg' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab','haserror','DE','haserror')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab' and `column_name`='haserror' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab','id','DE','ID')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='1',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab' and `column_name`='id' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab','isrunning','DE','isrunning')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab' and `column_name`='isrunning' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab','letzterstart','DE','letzter Start')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='tualodatetimedisplaycolumn',`editor`='',`position`='9',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab' and `column_name`='letzterstart' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab','minute','DE','Minute')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='4',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab' and `column_name`='minute' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab','monat','DE','Monat')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='8',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab' and `column_name`='monat' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab','name','DE','Aufgabe')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='2',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab' and `column_name`='name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab','resultmsg','DE','resultmsg')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab' and `column_name`='resultmsg' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab','startat','DE','startat')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab' and `column_name`='startat' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab','status','DE','Aktiv')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='booleancolumn',`editor`='',`position`='10',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab' and `column_name`='status' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab','stopat','DE','stopat')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab' and `column_name`='stopat' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab','stunde','DE','Stunde')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='5',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab' and `column_name`='stunde' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab','supanwendung','DE','supanwendung')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='0',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab' and `column_name`='supanwendung' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab','tag','DE','Tag')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='6',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab' and `column_name`='tag' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab','wochentag','DE','Wochentag')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='column_crontab_weekdays_wochhentag',`editor`='',`position`='7',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab' and `column_name`='wochentag' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab','_rowclass_even','DE','_rowclass_even')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='0',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab' and `column_name`='_rowclass_even' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab','_rowclass_odd','DE','_rowclass_odd')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`summarytype`='',`hidden`='1',`active`='0',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab' and `column_name`='_rowclass_odd' and `language`='DE';
insert into `ds_trigger`
                    (`type`,`table_name`,`program`)
                    values
                    ('program','crontab','cmp_cron/trigger/crontab/trigger.php')
                    on duplicate key update `type`=values(`type`),`table_name`=values(`table_name`),`program`=values(`program`);
insert into `ds_trigger`
                    (`type`,`table_name`,`program`)
                    values
                    ('program','crontab','cmp_cron/trigger/crontab/trigger.php')
                    on duplicate key update `type`=values(`type`),`table_name`=values(`table_name`),`program`=values(`program`);
-- END DS crontab


-- BEGIN DS crontab_applications
-- NAME: Crontab Applications

insert into `ds`
                    (`table_name`)
                    values
                    ('crontab_applications')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Crontab Applications',`reorderfield`='',`use_history`='0',`searchfield`='name',`displayfield`='name',`sortfield`='name',`searchany`='0',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`character_set_name`='latin1',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`cssstyle`='',`read_table`='',`class_name`='Aufgabenplanung',`special_add_panel`='',`existsreal`='1',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='crontab_applications';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab_applications','id')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab_applications' and `column_name`='id';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab_applications','name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab_applications' and `column_name`='name';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','crontab_applications')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='administration' and `table_name`='crontab_applications';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','crontab_applications')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='crontab_applications';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('crontab_applications','id','DE','ID','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='2',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='crontab_applications' and `column_name`='id' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('crontab_applications','name','DE','Name','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='1',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='crontab_applications' and `column_name`='name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab_applications','id','DE','ID')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='2',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab_applications' and `column_name`='id' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab_applications','name','DE','Name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='1',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab_applications' and `column_name`='name' and `language`='DE';
insert into `ds_dropdownfields`
                    (`table_name`,`name`)
                    values
                    ('crontab_applications','Anwendung')
                    on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='id',`displayfield`='name',`filterconfig`='' where `table_name`='crontab_applications' and `name`='Anwendung';
-- END DS crontab_applications


-- BEGIN DS crontab_weekdays
-- NAME: Crontab Weekdays

insert into `ds`
                    (`table_name`)
                    values
                    ('crontab_weekdays')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='Crontab Weekdays',`reorderfield`='',`use_history`='0',`searchfield`='name',`displayfield`='name',`sortfield`='name',`searchany`='0',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`character_set_name`='latin1',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`cssstyle`='',`read_table`='',`class_name`='Aufgabenplanung',`special_add_panel`='',`existsreal`='1',`read_filter`='',`syncable`='0',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='crontab_weekdays';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab_weekdays','id')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='1',`syncable`='0',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='PRI',`column_type`='varchar(15)',`character_maximum_length`='15',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab_weekdays' and `column_name`='id';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('crontab_weekdays','name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='',`is_primary`='0',`syncable`='0',`is_nullable`='NO',`is_referenced`='NO',`referenced_table`='',`referenced_column_name`='',`data_type`='varchar',`column_key`='',`column_type`='varchar(20)',`character_maximum_length`='20',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='latin1',`privileges`='select,insert,update,references',`existsreal`='1',`note`='',`deferedload`='0',`writeable`='1' where `table_name`='crontab_weekdays' and `column_name`='name';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','crontab_weekdays')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='administration' and `table_name`='crontab_weekdays';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','crontab_weekdays')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='crontab_weekdays';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('crontab_weekdays','id','DE','ID','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='2',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='crontab_weekdays' and `column_name`='id' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('crontab_weekdays','name','DE','Name','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='1',`hidden`='0',`active`='1',`allowempty`='1' where `table_name`='crontab_weekdays' and `column_name`='name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab_weekdays','id','DE','ID')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='2',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab_weekdays' and `column_name`='id' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('crontab_weekdays','name','DE','Name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='1',`summaryrenderer`='',`summarytype`='',`hidden`='0',`active`='1',`renderer`='',`filterstore`='',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0' where `table_name`='crontab_weekdays' and `column_name`='name' and `language`='DE';
insert into `ds_dropdownfields`
                    (`table_name`,`name`)
                    values
                    ('crontab_weekdays','Wochhentag')
                    on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='id',`displayfield`='name',`filterconfig`='' where `table_name`='crontab_weekdays' and `name`='Wochhentag';
-- END DS crontab_weekdays




-- BEGIN DS cron_queries
-- NAME: SQL Aufgabenplanung

insert into `ds`
                    (`table_name`)
                    values
                    ('cron_queries')
                    on duplicate key update `table_name`=values(`table_name`);
update `ds` set `title`='SQL Aufgabenplanung',`reorderfield`='',`use_history`='0',`searchfield`='name',`displayfield`='name',`sortfield`='name',`searchany`='1',`hint`='',`overview_tpl`='',`sync_table`='',`writetable`='',`globalsearch`='0',`listselectionmodel`='cellmodel',`sync_view`='',`syncable`='0',`cssstyle`='',`read_filter`='',`listxtypeprefix`='listview',`phpexporter`='XlsxWriter',`phpexporterfilename`='{GUID}',`combined`='0',`default_pagesize`='100',`allowForm`='0',`existsreal`='1',`special_add_panel`='',`character_set_name`='',`read_table`='',`class_name`='Unklassifiziert',`alternativeformxtype`='',`listviewbaseclass`='Tualo.DataSets.ListView',`showactionbtn`='1' where `table_name`='cron_queries';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('cron_queries','id')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='{#serial}',`default_max_value`='10000000',`default_min_value`='1000',`update_value`='' ,`is_primary`='1',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='NO',`is_referenced`='NO',`deferedload`='0',`existsreal`='1',`data_type`='int',`column_key`='PRI',`column_type`='int(11)',`character_maximum_length`='0',`numeric_precision`='10',`numeric_scale`='0',`character_set_name`='',`privileges`='select,insert,update,references',`writeable`='1',`note`='' where `table_name`='cron_queries' and `column_name`='id';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('cron_queries','name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='' ,`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='NO',`deferedload`='0',`existsreal`='1',`data_type`='varchar',`column_key`='',`column_type`='varchar(255)',`character_maximum_length`='255',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`writeable`='1',`note`='' where `table_name`='cron_queries' and `column_name`='name';
insert into `ds_column`
                    (`table_name`,`column_name`)
                    values
                    ('cron_queries','query')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`);
update `ds_column` set `default_value`='',`default_max_value`='10000000',`default_min_value`='0',`update_value`='' ,`is_primary`='0',`syncable`='0',`referenced_table`='',`referenced_column_name`='',`is_nullable`='YES',`is_referenced`='NO',`deferedload`='0',`existsreal`='1',`data_type`='longtext',`column_key`='',`column_type`='longtext',`character_maximum_length`='4294967295',`numeric_precision`='0',`numeric_scale`='0',`character_set_name`='utf8',`privileges`='select,insert,update,references',`writeable`='1',`note`='' where `table_name`='cron_queries' and `column_name`='query';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('administration','cron_queries')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='1',`write`='1',`delete`='1',`append`='1',`existsreal`='1' where `role`='administration' and `table_name`='cron_queries';
insert into `ds_access`
                    (`role`,`table_name`)
                    values
                    ('_default_','cron_queries')
                    on duplicate key update `role`=values(`role`),`table_name`=values(`table_name`);
update `ds_access` set `read`='0',`write`='0',`delete`='0',`append`='0',`existsreal`='1' where `role`='_default_' and `table_name`='cron_queries';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('cron_queries','id','DE','ID','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='displayfield',`position`='0',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='cron_queries' and `column_name`='id' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('cron_queries','name','DE','Name','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='textfield',`position`='999',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='cron_queries' and `column_name`='name' and `language`='DE';
insert into `ds_column_form_label`
                    (`table_name`,`column_name`,`language`,`label`,`field_path`)
                    values
                    ('cron_queries','query','DE','Query','Allgemein')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`),`field_path`=values(`field_path`);
update `ds_column_form_label` set `xtype`='tualocodesql',`position`='999',`hidden`='0',`active`='1',`allowempty`='0' where `table_name`='cron_queries' and `column_name`='query' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('cron_queries','id','DE','ID')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='0',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0',`filterstore`='' where `table_name`='cron_queries' and `column_name`='id' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('cron_queries','name','DE','Name')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0',`filterstore`='' where `table_name`='cron_queries' and `column_name`='name' and `language`='DE';
insert into `ds_column_list_label`
                    (`table_name`,`column_name`,`language`,`label`)
                    values
                    ('cron_queries','query','DE','Query')
                    on duplicate key update `table_name`=values(`table_name`),`column_name`=values(`column_name`),`language`=values(`language`),`label`=values(`label`);
update `ds_column_list_label` set `xtype`='gridcolumn',`editor`='',`position`='999',`summaryrenderer`='',`renderer`='',`summarytype`='',`hidden`='0',`active`='1',`flex`='1.00',`direction`='ASC',`align`='left',`grouped`='0',`filterstore`='' where `table_name`='cron_queries' and `column_name`='query' and `language`='DE';
insert into `ds_dropdownfields`
                    (`table_name`,`name`)
                    values
                    ('cron_queries','id')
                    on duplicate key update `table_name`=values(`table_name`),`name`=values(`name`);
update `ds_dropdownfields` set `idfield`='id',`displayfield`='name',`filterconfig`='' where `table_name`='cron_queries' and `name`='id';
-- END DS cron_queries





-- SOURCE FILE: ./src//query/011.getDSDisplayField.sql 

DELIMITER //


DROP FUNCTION IF EXISTS getDSDisplayField //
CREATE FUNCTION getDSDisplayField(
    in_table_name varchar(64)
) 
RETURNS longtext
DETERMINISTIC
BEGIN 
    DECLARE result_sql longtext;
    select 
        concat(   '`',in_table_name,'`.','', FIELDQUOTE(displayfield) , '')
    into 
        result_sql
    from 
        ds
    where 
        ds.table_name = in_table_name;

    return result_sql;
END //


-- SOURCE FILE: ./src//query/011.getDSKeySQL.sql 
DROP FUNCTION IF EXISTS getDSKeySQL //
CREATE FUNCTION getDSKeySQL(
    in_table_name varchar(64)
) 
RETURNS longtext
DETERMINISTIC
BEGIN 
    DECLARE result_sql longtext;
    select 
        ifnull(concat('concat(',group_concat(concat(/*'`',ds_column.table_name,'`','.',*/ FIELDQUOTE(ds_column.column_name),'') order by column_name separator ',\'|\','),')'),'null')
    into 
        result_sql
    from 
        ds_column
    where 
        ds_column.table_name = in_table_name
        and ds_column.existsreal = 1
        and ds_column.is_primary = 1
        -- and ds_column.column_key like '%PRI%'
    ;

    return result_sql;
END //


DROP FUNCTION IF EXISTS getDSKeyJSFormula //
CREATE FUNCTION getDSKeyJSFormula(
    in_table_name varchar(64)
) 
RETURNS longtext
DETERMINISTIC
BEGIN 
    DECLARE result_sql longtext;
    select 
        concat('[',
            group_concat(
            concat('v["',table_name,'__',column_name,'"]') order by column_name
            separator ','
            ),
            ']'
        )
            
    into 
        result_sql
    from 
        ds_column
    where 
        ds_column.table_name = in_table_name
        and ds_column.existsreal = 1
        and ds_column.is_primary = 1
        -- and ds_column.column_key like '%PRI%'
    ;
    -- if there is no primary key defined 
    -- the result will be null
    -- 
    -- no primary indicates a missing configuration 
    -- take care
    return result_sql;
END //


DROP FUNCTION IF EXISTS getDSKeySQLExt //
CREATE FUNCTION getDSKeySQLExt(
    in_table_name varchar(64)
) 
RETURNS longtext
DETERMINISTIC
BEGIN 
    DECLARE result_sql longtext;
    select 
        ifnull(concat('concat(',group_concat(concat('`',ds_column.table_name,'`','.', FIELDQUOTE(ds_column.column_name),'') order by column_name separator ',\'|\','),')'),'null')
    into 
        result_sql
    from 
        ds_column
    where 
        ds_column.table_name = in_table_name
        and ds_column.existsreal = 1
        and ds_column.is_primary = 1
        -- and ds_column.column_key like '%PRI%'
    ;

    return result_sql;
END //

-- SOURCE FILE: ./src//query/011.getDSOrderBy.sql 

DROP FUNCTION IF EXISTS getDSOrderBy //
CREATE FUNCTION getDSOrderBy( in_queryid char(36) ) 
RETURNS longtext
DETERMINISTIC
BEGIN 
    DECLARE result_sql longtext;
    DECLARE in_table_name varchar(64);
    SELECT table_name INTO in_table_name FROM ds_query WHERE queryid = in_queryid;


    SELECT 
        concat(' ORDER BY ',group_concat(  concat(
--            '`',`table_name`,'`','.',
        FIELDQUOTE(`column_name`),' ', `direction`) order by `position` ),'')
    INTO 
        result_sql
    FROM 
        ds_query
        join ds_query_order_by
            on ds_query.queryid = ds_query_order_by.queryid
            and ds_query.queryid = in_queryid;

    IF (result_sql is null) THEN
        select 
            concat(' ORDER BY ',/*'`',ds.table_name,'`.`',*/FIELDQUOTE(ds.sortfield),'') fieldtext

        into
            result_sql
        from 
            ds
            join ds_column
            on ds.table_name = ds_column.table_name
            and ds_column.column_name = ds.sortfield
        where 
            ds.table_name = in_table_name
            and ds.sortfield is not null
            and ds.sortfield <> ''
        ;
    END IF;

    RETURN ifnull(result_sql,'');
END //


DROP FUNCTION IF EXISTS getDSOrderByExt //
CREATE FUNCTION getDSOrderByExt( in_queryid char(36), prefixfld varchar(255) ) 
RETURNS longtext
DETERMINISTIC
BEGIN 
    DECLARE result_sql longtext;
    DECLARE in_table_name varchar(64);
    SELECT table_name INTO in_table_name FROM ds_query WHERE queryid = in_queryid;

     
    SELECT 
        concat(' ORDER BY ',prefixfld,' ', group_concat(  concat(
        '`',`table_name`,'`','.',
        FIELDQUOTE(`column_name`),' ', `direction`) order by `position` ),'')
    INTO 
        result_sql
    FROM 
        ds_query
        join ds_query_order_by
            on ds_query.queryid = ds_query_order_by.queryid
            and ds_query.queryid = in_queryid;

    IF (result_sql is null) THEN
        select 
            concat(' ORDER BY ',prefixfld, ' `',ds.table_name,'`.', FIELDQUOTE(ds.sortfield),'') fieldtext

        into
            result_sql
        from 
            ds
            join ds_column
            on ds.table_name = ds_column.table_name
            and ds_column.column_name = ds.sortfield
        where 
            ds.table_name = in_table_name
            and ds.sortfield is not null
            and ds.sortfield <> ''
        ;
    END IF;

    RETURN ifnull(result_sql,'');
END //
-- SOURCE FILE: ./src//query/011.getDSSelectFieldList.sql 

DROP FUNCTION IF EXISTS `getDSSelectFieldList` //
CREATE FUNCTION `getDSSelectFieldList`(
	in_queryid varchar(36)
)
RETURNS longtext
DETERMINISTIC
BEGIN
	DECLARE result longtext;
	DECLARE str_separator varchar(5) default '.';
	DECLARE str_fieldseparator varchar(5) default '__';
	DECLARE str_database varchar(64);
	DECLARE str_prefix varchar(64);
    DECLARE in_table_name varchar(64);
    DECLARE in_read_table_name varchar(64);
	
	SET str_database=database();
    SET str_prefix = concat(char(10),char(9));


    SELECT table_name INTO in_table_name FROM ds_query WHERE queryid = in_queryid;
    SELECT ds_query.table_name,if(ds.read_table is null or ds.read_table='',ds_query.table_name,ds.read_table) INTO in_table_name,in_read_table_name FROM ds join ds_query on ds_query.table_name = ds.table_name WHERE queryid = in_queryid;


	
	SELECT
        concat(
            if( @searchquery is not null,' _searchjoin.__searchscore, ', ' ' ),
            group_concat(
                concat(str_prefix,FT)
                order by 
                    column_name
                separator ', '
            )
        )
	INTO 
		result

    FROM (

       
        select 
            concat('#ROW_NUMBER FORMULA# AS __rownumber') FT, '__rownumber' column_name

        union

        select 
            concat( getDSKeySQLExt(in_table_name),' __id') FT, '__id' column_name
        
        union
        
        select 
            concat( ifnull(getDSDisplayField(in_table_name),'null') ,' __displayfield') FT, '__displayfield' column_name
        
        union
        
        select 
            concat('\'', in_table_name,'\' __table_name') FT, '__table_name' column_name

        union

        SELECT 
            concat(
				-- FIELDQUOTE(str_database),str_separator,FIELDQUOTE(in_read_table_name),str_separator,
                FIELDQUOTE(in_table_name),'.',FIELDQUOTE(C.column_name),
				' AS ',
				FIELDQUOTE(concat(Q.table_name,str_fieldseparator,C.column_name))
			) FT,
            C.column_name
        FROM

            ds_query Q
            join ds D
                on Q.table_name = D.table_name
                and Q.queryid = in_queryid
            join ds_column C
                on 
                if(D.read_table is null or D.read_table='',D.table_name,D.read_table) = C.table_name
                and C.existsreal=1
    ) A
	;



    IF standardize_version(@@version)>='010.003' THEN
        SET result = REPLACE( result, '#ROW_NUMBER FORMULA# AS __rownumber', concat('ROW_NUMBER() OVER (',ifnull( getDSOrderByExt(in_queryid,''),''),') AS __rownumber')  );
    ELSE 
        SET @rownum=0;
        SET result = REPLACE( result, '#ROW_NUMBER FORMULA# AS __rownumber', concat('@rownum := @rownum + 1 AS __rownumber')  );
    END IF;

	RETURN result;
END //


-- SOURCE FILE: ./src//query/011.getDSWhereFilter.sql 


DROP FUNCTION IF EXISTS `getDSFilter` //

CREATE FUNCTION `getDSFilter`(
	in_queryid varchar(36),
    in_position varchar(8)
)
RETURNS longtext
DETERMINISTIC
BEGIN

	DECLARE result longtext;
	DECLARE str_separator varchar(5) default '.';
	
	SELECT 
		group_concat(
				CNF
			ORDER BY 
				column_name
			SEPARATOR ' and '
		)
	INTO 
		result
	FROM (
		
	-- 	SELECT 
	-- 		'__searchscore > 0 ' CNF,
	-- 			'__csearch' column_name, 
	-- 	'' table_name, ' ' operation
	-- where in_position='having' and @searchquery is not null
		
		SELECT 
			'__searchscore > 0 ' CNF,
			'__csearch' column_name, 
			'' table_name, ' ' operation
    	FROM ds_query
		where queryid = in_queryid and 'having' = in_position and @searchquery is not null
		

		UNION
		

		
        --  ''''''''ID''''''''
		SELECT
            concat(
                IF (
					in_position='where', getDSKeySQL(Q.table_name) ,FIELDQUOTE(concat('__id') )
				),
                ' ',
                F.operation,
                ' ',
                if( F.operation in ('is null','is not null'),' ', QUOTE(F.value) )
            )
            
             CNF,
			'__id' column_name,Q.table_name,F.operation
		FROM
			ds_query Q
			join ds_query_filter_id F
				on F.queryid = Q.queryid
				and Q.queryid = in_queryid
				and F.location = in_position
				and F.operation not in ('in','notin')
		
		UNION



		--  VARCHAR
		SELECT
            concat(
                IF (in_position='where', concat(  
				FIELDQUOTE(F.column_name) ) , FIELDQUOTE(concat(Q.table_name,'__',F.column_name)) ),
                ' ',
                F.operation,
                ' ',
                if( F.operation in ('is null','is not null'),' ', QUOTE(V.filtervalue) )
            )
            
             CNF,
			F.column_name,Q.table_name,F.operation
		FROM
			ds_column C
			join ds_query Q
				on Q.table_name = C.table_name
				and Q.queryid = in_queryid
				and C.existsreal=1
			join ds_query_filter F
				on F.queryid = Q.queryid
				and F.location = in_position
                and C.column_name = F.column_name
				and F.operation not in ('in','notin')
			join ds_query_filter_varchar V
				on V.filterid = F.filterid
		
		UNION
		
        --  DATETIME
		SELECT
			concat(
                IF (in_position='where', concat(  
				FIELDQUOTE(F.column_name) ) , FIELDQUOTE(concat(Q.table_name,'__',F.column_name)) ),
                ' ',
                F.operation,
                ' ',
                if( F.operation in ('is null','is not null'),' ', QUOTE(V.filtervalue) )
            )
             CNF,
			F.column_name,Q.table_name,F.operation
		FROM
			ds_column C
			join ds_query Q
				on Q.table_name = C.table_name
				and Q.queryid = in_queryid
				and C.existsreal=1
			join ds_query_filter F
				on F.queryid = Q.queryid
				and F.location = in_position
                and C.column_name = F.column_name
				and F.operation not in ('in','notin')
			join ds_query_filter_datetime V
				on V.filterid = F.filterid

		UNION
		
        --  TIME
		SELECT
			concat(
                IF (in_position='where', concat(  
				FIELDQUOTE(F.column_name) ) , FIELDQUOTE(concat(Q.table_name,'__',F.column_name)) ),
                ' ',
                F.operation,
                ' ',
                if( F.operation in ('is null','is not null'),' ', QUOTE(V.filtervalue) )
            )
            
             CNF,
			F.column_name,Q.table_name,F.operation
		FROM
			ds_column C
			join ds_query Q
				on Q.table_name = C.table_name
				and Q.queryid = in_queryid
				and C.existsreal=1
			join ds_query_filter F
				on F.queryid = Q.queryid
				and F.location = in_position
                and C.column_name = F.column_name
				and F.operation not in ('in','notin')
			join ds_query_filter_time V
				on V.filterid = F.filterid

		UNION
		
        --  DATE
		SELECT
			concat(
                IF (in_position='where', concat(  
				FIELDQUOTE(F.column_name) ) , FIELDQUOTE(concat(Q.table_name,'__',F.column_name)) ),
                ' ',
                F.operation,
                ' ',
                if( F.operation in ('is null','is not null'),' ', QUOTE(V.filtervalue) )
            )
            
             CNF,
			F.column_name,Q.table_name,F.operation
		FROM
			ds_column C
			join ds_query Q
				on Q.table_name = C.table_name
				and Q.queryid = in_queryid
				and C.existsreal=1
			join ds_query_filter F
				on F.queryid = Q.queryid
				and F.location = in_position
                and C.column_name = F.column_name
				and F.operation not in ('in','notin')
			join ds_query_filter_date V
				on V.filterid = F.filterid

		UNION
		
        --  BIGINT 
		SELECT
			
            concat(
                IF (in_position='where', concat(  
				FIELDQUOTE(F.column_name) ) , FIELDQUOTE(concat(Q.table_name,'__',F.column_name)) ),
                ' ',
                F.operation,
                ' ',
                if( F.operation in ('is null','is not null'),' ', QUOTE(V.filtervalue) )
            )
            
             CNF,
			F.column_name,Q.table_name,F.operation
		FROM
			ds_column C
			join ds_query Q
				on Q.table_name = C.table_name
				and Q.queryid = in_queryid
				and C.existsreal=1
			join ds_query_filter F
				on F.queryid = Q.queryid
				and F.location = in_position
                and C.column_name = F.column_name
				and F.operation not in ('in','notin')
			join ds_query_filter_bigint V
				on V.filterid = F.filterid

		UNION
		

        --  DECIMAL
		SELECT
			concat(
                IF (in_position='where', concat(  
				FIELDQUOTE(F.column_name) ) , FIELDQUOTE(concat(Q.table_name,'__',F.column_name)) ),
                ' ',
                F.operation,
                ' ',
                if( F.operation in ('is null','is not null'),' ', QUOTE(V.filtervalue) )
            )
            
             CNF,
			F.column_name,Q.table_name,F.operation
		FROM
			ds_column C
			join ds_query Q
				on Q.table_name = C.table_name
				and Q.queryid = in_queryid
				and C.existsreal=1
			join ds_query_filter F
				on F.queryid = Q.queryid
				and F.location = in_position
                and C.column_name = F.column_name
				and F.operation not in ('in','notin')
			join ds_query_filter_double V
				on V.filterid = F.filterid





        -- IN FILTER

		UNION
		--  ''''''''ID''''''''
		SELECT
            concat(
                IF (
					in_position='where', getDSKeySQL(Q.table_name) ,FIELDQUOTE(concat('__id') )
				),
                ' ',
				IF(F.operation='notin','not in','in'),
                ' (',
                GROUP_CONCAT( QUOTE(F.value) SEPARATOR ', '),
                ') '

            )
            
             CNF,
			'__id' column_name,Q.table_name,F.operation
		FROM
			ds_query Q
			join ds_query_filter_id F
				on F.queryid = Q.queryid
				and Q.queryid = in_queryid
				and F.location = in_position
				and F.operation in ('in','notin')
		HAVING operation is not null
		
        UNION

        --  IN SQL SUBQUERY
		SELECT
            concat(
                F.column_def,
                ' ',
                IF(F.operation='notinsql','not in','in'),
                ' (',F.value,') '
            )   
            
             CNF,
			F.column_def column_name, Q.table_name, F.operation
		FROM
			ds_query Q
			join ds_query_filter_sql F
				on F.queryid = Q.queryid
				and Q.queryid = in_queryid
				and F.location = 'where' and in_position='where'
				and F.operation in ('insql','notinsql')
		HAVING operation is not null

		UNION


        --  VARCHAR
		SELECT
            concat(
                IF (in_position='where', concat( 
					
				FIELDQUOTE(F.column_name) ) , FIELDQUOTE(concat(Q.table_name,'__',F.column_name)) ),
                ' ',
                IF(F.operation='notin','not in','in'),
                ' (',
                GROUP_CONCAT( QUOTE(V.filtervalue) SEPARATOR ', '),
                ') '
            )   
            
             CNF,
			F.column_name,Q.table_name,F.operation
		FROM
			ds_column C
			join ds_query Q
				on Q.table_name = C.table_name
				and Q.queryid = in_queryid
				and C.existsreal=1
			join ds_query_filter F
				on F.queryid = Q.queryid
				and F.location = in_position
                and C.column_name = F.column_name
				and F.operation in ('in','notin')
			join ds_query_filter_varchar V
				on V.filterid = F.filterid
		
        GROUP BY F.column_name
		having operation is not null




        UNION
        --  DATE
		SELECT
            concat(
                IF (in_position='where', concat( 
				FIELDQUOTE(F.column_name) ) , FIELDQUOTE(concat(Q.table_name,'__',F.column_name)) ),
                ' ',
                IF(F.operation='notin','not in','in'),
                ' (',
                GROUP_CONCAT( QUOTE(V.filtervalue) SEPARATOR ', '),
                ') '
            )   
            
             CNF,
			F.column_name,Q.table_name,F.operation
		FROM
			ds_column C
			join ds_query Q
				on Q.table_name = C.table_name
				and Q.queryid = in_queryid
				and C.existsreal=1
			join ds_query_filter F
				on F.queryid = Q.queryid
				and F.location = in_position
                and C.column_name = F.column_name
				and F.operation in ('in','notin')
			join ds_query_filter_date V
				on V.filterid = F.filterid
		
        GROUP BY F.column_name
		having operation is not null

        UNION
        --  TIME
		SELECT
            concat(
                IF (in_position='where', concat(  
				FIELDQUOTE(F.column_name) ) , FIELDQUOTE(concat(Q.table_name,'__',F.column_name)) ),
                ' ',
                IF(F.operation='notin','not in','in'),
                ' (',
                GROUP_CONCAT( QUOTE(V.filtervalue) SEPARATOR ', '),
                ') '
            )   
            
             CNF,
			F.column_name,Q.table_name,F.operation
		FROM
			ds_column C
			join ds_query Q
				on Q.table_name = C.table_name
				and Q.queryid = in_queryid
				and C.existsreal=1
			join ds_query_filter F
				on F.queryid = Q.queryid
				and F.location = in_position
                and C.column_name = F.column_name
				and F.operation in ('in','notin')
			join ds_query_filter_time V
				on V.filterid = F.filterid
		
        GROUP BY F.column_name   
		having operation is not null     

        UNION
        --  DATETIME
		SELECT
            concat(
                IF (in_position='where', concat(  
				FIELDQUOTE(F.column_name) ) , FIELDQUOTE(concat(Q.table_name,'__',F.column_name)) ),
                ' ',
                IF(F.operation='notin','not in','in'),
                ' (',
                GROUP_CONCAT( QUOTE(V.filtervalue) SEPARATOR ', '),
                ') '
            )   
            
             CNF,
			F.column_name,Q.table_name,F.operation
		FROM
			ds_column C
			join ds_query Q
				on Q.table_name = C.table_name
				and Q.queryid = in_queryid
				and C.existsreal=1
			join ds_query_filter F
				on F.queryid = Q.queryid
				and F.location = in_position
                and C.column_name = F.column_name
				and F.operation in ('in','notin')
			join ds_query_filter_datetime V
				on V.filterid = F.filterid
		
        GROUP BY F.column_name    
		having operation is not null    

        UNION
        --  BIGINT
		SELECT
            concat(
                IF (in_position='where', concat(  
				FIELDQUOTE(F.column_name) ) , FIELDQUOTE(concat(Q.table_name,'__',F.column_name)) ),
                ' ',
                IF(F.operation='notin','not in','in'),
                ' (',
                GROUP_CONCAT( QUOTE(V.filtervalue) SEPARATOR ', '),
                ') '
            )   
            
             CNF,
			F.column_name,Q.table_name,F.operation
		FROM
			ds_column C
			join ds_query Q
				on Q.table_name = C.table_name
				and Q.queryid = in_queryid
				and C.existsreal=1
			join ds_query_filter F
				on F.queryid = Q.queryid
				and F.location = in_position
                and C.column_name = F.column_name
				and F.operation in ('in','notin')
			join ds_query_filter_bigint V
				on V.filterid = F.filterid
		
        GROUP BY F.column_name    
		having operation is not null    

        UNION
        --  DECIMAL
		SELECT
            concat(
                IF (in_position='where', concat(  
				FIELDQUOTE(F.column_name) ) , FIELDQUOTE(concat(Q.table_name,'__',F.column_name)) ),
                ' ',
                IF(F.operation='notin','not in','in'),
                ' (',
                GROUP_CONCAT( QUOTE(V.filtervalue) SEPARATOR ', '),
                ') '
            )   
            
             CNF,
			F.column_name,Q.table_name,F.operation
		FROM
			ds_column C
			join ds_query Q
				on Q.table_name = C.table_name
				and Q.queryid = in_queryid
				and C.existsreal=1
			join ds_query_filter F
				on F.queryid = Q.queryid
				and F.location = in_position
                and C.column_name = F.column_name
				and F.operation in ('in','notin')
			join ds_query_filter_double V
				on V.filterid = F.filterid
		
        GROUP BY F.column_name   
		having operation is not null     

	) A;
			
	RETURN result;
END //



DROP FUNCTION IF EXISTS `getDSWhereFilter` //
CREATE FUNCTION `getDSWhereFilter`(
	in_queryid varchar(36)
)
RETURNS longtext
DETERMINISTIC
BEGIN
	RETURN getDSFilter(in_queryid,'where');
END //


DROP FUNCTION IF EXISTS `getDSHavingFilter` //
CREATE FUNCTION `getDSHavingFilter`(
	in_queryid varchar(36)
)
RETURNS longtext
DETERMINISTIC
BEGIN
	RETURN getDSFilter(in_queryid,'having');
END //


DROP PROCEDURE IF EXISTS `TEST_GET_DS_WHERE_FILTER` //
DROP PROCEDURE IF EXISTS TEST_GET_DS_WHERE_FILTER //
CREATE PROCEDURE TEST_GET_DS_WHERE_FILTER()
BEGIN
	DECLARE testsql longtext;
	DECLARE expectedsql longtext;
    SET @query=uuid();

    call initializeDSQuery(@query,'read','testdaten');
    call addDSQueryFilterByFieldName(@query,'testdaten__datum','where','<',date_add('2019-05-31',interval -14 day));
    call addDSQueryFilterByFieldName(@query,'testdaten__id','where','>=',50);
    call addDSQueryFilterByFieldName(@query,'testdaten__id','having','<',150);



    call addDSQueryFilterByFieldName(@query,'testdaten__name','where','in','Name 2');
    call addDSQueryFilterByFieldName(@query,'testdaten__name','where','in','Name 6');
    call addDSQueryFilterByFieldName(@query,'testdaten__name','where','in','Name 7');
    call addDSQueryFilterByFieldName(@query,'testdaten__name','where','in','Name 8');
    call addDSQueryFilterByFieldName(@query,'testdaten__name','where','in','Name 9');

	SET testsql = getDSWhereFilter(@query);
	SET expectedsql = '`testdaten`.`datum` < \'2019-05-17\' and `testdaten`.`id` >= \'50\' and `testdaten`.`name` in (\'Name 2\', \'Name 6\', \'Name 7\', \'Name 8\', \'Name 9\')';
    IF testsql <> expectedsql THEN
		select testsql `testsql`;
		select expectedsql `expectedsql`;
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'TEST_GET_DS_WHERE_FILTER not passed';
    END IF;

    SELECT concat('TEST_GET_DS_WHERE_FILTER passed',char(10)) ``;
END //


-- SOURCE FILE: ./src//query/015.cleanDSQuery.sql 


DROP PROCEDURE IF EXISTS cleanDSQuery //
CREATE PROCEDURE cleanDSQuery(
    in_queryid varchar(36)
) 
BEGIN
    DELETE FROM ds_query WHERE queryid = in_queryid;
    DELETE FROM ds_query WHERE createtime<date_add(now(),interval -30 second);
END //


-- SOURCE FILE: ./src//query/020.initializeDSQueryDefaults.sql 

DROP PROCEDURE IF EXISTS initializeDSQueryDefaults //
CREATE PROCEDURE initializeDSQueryDefaults(
	in in_queryid varchar(36),
	in in_table_name varchar(64)
)

BEGIN


	insert into ds_query_values (
		valueid,
		queryid,
		column_name,
		isdefault
	) 

	
	select
		uuid(),
		in_queryid,
		column_name,
		1
	from
		ds_column
	where 
		table_name = in_table_name
		and default_value <>'' 
		and default_value is not null
	;
	

	insert into ds_query_values_varchar (
		`valueid`,
		`value`
	) 
	select
		ds_query_values.`valueid`,
		ds_column.`default_value`
	from
		`ds_column`
		join `ds_query_values`
			on ds_column.table_name = in_table_name
			and ds_column.column_name = ds_query_values.column_name 
			and ds_query_values.queryid = in_queryid
	;


END //


-- SOURCE FILE: ./src//query/021.calculateDSQueryDefaultValue.sql 


DROP PROCEDURE IF EXISTS `calculateDSQueryDefaultValue` //
CREATE PROCEDURE `calculateDSQueryDefaultValue` (
    in in_queryid varchar(36),
    in in_qoutes boolean,
    inout in_value longtext

) 
DETERMINISTIC
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE loop_queryfldid VARCHAR(36);
    DECLARE str_fld longtext;
    DECLARE str_fieldvalue longtext;
    DECLARE str_column VARCHAR(64);

    DECLARE cur CURSOR FOR 
            select 
                IF(in_qoutes, QUOTE(FV.value), FV.value) fld, F.column_name
            from 
                ds_query_values  F 
                join ds_query_values_date FV 
                    on (F.valueid) = (FV.valueid)
                    and F.queryid = in_queryid

            union 

            select 
                IF(in_qoutes, QUOTE(FV.value), FV.value) fld, F.column_name
            from 
                ds_query_values  F 
                join ds_query_values_datetime FV 
                    on (F.valueid) = (FV.valueid)
                    and F.queryid = in_queryid

            union 

            select 
                IF(in_qoutes, QUOTE(FV.value), FV.value) fld, F.column_name
            from 
                ds_query_values  F 
                join ds_query_values_time FV 
                    on (F.valueid) = (FV.valueid)
                    and F.queryid = in_queryid

            union 

            select 
                IF(in_qoutes, QUOTE(FV.value), FV.value) fld, F.column_name
            from 
                ds_query_values  F 
                join ds_query_values_double FV 
                    on (F.valueid) = (FV.valueid)
                    and F.queryid = in_queryid

            union 

            select 
                IF(in_qoutes, QUOTE(FV.value), FV.value) fld, F.column_name
            from 
                ds_query_values  F 
                join ds_query_values_varchar FV 
                    on (F.valueid) = (FV.valueid)
                    and F.queryid = in_queryid

            union 

            select 
                IF(in_qoutes, QUOTE(FV.value), FV.value) fld, F.column_name
            from 
                ds_query_values  F 
                join ds_query_values_bigint FV 
                    on (F.valueid) = (FV.valueid)
                    and F.queryid = in_queryid
    ;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    SET in_value = REPLACE(in_value,'{queryid}',concat("'",in_queryid,"'"));

    OPEN cur;
    read_loop: LOOP
        FETCH cur INTO str_fld,str_column;
        IF done THEN
            LEAVE read_loop;
        END IF;
        SET in_value = REPLACE(in_value,concat('{',str_column,'}'),str_fld);
        
        SET done = false;
    END LOOP;
    CLOSE cur;

END //


-- SOURCE FILE: ./src//query/021.calculateDSQueryDefaults.sql 

DROP PROCEDURE IF EXISTS `calculateDSQueryDefaults` //
CREATE PROCEDURE `calculateDSQueryDefaults` (
    in_queryid varchar(36)
) 
DETERMINISTIC
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE str_valueid VARCHAR(36);
    DECLARE str_column_name VARCHAR(64);
    DECLARE str_table_name VARCHAR(64);
    DECLARE str_fieldvalue VARCHAR(4000);
    DECLARE result_bigint BIGINT;

    DECLARE cur CURSOR FOR select 
            ds_query.table_name,
            ds_query_values.valueid,
            ds_query_values.column_name,
            ds_query_values_varchar.value
        from 
            ds_query 
            join ds_query_values 
                on  ds_query.queryid = ds_query_values.queryid
            join ds_query_values_varchar
                on ds_query_values_varchar.valueid = ds_query_values.valueid
        WHERE 
            ds_query.queryid =  in_queryid 
            and ds_query_values.isdefault = 1
    ;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

/*

update ds_query_filter_bigint set `value`=result_bigint where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );
update ds_query_filter_varchar set `value`=result_bigint where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );
update ds_query_filter_datetime set `value`=result_bigint where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );
update ds_query_filter_double set `value`=result_bigint where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );
update ds_query_filter_date set `value`=result_bigint where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );
update ds_query_filter_time set `value`=result_bigint where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );

*/

    OPEN cur;
    read_loop: LOOP
        FETCH cur INTO str_table_name,str_valueid,str_column_name,str_fieldvalue;
        IF done THEN
            LEAVE read_loop;
        END IF;
        
        IF str_fieldvalue = '{#serial}' THEN
            call createDSNewTableIndex( str_table_name, str_column_name, result_bigint );
            call addDSQueryValue( in_queryid, str_table_name, str_column_name, result_bigint);
            update ds_query_filter_bigint set `filtervalue`=result_bigint where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );
        ELSEIF str_fieldvalue = '{DATETIME}' THEN
            call addDSQueryValue( in_queryid, str_table_name, str_column_name, now() );
            update ds_query_filter_datetime set `filtervalue`=now() where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );
        ELSEIF str_fieldvalue = '{DATE}' THEN
            call addDSQueryValue( in_queryid, str_table_name, str_column_name, CURRENT_DATE );
            update ds_query_filter_date set `filtervalue`=CURRENT_DATE where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );
        ELSEIF str_fieldvalue = '{TIME}' THEN
            call addDSQueryValue( in_queryid, str_table_name, str_column_name, CURRENT_TIME );
            update ds_query_filter_time set `filtervalue`=CURRENT_TIME where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );
        ELSEIF str_fieldvalue is not null THEN
            IF SUBSTRING(str_fieldvalue,1,2)='{:' and SUBSTRING(str_fieldvalue,length(str_fieldvalue),1)='}' THEN

                SET str_fieldvalue = SUBSTRING(str_fieldvalue,3,length(str_fieldvalue)-3) ;
                call calculateDSQueryDefaultValue( in_queryid, true, str_fieldvalue );

                -- update `ds_query_values_varchar` set `value` = str_fieldvalue where `valueid` =  str_valueid;
                -- update `ds_query_values` set `isfunction` = true where `valueid` =  str_valueid;
                SET @s=concat('update `ds_query_values_varchar` set `value` = ',str_fieldvalue,' where `valueid` =  ',quote(str_valueid));
                PREPARE stmt FROM @s;
                EXECUTE stmt;
                DEALLOCATE PREPARE stmt;

                -- nicht die beste idee
                delete from ds_query_filter where column_name = str_column_name and queryid=in_queryid;
                /*
                update ds_query_filter_bigint set `filtervalue`=str_fieldvalue where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );
                update ds_query_filter_varchar set `filtervalue`=str_fieldvalue where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );
                update ds_query_filter_datetime set `filtervalue`=str_fieldvalue where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );
                update ds_query_filter_double set `filtervalue`=str_fieldvalue where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );
                update ds_query_filter_date set `filtervalue`=str_fieldvalue where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );
                update ds_query_filter_time set `filtervalue`=str_fieldvalue where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );
                */

            ELSE


                call calculateDSQueryDefaultValue( in_queryid, false, str_fieldvalue );
                update `ds_query_values_varchar` set `value` = str_fieldvalue where `valueid` =  str_valueid;
               
                update ds_query_filter_bigint set `filtervalue`=str_fieldvalue where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );
                update ds_query_filter_varchar set `filtervalue`=str_fieldvalue where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );
                update ds_query_filter_datetime set `filtervalue`=str_fieldvalue where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );
                update ds_query_filter_double set `filtervalue`=str_fieldvalue where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );
                update ds_query_filter_date set `filtervalue`=str_fieldvalue where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );
                update ds_query_filter_time set `filtervalue`=str_fieldvalue where  filterid  in (select filterid from ds_query_filter where column_name = str_column_name and queryid=in_queryid );

            END IF;
        END IF;
        SET done = false;
    END LOOP;
    CLOSE cur;
END //
-- SOURCE FILE: ./src//query/021.initializeDSQuery.sql 

DROP PROCEDURE IF EXISTS initializeDSQuery //
CREATE PROCEDURE initializeDSQuery(
	in in_queryid varchar(36),
	in in_operation varchar(10),
	in in_table_name varchar(64)
)
BEGIN
	-- CHECK DS ACCESS HERE!
	call isDSOperationAllowed(in_table_name,in_operation);
	INSERT INTO `ds_query` (queryid,table_name,createtime,operation) VALUES (in_queryid, in_table_name, now(),in_operation)
	-- on duplicate key update table_name=values(table_name)
	;
	IF in_operation in ('append','write') THEN
		call initializeDSQueryDefaults(in_queryid, in_table_name);
	END IF;
	

END //



-- SOURCE FILE: ./src//query/022.addDSQueryValue.sql 
DELIMITER //

DROP PROCEDURE IF EXISTS addDSQueryValue //
CREATE PROCEDURE addDSQueryValue(
	in in_queryid varchar(36),
	in in_table_name varchar(64),
	in in_column_name varchar(64),
	in in_value longtext
)
BEGIN
	DECLARE use_table_name varchar(64);
	DECLARE use_data_type varchar(64);
	DECLARE use_default_value varchar(255);
	DECLARE use_isdefault varchar(255);
	DECLARE use_valueid varchar(36);
	DECLARE use_message varchar(255);
	


	SELECT table_name INTO use_table_name FROM ds_query WHERE queryid=in_queryid;

	IF (in_table_name='' and in_column_name='id') THEN
		if (in_value<>'') then
			insert into ds_query_id_value ( `queryid`,`value` ) values (in_queryid,in_value)
			on duplicate key update `value`=values(`value`);
		end if;
	END IF;

	IF use_table_name=in_table_name THEN

		SELECT data_type, default_value INTO use_data_type,use_default_value 
		FROM ds_column WHERE table_name=use_table_name and column_name=in_column_name
		and writeable=1
		and data_type not like '%(%'  
		;
		-- view columns contains parentheses



		IF use_data_type IS NOT NULL and use_data_type<>'' THEN
			SELECT valueid,isdefault INTO use_valueid,use_isdefault FROM ds_query_values WHERE queryid = in_queryid and column_name = in_column_name;
			IF use_valueid IS NULL THEN SET use_valueid=uuid(); END IF;
			
			-- CHECK IF given value matches default value, then do nothing
			IF (use_isdefault=1) and (in_value = use_default_value or in_value='') THEN
			-- IF (use_isdefault=1) and ( in_value='') THEN
				call debug_message( concat(char(10),'in_column_name ',in_column_name,char(10)) );
			ELSE 
				-- make sure that only one value exists, previous inserted values will be deleted;
				delete from ds_query_values where queryid=in_queryid and column_name=in_column_name;
				insert into ds_query_values (
					valueid,
					queryid,
					column_name,
					isdefault,
					isfunction
				) 
				values (
					uuid(),
					in_queryid,
					in_column_name,
					0,
					0
				) on duplicate key update isdefault=values(isdefault), isfunction=values(isfunction);
				IF use_data_type in ('int','tinyint','bigint') THEN
					if in_value='true' THEN SET in_value=1; END IF;
					if in_value='false' THEN SET in_value=0; END IF;
					if in_value='' THEN SET in_value=0; END IF;
					insert into ds_query_values_bigint (
						`valueid`,
						`value`
					) 
					SELECT
						ds_query_values.`valueid`,
						if( in_value is null, null, cast(in_value as signed integer) )
					FROM
						`ds_query_values`
					WHERE 
						column_name=in_column_name
						and ds_query_values.queryid=in_queryid;

				ELSEIF use_data_type in ('date') THEN
					if in_value='' THEN SET in_value=null; END IF;
					if in_value is not null THEN set in_value=substring(in_value,1,10); END IF;
					insert into ds_query_values_date (
						`valueid`,
						`value`
					) 
					SELECT
						ds_query_values.`valueid`,
						if( in_value is null, null, cast( in_value as date) )
					FROM
						`ds_query_values`
					WHERE 
						column_name=in_column_name
						and ds_query_values.queryid=in_queryid;

				ELSEIF use_data_type in ('datetime') THEN
					if in_value='' THEN SET in_value=null; END IF;
					insert into ds_query_values_datetime (
						`valueid`,
						`value`
					) 
					SELECT
						ds_query_values.`valueid`,
						if( in_value is null, null, cast( in_value as datetime) )
					FROM
						`ds_query_values`
					WHERE 
						column_name=in_column_name
						and ds_query_values.queryid=in_queryid;

				ELSEIF use_data_type in ('time') THEN
					if in_value='' THEN SET in_value=null; END IF;
					insert into ds_query_values_time (
						`valueid`,
						`value`
					) 
					SELECT
						ds_query_values.`valueid`,
						if( in_value is null, null, cast( in_value as time) )
					FROM
						`ds_query_values`
					WHERE 
						column_name=in_column_name
						and ds_query_values.queryid=in_queryid;

				ELSEIF use_data_type in ('float','double','decimal') THEN
					if in_value='' THEN SET in_value=null; END IF;
					insert into ds_query_values_double (
						`valueid`,
						`value`
					) 
					SELECT
						ds_query_values.`valueid`,
						if( in_value is null, null, cast( in_value as decimal(15,6)) )
					FROM
						`ds_query_values`
					WHERE 
						column_name=in_column_name
						and ds_query_values.queryid=in_queryid;

				ELSEIF use_data_type in ('char','varchar','text','longtext','mediumtext') THEN
					insert into ds_query_values_varchar (
						`valueid`,
						`value`
					) 
					SELECT
						ds_query_values.`valueid`,
						in_value
					FROM
						`ds_query_values`
					WHERE 
						column_name=in_column_name
						and ds_query_values.queryid=in_queryid;
				ELSE
					SET use_message = concat('Not supported data_type ',use_data_type,' in addDSQueryValue');
					SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = use_message;
				END IF;

			END IF;

		END IF;
	END IF;
END //


DROP PROCEDURE IF EXISTS addDSQueryValueByFieldName //
CREATE PROCEDURE addDSQueryValueByFieldName(
	in in_queryid varchar(36),
	in in_fieldname varchar(150),
	in in_value longtext
)
BEGIN
	DECLARE column_name varchar(64);
	DECLARE table_name varchar(64);
	
	SET table_name = SUBSTRING_INDEX(in_fieldname,'__',1);
	SET column_name = SUBSTRING_INDEX(SUBSTRING_INDEX(in_fieldname,'__',2),'__',-1);

	call addDSQueryValue(in_queryid,table_name,column_name,in_value);
	
END //

-- SOURCE FILE: ./src//query/022.setDSLimits.sql 
DROP PROCEDURE IF EXISTS setDSQueryLimits //
CREATE PROCEDURE setDSQueryLimits(
	in in_queryid varchar(36),
	in in_start integer,
	in in_limit integer
)
BEGIN
	
    IF in_limit<1 THEN SET in_limit=100;  END IF;
    IF in_start<0 THEN SET in_start=0; END IF;
    
	UPDATE `ds_query` SET query_start = in_start, query_limit = in_limit  WHERE  queryid = in_queryid;

END //

-- SOURCE FILE: ./src//query/023.addDSOrderField.sql 

DROP PROCEDURE IF EXISTS `addDSOrderField` //
CREATE PROCEDURE `addDSOrderField`
(
     in in_queryid char(36),
     in in_table_name VARCHAR(64),
     in in_column_name VARCHAR(64),
     in in_direction  VARCHAR(8),
     in in_position integer

)
BEGIN

    INSERT INTO ds_query_order_by (`queryid`,`column_name`,`direction`,`position`) 
    VALUES (in_queryid,in_column_name,in_direction,in_position)
    ON DUPLICATE KEY update `direction`=values(`direction`);

END //


DROP PROCEDURE IF EXISTS `addDSOrderFieldByFieldName` //
CREATE PROCEDURE `addDSOrderFieldByFieldName`
(
     in in_queryid char(36),
     in in_fieldname VARCHAR(150),
     in in_direction  VARCHAR(8),
     in in_position integer
)
BEGIN
    DECLARE str_table_name varchar(64);
    DECLARE str_column_name varchar(64);

    SELECT SUBSTRING_INDEX(in_fieldname,'__',1) INTO str_table_name;
    SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(in_fieldname,'__',2),'__',-1) INTO str_column_name;
    call addDSOrderField(in_queryid,str_table_name,str_column_name,in_direction,in_position);
END //

-- SOURCE FILE: ./src//query/023.addDSQueryFilter.sql 
DROP PROCEDURE IF EXISTS addDSQueryFilter //
CREATE PROCEDURE addDSQueryFilter(
	in in_queryid varchar(36),
	in in_table_name varchar(64),
	in in_column_name varchar(64),
	in in_location varchar(10),
	in in_operation varchar(15),
	in in_value longtext
)
BEGIN
	DECLARE use_table_name varchar(64);
	DECLARE use_data_type varchar(64);
	DECLARE use_filterid varchar(36);
	DECLARE use_message varchar(255);

	IF in_operation='==' THEN
		SET in_operation = '=';
	END IF;

	IF in_operation='gt' THEN
		SET in_operation = '>=';
	END IF;


	IF in_operation='eq' THEN
		SET in_operation = '=';
	END IF;

	IF in_operation='lt' THEN
		SET in_operation = '<=';
	END IF;


	IF in_operation='neq' THEN
		SET in_operation = '<>';
	END IF;



	

	SELECT table_name INTO use_table_name FROM ds_query WHERE queryid=in_queryid;

	
	IF in_table_name = '' and in_column_name='__id' THEN
		-- das __id feld wird verwendet, kombination der PRI KEY
		insert into ds_query_filter_id (
			queryid,
			`operation`,
			`location`,
			`value`
		) values (
			in_queryid,
			in_operation,
			in_location,
			in_value
		) on duplicate key update queryid=values(queryid);
	
	ELSEIF in_operation in ('insql','notinsql') THEN
		-- das __id feld wird verwendet, kombination der PRI KEY
		insert into ds_query_filter_sql (
			queryid,
			`column_def`,
			`operation`,
			`location`,
			`value`
		) values (
			in_queryid,
			in_column_name,
			in_operation,
			in_location,
			in_value
		) on duplicate key update queryid=values(queryid);
	
	ELSE
		IF use_table_name=in_table_name THEN


			SELECT data_type 
			INTO use_data_type 
			FROM ds_column 
			WHERE table_name=use_table_name and column_name=in_column_name;

			IF in_operation='is null' THEN
				SET use_data_type = 'int';
				SET in_value = '';
			END IF;


			IF use_data_type IS NOT NULL THEN
				
				SET use_filterid = uuid();
				insert into ds_query_filter (
					filterid,
					queryid,
					column_name,
					operation,
					location
				) 
				values (
					use_filterid,
					in_queryid,
					in_column_name,
					in_operation,
					in_location
				) on duplicate key update queryid=values(queryid);

				IF use_data_type in ('int','tinyint','bigint') THEN
					IF (NOT in_value REGEXP '^[0-9]+$') THEN
						SET use_data_type = 'varchar';
					END IF;
				END IF;

				IF use_data_type in ('float','double','decimal') THEN
					IF (NOT in_value REGEXP '^[0-9\.]+$') THEN
						SET use_data_type = 'varchar';
					END IF;
				END IF;


				IF use_data_type in ('date') THEN
					IF STR_TO_DATE(in_value, '%Y-%m-%d') IS NULL THEN
							SET use_data_type = 'varchar';
					END IF;
				END IF;

				IF use_data_type in ('datetime') THEN
					IF STR_TO_DATE(in_value, '%Y-%m-%d %H:%i:%s') IS NULL THEN
							SET use_data_type = 'varchar';
					END IF;
				END IF;

				IF use_data_type in ('time') THEN
					IF STR_TO_DATE(in_value, '%H:%i:%s') IS NULL THEN
							SET use_data_type = 'varchar';
					END IF;
				END IF;


				IF use_data_type in ('int','tinyint','bigint') THEN
					IF in_value='' THEN
						SET in_value = 0;
					END IF;
					insert into ds_query_filter_bigint (
						`filterid`,
						`filtervalue`
					) values (
						use_filterid,
						cast( in_value as signed integer)
					);
				ELSEIF use_data_type in ('date') THEN
					insert into ds_query_filter_date (
						`filterid`,
						`filtervalue`
					) values (
						use_filterid,
						cast( in_value as date)
					);
				ELSEIF use_data_type in ('datetime') THEN
					insert into ds_query_filter_datetime (
						`filterid`,
						`filtervalue`
					) values (
						use_filterid,
						cast( in_value as datetime)
					);
				ELSEIF use_data_type in ('time') THEN
					insert into ds_query_filter_time (
						`filterid`,
						`filtervalue`
					) values (
						use_filterid,
						cast( in_value as time)
					);
				ELSEIF use_data_type in ('float','double','decimal') THEN
					insert into ds_query_filter_double (
						`filterid`,
						`filtervalue`
					) values (
						use_filterid,
						cast( in_value as decimal(16,5) )
					);
				ELSEIF use_data_type in ('char','varchar','text','longtext','mediumtext') THEN
					insert into ds_query_filter_varchar (
						`filterid`,
						`filtervalue`
					) values (
						use_filterid,
						if( in_operation in ('like'),concat(in_value,'%'), in_value)
					);

				ELSE
					SET use_message = concat('Not supported data_type ',use_data_type,' in addDSQueryFilter *',in_column_name,'* *',in_value,'*');
					SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = use_message;
				END IF;

			END IF;
		END IF;
	END IF;
END //


DROP PROCEDURE IF EXISTS addDSQueryFilterByFieldName //
CREATE PROCEDURE addDSQueryFilterByFieldName(
	in in_queryid varchar(36),
	in in_fieldname varchar(150),
	in in_location varchar(10),
	in in_operation varchar(15),
	in in_value longtext
)
BEGIN
	DECLARE column_name varchar(64);
	DECLARE table_name varchar(64);

	IF (in_fieldname='__id') THEN
		SET table_name = '';
		SET column_name = in_fieldname;
		call addDSQueryFilter(in_queryid,table_name,column_name,in_location,in_operation,in_value);
	ELSEIF (in_operation in ('insql','notinsql') ) THEN
		SET table_name = '';
		SET column_name = in_fieldname;
		call addDSQueryFilter(in_queryid,table_name,column_name,in_location,in_operation,in_value);
	ELSE
		SET table_name = SUBSTRING_INDEX(in_fieldname,'__',1);
		SET column_name = SUBSTRING_INDEX(SUBSTRING_INDEX(in_fieldname,'__',-1),'__',1);
		call addDSQueryFilter(in_queryid,table_name,column_name,in_location,in_operation,in_value);
	END IF;
	
END //



-- SOURCE FILE: ./src//query/030.getDSRead.sql 
DELIMITER //
DROP FUNCTION IF EXISTS getDSRead //
CREATE FUNCTION `getDSRead`(
	in_queryid varchar(36),
    in_add_calc_found_rows boolean,
    in_limits boolean
)
RETURNS longtext
DETERMINISTIC
BEGIN

    DECLARE result longtext;
    DECLARE sql_where longtext;
    DECLARE sql_order longtext;
    DECLARE sql_order_last longtext;
    DECLARE sql_having longtext;
    DECLARE sql_fields longtext;
    DECLARE sql_search longtext;
    DECLARE sub_query longtext;
    DECLARE in_table_name varchar(64);
    DECLARE in_rtable_name varchar(64);
    DECLARE int_start integer;
    DECLARE int_limit integer;




    SELECT 
        if(ds.read_table is null or ds.read_table='',ds_query.table_name,ds.read_table) tn,
        ds_query.query_start,
        ds_query.query_limit,
        ds_query.table_name
    INTO in_rtable_name,int_start,int_limit,in_table_name
    FROM ds join ds_query on ds_query.table_name = ds.table_name WHERE queryid = in_queryid;


    SET sql_search = getColumnSearchJoin(in_queryid);
    

    SET sql_where = getDSWhereFilter( in_queryid );
    SET sql_order = getDSOrderByExt(in_queryid, if(@searchquery is not null, ' _searchjoin.__searchscore desc, ',' ') );
    SET sql_order_last = REPLACE(sql_order,'`.`','__');
    SET sql_having = getDSHavingFilter( in_queryid );


    SET sql_fields = getDSSelectFieldList( in_queryid );


    SET sub_query = concat('SELECT ',IF(sql_fields is null,'null __id',sql_fields),' FROM `',in_rtable_name,'` `',in_table_name,'` ',getColumnSearchJoin(in_queryid),' ',IF(sql_where is null,'',concat('WHERE ', sql_where)),'',IFNULL(sql_order,''),'');
    SET result =concat(    'SELECT ',if(in_add_calc_found_rows,'SQL_CALC_FOUND_ROWS',''),' SUB.* FROM ( ',sub_query,' ) SUB ',IF(sql_having is null,'',concat('HAVING ', sql_having)),' ', IFNULL(sql_order_last,''),    if(in_limits, concat('  LIMIT ',int_start,', ',int_limit), '')    );

    RETURN result;
END //



DROP PROCEDURE IF EXISTS TEST_GET_DS_READ //
CREATE PROCEDURE TEST_GET_DS_READ()
BEGIN
	DECLARE testsql longtext;
	DECLARE expectedsql longtext;

    SET @query=uuid();



    call initializeDSQuery(@query,'read','ds');


    call addDSOrderFieldByFieldName(@query ,'ds__id','desc',1);

    call addDSQueryFilterByFieldName(@query,'ds__id','having','<',150);
    call addDSQueryFilterByFieldName(@query,'ds__name','where','in','Name 2');

    SET testsql = trim( getDSRead(@query, false, true) );
    SET expectedsql = ' SELECT 
 
 SUB.*
 
 FROM 
 (
 
 SELECT 
 
        `testds`.`testdaten`.`brutto` AS `testdaten__brutto`, 
        `testds`.`testdaten`.`datum` AS `testdaten__datum`, 
        `testds`.`testdaten`.`datumzeit` AS `testdaten__datumzeit`, 
        `testds`.`testdaten`.`id` AS `testdaten__id`, 
        `testds`.`testdaten`.`name` AS `testdaten__name`, 
        `testds`.`testdaten`.`zeit` AS `testdaten__zeit`, 
        null __displayfield, 
        concat(`testdaten`.`id`) __id, 
        ROW_NUMBER() OVER (ORDER BY `testdaten`.`id` desc) AS __rownumber, 
        \'testdaten\' __table_name 
 FROM 
 `testdaten` 
 WHERE 
 `testdaten`.`name` in (\'Name 2\') 
 
 ORDER BY `testdaten`.`id` desc


 ) SUB
 
 HAVING `testdaten__id` < \'150\'
    ';

    IF false and trim(testsql) <> trim(expectedsql) THEN
		select concat(char(10),testsql,char(10)) `testsql`;
		select concat(char(10),expectedsql,char(10)) `expectedsql`;
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'TEST_GET_DS_READ not passed';
    END IF;

    SELECT concat('TEST_GET_DS_READ passed',char(10)) ``;

    call cleanDSQuery(@query);

END //

-- SOURCE FILE: ./src//query/030.getDSWriteTable.sql 

DROP FUNCTION IF EXISTS `getDSWriteTable` //
CREATE FUNCTION `getDSWriteTable`(
	in_table_name varchar(64)
)
RETURNS varchar(64)
DETERMINISTIC
BEGIN
    DECLARE write_table_name varchar(64);
    SELECT if(writetable is null or writetable = '',table_name,writetable) INTO write_table_name FROM ds WHERE table_name = in_table_name;
    RETURN write_table_name;
END //

-- SOURCE FILE: ./src//query/041.getDSInsertValueList.sql 

DROP FUNCTION IF EXISTS getDSInsertValueList //
CREATE FUNCTION `getDSInsertValueList`(
	in_queryid varchar(36)
)
RETURNS longtext
DETERMINISTIC
BEGIN
    DECLARE result longtext;
    DECLARE in_table_name varchar(64);
    DECLARE write_table_name varchar(64);

    SELECT table_name INTO in_table_name FROM ds_query WHERE queryid = in_queryid;
    SELECT if(writetable is null or writetable = '',table_name,writetable) INTO write_table_name FROM ds WHERE table_name = in_table_name;

    SELECT group_concat( 
        FLD
        ORDER BY column_name
        separator ', ') VAL
    INTO
        result
    FROM 
    (
        SELECT 
            IF(V.value is null,'null', if (QV.isfunction, V.value, QUOTE(V.value))) FLD,
            QV.column_name
        FROM 
            ds_query Q
            join ds_query_values QV
                on Q.queryid = QV.queryid
                and Q.queryid = in_queryid
            join ds_query_values_varchar V
                on QV.valueid = V.valueid
            join ds_column C
                on C.column_name = QV.column_name
                and C.table_name = write_table_name
                and C.existsreal = 1

        UNION 

        SELECT 
            IF(V.value is null,'null', if (QV.isfunction, V.value, QUOTE(V.value))) FLD,
            QV.column_name
        FROM 
            ds_query Q
            join ds_query_values QV
                on Q.queryid = QV.queryid
                and Q.queryid = in_queryid
            join ds_query_values_date V
                on QV.valueid = V.valueid
            join ds_column C
                on C.column_name = QV.column_name
                and C.table_name = write_table_name
                and C.existsreal = 1

        UNION 

        SELECT 
            IF(V.value is null,'null', if (QV.isfunction, V.value, QUOTE(V.value))) FLD,
            QV.column_name
        FROM 
            ds_query Q
            join ds_query_values QV
                on Q.queryid = QV.queryid
                and Q.queryid = in_queryid
            join ds_query_values_datetime V
                on QV.valueid = V.valueid
            join ds_column C
                on C.column_name = QV.column_name
                and C.table_name = write_table_name
                and C.existsreal = 1

        UNION 

        SELECT 
            IF(V.value is null,'null', if (QV.isfunction, V.value, QUOTE(V.value))) FLD,
            QV.column_name
        FROM 
            ds_query Q
            join ds_query_values QV
                on Q.queryid = QV.queryid
                and Q.queryid = in_queryid
            join ds_query_values_time V
                on QV.valueid = V.valueid
            join ds_column C
                on C.column_name = QV.column_name
                and C.table_name = write_table_name
                and C.existsreal = 1

        UNION 

        SELECT 
            IF(V.value is null,'null',  V.value ) FLD,
            QV.column_name
        FROM 
            ds_query Q
            join ds_query_values QV
                on Q.queryid = QV.queryid
                and Q.queryid = in_queryid
            join ds_query_values_bigint V
                on QV.valueid = V.valueid
            join ds_column C
                on C.column_name = QV.column_name
                and C.table_name = write_table_name
                and C.existsreal = 1


        UNION 

        SELECT 
            IF(V.value is null,'null',  V.value ) FLD,
            QV.column_name
        FROM 
            ds_query Q
            join ds_query_values QV
                on Q.queryid = QV.queryid
                and Q.queryid = in_queryid
            join ds_query_values_double V
                on QV.valueid = V.valueid
            join ds_column C
                on C.column_name = QV.column_name
                and C.table_name = write_table_name
                and C.existsreal = 1

    ) A
    ;
    
    RETURN result;
END //
-- SOURCE FILE: ./src//query/042.getDSInsertFieldList.sql 

DROP FUNCTION IF EXISTS getDSInsertFieldList //
CREATE FUNCTION `getDSInsertFieldList`(
	in_queryid varchar(36)
)
RETURNS longtext
DETERMINISTIC
BEGIN
    DECLARE result longtext;
    DECLARE in_table_name varchar(64);
    DECLARE write_table_name varchar(64);
    

    SELECT table_name INTO in_table_name FROM ds_query WHERE queryid = in_queryid;
    SELECT if(writetable is null or writetable = '',table_name,writetable) INTO write_table_name FROM ds WHERE table_name = in_table_name;

    SELECT 
        group_concat( concat('`',V.column_name,'`')  ORDER BY V.column_name separator ', ') FLD
    INTO 
        result
    FROM 

        ds_query Q
        join ds_query_values V
            on Q.queryid = V.queryid
            and Q.queryid = in_queryid
        join ds_column C
            on C.column_name = V.column_name
            and C.table_name = write_table_name
            and C.existsreal = 1
    ;

    RETURN result;
END //


-- SOURCE FILE: ./src//query/043.getDSInsertFieldUpdateList.sql 

DROP FUNCTION IF EXISTS getDSInsertFieldUpdateList //
CREATE FUNCTION `getDSInsertFieldUpdateList`(
	in_queryid varchar(36)
)
RETURNS longtext
DETERMINISTIC
BEGIN
    DECLARE result longtext;
    DECLARE in_table_name varchar(64);
    DECLARE write_table_name varchar(64);

    SELECT table_name INTO in_table_name FROM ds_query WHERE queryid = in_queryid;
    SELECT if(writetable is null or writetable = '',table_name,writetable) INTO write_table_name FROM ds WHERE table_name = in_table_name;

    SELECT 
        group_concat( concat('`',V.column_name,'` = values(`',V.column_name,'`) ') separator ', ') FLD
    INTO 
        result
    FROM 

        ds_query Q
        join ds_query_values V
            on Q.queryid = V.queryid
            and Q.queryid = in_queryid
        join ds_column C
            on C.column_name = V.column_name
            and C.table_name = write_table_name
            and C.existsreal = 1
    ;

    RETURN result;
END //


-- SOURCE FILE: ./src//query/049.getBulkInsertSQL.sql 


DROP FUNCTION IF EXISTS getBulkInsertSQL //
CREATE FUNCTION `getBulkInsertSQL`(
	in_table_name varchar(128)
)
RETURNS longtext
DETERMINISTIC
BEGIN
    DECLARE write_table_name varchar(128);
    DECLARE fldd longtext;
    DECLARE flds longtext;
    DECLARE prim longtext;
    DECLARE result longtext;
    DECLARE in_onduplicatekeyupdate boolean default true;

    SELECT if(writetable is null or writetable = '',table_name,writetable) INTO write_table_name FROM ds WHERE table_name = in_table_name;

    SELECT 
        group_concat(
            concat(
                '', ds_column.column_name,''
            )
            SEPARATOR ', '
        )
        FLD_F,

        group_concat(
            concat(
                '{',in_table_name,'__',ds_column.column_name,'}'
            )
            SEPARATOR ', '
        )
        FLD_D
    INTO 
        fldd,
        flds
    FROM 
        ds_column
    WHERE 
        table_name = write_table_name;


    SELECT 
        group_concat(
            concat(
                ds_column.column_name,'=','(',ds_column.column_name,')'
            )
            SEPARATOR ', '
        )
        FLD_D
    INTO 
        prim
    FROM 
        ds_column
    WHERE 
        table_name = write_table_name
        and is_primary=1;




    SET result =concat( 
        'INSERT INTO `',write_table_name,'` ( ',fldd,' ) VALUES <bulk>(',flds,')</bulk>',
        if(in_onduplicatekeyupdate,concat('  ON DUPLICATE KEY UPDATE ',prim,''),'')
    );
    RETURN result;
END //

-- SOURCE FILE: ./src//query/049.getDSInsert.sql 

DROP FUNCTION IF EXISTS getDSInsert //
CREATE FUNCTION `getDSInsert`(
	in_queryid varchar(36),
    in_onduplicatekeyupdate boolean
)
RETURNS longtext
DETERMINISTIC
BEGIN
    DECLARE result longtext;
    DECLARE in_table_name varchar(64);
    DECLARE write_table_name varchar(64);
    SELECT table_name INTO in_table_name FROM ds_query WHERE queryid = in_queryid;
    SELECT if(writetable is null or writetable = '',table_name,writetable) INTO write_table_name FROM ds WHERE table_name = in_table_name;
    SET result =concat(
        'INSERT INTO `',write_table_name,'` ( ',getDSInsertFieldList(in_queryid),' ) VALUES (',getDSInsertValueList(in_queryid),')',
        if(in_onduplicatekeyupdate,concat('  ON DUPLICATE KEY UPDATE ',getDSInsertFieldUpdateList(in_queryid),''),'')
    );
    RETURN result;
END //


/*

DROP PROCEDURE IF EXISTS TEST_GET_DS_INSERT //
CREATE PROCEDURE TEST_GET_DS_INSERT()
BEGIN
	DECLARE testsql longtext;





    update ds_column set default_value='{#serial}' where table_name='ds' and column_name='id';
    update ds_column set default_value='{:now()}' where table_name='ds' and column_name='datum';

    SET @query=uuid();

	call initializeDSQuery(@query,'append','preiskategorien');
	call addDSOrderFieldByFieldName(@query ,'preiskategorien__id','desc',1);
	call addDSQueryValueByFieldName(@query,'preiskategorien__name','NEUER WERT');
	call addDSQueryValueByFieldName(@query,'preiskategorien__brutto','0.15234');
	call addDSQueryValueByFieldName(@query,'preiskategorien__id','{#serial}');


    call calculateDSQueryDefaults(@query);
    
    SET @s = getDSInsert(@query,false);
    prepare stmt from @s;
    execute stmt;
    deallocate prepare stmt;

    call cleanDSQuery(@query);
    
END //



*/
-- SOURCE FILE: ./src//query/050.getDSPrimaryKeyValueFilter.sql 


DROP FUNCTION IF EXISTS `getDSPrimaryKeyValueFilter` //
CREATE FUNCTION `getDSPrimaryKeyValueFilter`(
    in_queryid varchar(36),
    in_separator varchar(5)
) 
RETURNS longtext
DETERMINISTIC
BEGIN
    DECLARE wherelist longtext;

    DECLARE in_table_name varchar(64);
    DECLARE write_table_name varchar(64);

    SELECT table_name INTO in_table_name FROM ds_query WHERE queryid = in_queryid;
    SELECT if(writetable is null or writetable = '',table_name,writetable) INTO write_table_name FROM ds WHERE table_name = in_table_name;

    

    select group_concat( concat(  '`',table_name, in_separator, column_name, '` = ',fld  ) order by column_name separator ' and ' ) into wherelist 
    from 
    (
        select 
            fld, column_name,table_name
        from (

            select 
                concat( IF( QV.isfunction, V.value , QUOTE(V.value) ) ) fld, QV.column_name, Q.table_name, C.column_key
            from 
                ds_query Q
                join ds_query_values QV
                    on Q.queryid = QV.queryid
                    and Q.queryid = in_queryid
                join ds_query_values_varchar V
                    on QV.valueid = V.valueid
                join ds_column C
                    on C.column_name = QV.column_name
                    and C.table_name = write_table_name
                    and C.existsreal = 1

            union 

            select 
                concat( IF( QV.isfunction, V.value , QUOTE(V.value) ) ) fld, QV.column_name, Q.table_name, C.column_key
            from 
                ds_query Q
                join ds_query_values QV
                    on Q.queryid = QV.queryid
                    and Q.queryid = in_queryid
                join ds_query_values_time V
                    on QV.valueid = V.valueid
                join ds_column C
                    on C.column_name = QV.column_name
                    and C.table_name = write_table_name
                    and C.existsreal = 1


            union 

            select 
                concat( IF( QV.isfunction, V.value , QUOTE(V.value) ) ) fld, QV.column_name, Q.table_name, C.column_key
            from 
                ds_query Q
                join ds_query_values QV
                    on Q.queryid = QV.queryid
                    and Q.queryid = in_queryid
                join ds_query_values_date V
                    on QV.valueid = V.valueid
                join ds_column C
                    on C.column_name = QV.column_name
                    and C.table_name = write_table_name
                    and C.existsreal = 1


            union 

            select 
                concat( IF( QV.isfunction, V.value , QUOTE(V.value) ) ) fld, QV.column_name, Q.table_name, C.column_key
            from 
                ds_query Q
                join ds_query_values QV
                    on Q.queryid = QV.queryid
                    and Q.queryid = in_queryid
                join ds_query_values_datetime V
                    on QV.valueid = V.valueid
                join ds_column C
                    on C.column_name = QV.column_name
                    and C.table_name = write_table_name
                    and C.existsreal = 1


            union 

            select 
                concat( IF( QV.isfunction, V.value , (V.value) ) ) fld, QV.column_name, Q.table_name, C.column_key
            from 
                ds_query Q
                join ds_query_values QV
                    on Q.queryid = QV.queryid
                    and Q.queryid = in_queryid
                join ds_query_values_double V
                    on QV.valueid = V.valueid
                join ds_column C
                    on C.column_name = QV.column_name
                    and C.table_name = write_table_name
                    and C.existsreal = 1


            union 

            select 
                concat( IF( QV.isfunction, V.value , (V.value) ) ) fld, QV.column_name, Q.table_name, C.column_key
            from 
                ds_query Q
                join ds_query_values QV
                    on Q.queryid = QV.queryid
                    and Q.queryid = in_queryid
                join ds_query_values_bigint V
                    on QV.valueid = V.valueid
                join ds_column C
                    on C.column_name = QV.column_name
                    and C.table_name = write_table_name
                    and C.existsreal = 1

        ) subsel 

    ) abc
    where 
    column_name in (
        select column_name from ds_column where table_name= in_table_name and is_primary=1
    )
    ;


    IF wherelist is null or wherelist='' THEN
        SET wherelist = 'false';
    END IF;

    RETURN wherelist;

END //



-- SOURCE FILE: ./src//query/051.getDSUpdateValueList.sql 


DROP FUNCTION IF EXISTS getDSUpdateValueList //
CREATE FUNCTION `getDSUpdateValueList`(
	in_queryid varchar(36)
)
RETURNS longtext
READS SQL DATA


BEGIN
    DECLARE result longtext;
    DECLARE in_table_name varchar(64);
    DECLARE write_table_name varchar(64);

    SELECT table_name INTO in_table_name FROM ds_query WHERE queryid = in_queryid;
    SELECT if(writetable is null or writetable = '',table_name,writetable) INTO write_table_name FROM ds WHERE table_name = in_table_name;

    SELECT group_concat( 
        concat( FIELDQUOTE(column_name),'=',FLD ) 
        ORDER BY column_name
        separator ', ') VAL
    INTO
        result
    FROM 
    (
        SELECT 
            IF(V.value is null,'null', if (QV.isfunction, (V.value), QUOTE(V.value))) FLD,
            QV.column_name
        FROM 
            ds_query Q
            join ds_query_values QV
                on Q.queryid = QV.queryid
                and Q.queryid = in_queryid
            join ds_query_values_varchar V
                on QV.valueid = V.valueid
            join ds_column C
                on C.column_name = QV.column_name
                and C.table_name = write_table_name
                and C.writeable = 1
                and C.existsreal = 1

        UNION 

        SELECT 
            IF(V.value is null,'null', if (QV.isfunction, V.value, QUOTE(V.value))) FLD,
            QV.column_name
        FROM 
            ds_query Q
            join ds_query_values QV
                on Q.queryid = QV.queryid
                and Q.queryid = in_queryid
            join ds_query_values_date V
                on QV.valueid = V.valueid
            join ds_column C
                on C.column_name = QV.column_name
                and C.table_name = write_table_name
                and C.writeable = 1
                and C.existsreal = 1

        UNION 

        SELECT 
            IF(V.value is null,'null', if (QV.isfunction, V.value, QUOTE(V.value))) FLD,
            QV.column_name
        FROM 
            ds_query Q
            join ds_query_values QV
                on Q.queryid = QV.queryid
                and Q.queryid = in_queryid
            join ds_query_values_datetime V
                on QV.valueid = V.valueid
            join ds_column C
                on C.column_name = QV.column_name
                and C.table_name = write_table_name
                and C.writeable = 1
                and C.existsreal = 1

        UNION 

        SELECT 
            IF(V.value is null,'null', if (QV.isfunction, V.value, QUOTE(V.value))) FLD,
            QV.column_name
        FROM 
            ds_query Q
            join ds_query_values QV
                on Q.queryid = QV.queryid
                and Q.queryid = in_queryid
            join ds_query_values_time V
                on QV.valueid = V.valueid
            join ds_column C
                on C.column_name = QV.column_name
                and C.table_name = write_table_name
                and C.writeable = 1
                and C.existsreal = 1

        UNION 

        SELECT 
            IF(V.value is null,'null',  V.value ) FLD,
            QV.column_name
        FROM 
            ds_query Q
            join ds_query_values QV
                on Q.queryid = QV.queryid
                and Q.queryid = in_queryid
            join ds_query_values_bigint V
                on QV.valueid = V.valueid
            join ds_column C
                on C.column_name = QV.column_name
                and C.table_name = write_table_name
                and C.writeable = 1
                and C.existsreal = 1


        UNION 

        SELECT 
            IF(V.value is null,'null',  V.value ) FLD,
            QV.column_name
        FROM 
            ds_query Q
            join ds_query_values QV
                on Q.queryid = QV.queryid
                and Q.queryid = in_queryid
            join ds_query_values_double V
                on QV.valueid = V.valueid
            join ds_column C
                on C.column_name = QV.column_name
                and C.table_name = write_table_name
                and C.writeable = 1
                and C.existsreal = 1

    ) A
    ;
    
    RETURN result;
END //
-- SOURCE FILE: ./src//query/059.getDSUpdate.sql 

DROP FUNCTION IF EXISTS getDSUpdate //
CREATE FUNCTION `getDSUpdate`(
	in_queryid varchar(36)
)
RETURNS longtext
DETERMINISTIC
BEGIN
    DECLARE result longtext;
    DECLARE in_table_name varchar(64);
    DECLARE write_table_name varchar(64);
    DECLARE read_table_name varchar(64);
    DECLARE query_idvalue longtext;

    SELECT table_name INTO in_table_name FROM ds_query WHERE queryid = in_queryid;

    SELECT if(writetable is null or writetable = '',table_name,writetable) INTO write_table_name FROM ds WHERE table_name = in_table_name;
    SELECT if(read_table is null or read_table = '',table_name,read_table) INTO read_table_name FROM ds WHERE table_name = in_table_name;

    IF read_table_name<>in_table_name THEN 
     RETURN getDSInsert(in_queryid,true);
    END IF;

    SELECT `value` into query_idvalue from  ds_query_id_value where  queryid = in_queryid;
    if query_idvalue is not null then

        SET result =concat('UPDATE `',write_table_name,'` SET ',getDSUpdateValueList(in_queryid),
        ' WHERE ', concat(getDSKeySQL(in_table_name),'=',quote(query_idvalue)) );

    ELSE

        SET result =concat('UPDATE `',write_table_name,'` SET ',getDSUpdateValueList(in_queryid),
        ' WHERE ',getDSPrimaryKeyValueFilter(in_queryid,'`.`'));
        
    end if;

    
    RETURN result;
END //



DROP PROCEDURE IF EXISTS TEST_GET_DS_UPDATE //
CREATE PROCEDURE TEST_GET_DS_UPDATE()
BEGIN
	DECLARE testsql longtext;

    update ds_column set default_value='{#serial}' where table_name='testdaten' and column_name='id';
    update ds_column set default_value='{:now()}' where table_name='testdaten' and column_name='datum';




    
    SET @query=uuid();
    call initializeDSQuery(@query,'write','testdaten');
    call addDSOrderFieldByFieldName(@query ,'testdaten__id','desc',1);
    call addDSQueryValueByFieldName(@query,'testdaten__name','NEUER WERT');
    call addDSQueryValueByFieldName(@query,'testdaten__brutto','0.15234');
    call addDSQueryValueByFieldName(@query,'testdaten__id','1');
    call addDSQueryValueByFieldName(@query,'testdaten__checkde','');


    call calculateDSQueryDefaults(@query);
    SET @s = getDSUpdate(@query);
    select @s;
    prepare stmt from @s;
    execute stmt;
    deallocate prepare stmt;

    call cleanDSQuery(@query);


END //


-- SOURCE FILE: ./src//query/069.getDSDelete.sql 

DROP FUNCTION IF EXISTS getDSDelete //
CREATE FUNCTION `getDSDelete`(
	in_queryid varchar(36)
)
RETURNS longtext
DETERMINISTIC
BEGIN
    DECLARE result longtext;
    DECLARE in_table_name varchar(64);
    DECLARE write_table_name varchar(64);
    SELECT table_name INTO in_table_name FROM ds_query WHERE queryid = in_queryid;
    SELECT if(writetable is null or writetable = '',table_name,writetable) INTO write_table_name FROM ds WHERE table_name = in_table_name;
    SET result =concat('DELETE  FROM `',write_table_name,'` WHERE ',getDSPrimaryKeyValueFilter(in_queryid,'`.`'));
    RETURN result;
END //

-- SOURCE FILE: ./src//query/090.getNextPossibleBookingDate.sql 
DROP FUNCTION IF EXISTS getNextPossibleBookingDate //
CREATE FUNCTION getNextPossibleBookingDate(in_date date) 
RETURNS longtext
DETERMINISTIC
BEGIN 
    DECLARE buchhaltungsabschluss_start date;
    DECLARE buchhaltungsabschluss_stop date;
    DECLARE buchhaltungsabschluss_laststart date;

    select 
        date_add( cast( concat(  replace(max(buchungsperiode),'.','-'),'-01') as date),interval 1 month ),
        date_add( date_add( cast( concat(  replace(max(buchungsperiode),'.','-'),'-01') as date),interval 2 month ),interval -1 day),
        current_date
    into 
        buchhaltungsabschluss_start,
        buchhaltungsabschluss_laststart,
        buchhaltungsabschluss_stop
    from 
        buchhaltungsabschluss
    ;

    if  (in_date between buchhaltungsabschluss_start and buchhaltungsabschluss_laststart) and buchhaltungsabschluss_stop > buchhaltungsabschluss_laststart  then
        return buchhaltungsabschluss_laststart;
    end if;

    if  in_date between buchhaltungsabschluss_start and buchhaltungsabschluss_stop then
        return in_date;
    end if;

    return buchhaltungsabschluss_stop;

END //

-- SOURCE FILE: ./src//query/099.getColumnSearch.sql 
DROP FUNCTION IF EXISTS getColumnSearch //
CREATE FUNCTION `getColumnSearch`(
	in_queryid varchar(36)
)
RETURNS longtext
DETERMINISTIC
BEGIN
    DECLARE result longtext;
    
    DECLARE in_table_name varchar(64);
    DECLARE primarykey_txt longtext;
    DECLARE primarykey_txt_prefixed longtext;

    IF @searchquery is not null THEN 
        SELECT table_name INTO in_table_name FROM ds_query WHERE queryid = in_queryid;
        IF in_table_name is null THEN
            SET in_table_name = in_queryid;
        END IF;

        select 
            group_concat(
                FIELDQUOTE(ds_column.column_name) order by ds_column.column_name
                SEPARATOR  ', '
            ),
            group_concat(
                concat(ds_column.table_name,'__',ds_column.column_name) order by ds_column.column_name
                SEPARATOR  ', '
            )
        into 
            primarykey_txt,
            primarykey_txt_prefixed
        from 
            ds_column
        where 
            ds_column.table_name = in_table_name
            and ds_column.existsreal = 1
            and ds_column.is_primary = 1
        ;
        
        select
            concat(' (',primarykey_txt ,') in  (select ',primarykey_txt,'  from (select ',primarykey_txt,',avg(__searchscore) __searchscore from ( ',s,' ) c group by  ',primarykey_txt,' order by __searchscore desc) xy) ')
        INTO result

        FROM 
        (
        SELECT

            group_concat(
                concat('select ',primarykey_txt,', MATCH(',FIELDQUOTE(column_name),') against (',QUOTE(@searchquery),' in boolean mode) __searchscore from ',
                FIELDQUOTE(in_table_name),
                ' WHERE MATCH(',FIELDQUOTE(column_name),') against (',QUOTE(@searchquery),' in boolean mode)  ')
                separator ' union '
            ) S
        FROM 
            ds_searchfields
        WHERE ds_searchfields.active = 1 and ds_searchfields.table_name = in_table_name
        ) x
    ;
    END IF;
    IF result is null THEN
        SET result = 'true';
    END IF;
	return result;
END //





DROP FUNCTION IF EXISTS getColumnSearchJoin //
CREATE FUNCTION `getColumnSearchJoin`(
	in_queryid varchar(36)
)
RETURNS longtext
DETERMINISTIC
BEGIN
    DECLARE result longtext;
    
    DECLARE in_table_name varchar(64);
    DECLARE in_read_table_name varchar(64);
    DECLARE primarykey_txt longtext;
    DECLARE primarykey_txt_prefixed longtext;
    DECLARE primarykey_txt_prefixed2 longtext;

    IF @searchquery is not null THEN 
        SELECT ds_query.table_name,if(ds.read_table is null or ds.read_table='',ds.table_name,ds.read_table) rt INTO in_table_name,in_read_table_name 
        FROM ds_query join ds on ds_query.table_name = ds.table_name
        WHERE queryid = in_queryid;
        IF in_table_name is null THEN
            SET in_table_name = in_queryid;
        END IF;

        select 
            group_concat(
                FIELDQUOTE(ds_column.column_name) order by ds_column.column_name
                SEPARATOR  ', '
            ),
            group_concat(
                concat('`',ds_column.table_name,'`.`',ds_column.column_name,'`') order by ds_column.column_name
                SEPARATOR  ', '
            ),
            group_concat(
                concat('`_searchjoin`.`',ds_column.column_name,'`') order by ds_column.column_name
                SEPARATOR  ', '
            )
        into 
            primarykey_txt,
            primarykey_txt_prefixed,
            primarykey_txt_prefixed2
        from 
            ds_column
        where 
            ds_column.table_name = in_table_name
            and ds_column.existsreal = 1
            and ds_column.is_primary = 1
        ;
        
        select
            concat(' LEFT JOIN  (select ',primarykey_txt,',sum(__searchscore) __searchscore from ( ',s,' ) c group by  ',primarykey_txt,' order by __searchscore desc) _searchjoin on  (',primarykey_txt_prefixed ,') = (',primarykey_txt_prefixed2 ,')  ')
        INTO result

        FROM 
        (
            /*
            SELECT

                group_concat(
                    concat('select ',primarykey_txt,', MATCH(',FIELDQUOTE(column_name),') against (',QUOTE(@searchquery),' in boolean mode) __searchscore from ',
                    FIELDQUOTE(in_table_name),
                    ' WHERE MATCH(',FIELDQUOTE(column_name),') against (',QUOTE(@searchquery),' in boolean mode)  '),' union ',
                    concat( 'select ',primarykey_txt,', 0.01 __searchscore from ', FIELDQUOTE(in_table_name) ,' where ',FIELDQUOTE(column_name),' like ',QUOTE(concat('%',@searchquery,'%') ),'' )
                    separator ' union '
                ) S
            FROM 
                ds_searchfields
            WHERE ds_searchfields.active = 1 and ds_searchfields.table_name = in_table_name
            */

            SELECT 

                group_concat( sx  separator ' union ' ) S

            FROM (
                SELECT

                    
                        concat( 

                            concat('select ',primarykey_txt,', MATCH(',FIELDQUOTE(column_name),') against (',QUOTE(@searchquery),' in boolean mode) __searchscore from ',
                            FIELDQUOTE(in_table_name),
                            ' WHERE MATCH(',FIELDQUOTE(column_name),') against (',QUOTE(@searchquery),' in boolean mode)  '),' union ',
                            concat( 'select ',primarykey_txt,', 0.01 __searchscore from ', FIELDQUOTE(in_table_name) ,' where ',FIELDQUOTE(column_name),' like ',QUOTE(concat('%',@searchquery,'%') ),'' )
                        ) sx
                    
                FROM 
                    ds_searchfields
                WHERE ds_searchfields.active = 1 and ds_searchfields.table_name = in_table_name

                UNION

                select 
                concat( 'select ',primarykey_txt,', 0.02 __searchscore from ', FIELDQUOTE(in_read_table_name) ,' where ',FIELDQUOTE(ds.searchfield),' like ',QUOTE(concat('%',@searchquery,'%') ),'' ) sx
                FROM ds
                WHERE 
                    ds.table_name = in_table_name
            ) UX 
        ) x
    ;
    END IF;
    IF result is null THEN
        SET result = ' ';
    END IF;
	return result;
END //
-- SOURCE FILE: ./src//query/basic.sql 

-- SOURCE FILE: ./src//sap/999.blg_sap_export.sql 





/*
DROP PROCEDURE IF EXISTS `BLG_SAP_EXPORT` //
CREATE PROCEDURE `BLG_SAP_EXPORT`(  IN in_dbname varchar(150) )
    MODIFIES SQL DATA
BEGIN

    DECLARE done INT DEFAULT FALSE;
    DECLARE loop_t_name VARCHAR(50);

    DECLARE cur CURSOR FOR SELECT lower(table_name) table_name FROM information_schema.tables WHERE table_schema = in_dbname and table_type in ('BASE TABLE','VIEW') ;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    call UPDATE_DS_TABLES_DDL();


    SET @s=concat( 'update ',in_dbname,'.ds set existsreal=0 ');
    PREPARE stmt1 FROM @s;
    execute stmt1;
    DEALLOCATE PREPARE stmt1;


OPEN cur;
read_loop: LOOP
  FETCH cur INTO loop_t_name;

  IF done THEN
    LEAVE read_loop;
  END IF;
  

  call debug_message(concat('tablename ',loop_t_name));

  SET @s=concat('insert into ',in_dbname,'.ds (table_name,existsreal,combined) values (\'',loop_t_name,'\',1,0) on duplicate key update existsreal=values(existsreal), `combined`=values(`combined`) ');
  PREPARE stmt1 FROM @s;
  execute stmt1;
  DEALLOCATE PREPARE stmt1;
  SET done=false;


  call debug_message(concat('tablename 2',loop_t_name));


  call UPDATE_DS_COLUMN_SETUP(in_dbname,loop_t_name);


  call debug_message(concat('tablename 3',loop_t_name));

  SET done=false;
END LOOP;
CLOSE cur;



-- Diese tabelle wir im Regelfall von der Session Middleware erzeugt
-- Dies Standardrollen werden immer ergänzt

UPDATE ds_access SET `existsreal`=0;
INSERT INTO ds_access (`table_name`,`role`,`existsreal`)  SELECT ds.`table_name`,VIEW_SESSION_GROUPS.`group`,1 `existsreal` FROM ds,VIEW_SESSION_GROUPS ON duplicate key update `existsreal`=values(`existsreal`);
 



CALL UPDATE_DS_REFERENCED_TABLES( in_dbname );
CALL UPDATE_DS_MV_REFERENCED_TABLES(   );
CALL UPDATE_DS_LOCAL_META_DATA();


END //


*/
-- SOURCE FILE: ./src//test-rest.sql 


DELIMITER //

/*
CREATE PROCEDURE createRecords(IN `data` JSON)
BEGIN
    DECLARE i INT;
    DECLARE row_count INT;
    DECLARE jsonrow JSON;
    DECLARE fields JSON;
    
    DECLARE sqlstatement LONGTEXT;

    SET row_count = JSON_LENGTH(`data`);
    SET i = 1;
    START TRANSACTION;


    WHILE i <= row_count DO
        SELECT JSON_EXTRACT(`data`,CONCAT('$[',i,']')) INTO jsonrow;
        SELECT JSON_KEYS(`jsonrow`,CONCAT('$[',i,']')) INTO fields;
    
        IF (sqlstatement is null) THEN
            SELECT 
                'insert into `',`table_name`,'` (', 
                group_concat(
                    concat(`table_name`,'.',`column_name`)
                    order by column_name
                    separator ','
                ),
                ') values (',
                group_concat(
                    concat('{',`table_name`,'__',`column_name`,'}')
                    order by column_name
                    separator ','
                )
            FROM 
                ds_column
            INTO sqlstatement
            
            WHERE 
                existsreal=1
                and table_name = JSON_VALUE(jsonrow,'$.__table_name')
                and JSON_CONTAINS(fields,concat(`table_name`,'__',`column_name`))

        END IF;


        INSERT INTO testdaten (id,name,datum,datumzeit,zeit,brutto)  select i id, concat('Name ',i) name,date_add(current_date, interval (RAND()*-100) DAY) dt, now(), CURRENT_TIME,RAND() br;
        SET i = i + 1;
    END WHILE;
    COMMIT;
     
END //
*/

-- SOURCE FILE: ./src//ui/099.replaceDefaultDefinitionVars.sql 
DELIMITER //

DROP FUNCTION IF EXISTS `replaceDefaultDefinitionVars` //
CREATE FUNCTION `replaceDefaultDefinitionVars`(in_table_name varchar(64),source_text longtext)
RETURNS longtext
READS SQL DATA

COMMENT '
# replaceDefaultDefinitionVars

`replaceDefaultDefinitionVars` 

# Parameter
    * `in_table_name` the table name for the store
    * `source_text`

'
BEGIN 
    DECLARE ds_name varchar(64);
    DECLARE title varchar(255);
    DECLARE lowerprefix varchar(32) default '';
    DECLARE table_name_lower varchar(64);
    DECLARE default_pagesize varchar(15);
    DECLARE listxtypeprefix varchar(15);
    DECLARE quicksearch_minchars integer default 3;
    DECLARE listviewbaseclass varchar(255);
    DECLARE globalsearch varchar(15);
    DECLARE showactionbtn varchar(15);

    
    DECLARE hint longtext;


    SELECT 
        ifnull(ds.title,'ds.title not set'),
        '' hint,
        ifnull(ds.default_pagesize,1000),
        if ( ifnull(ds.listxtypeprefix,'')='','listview',ifnull(ds.listxtypeprefix,'') ),
        if ( ifnull(ds.listviewbaseclass,'')='','Tualo.DataSets.ListView',ifnull(ds.listviewbaseclass,'') ),
        if(ifnull(ds.showactionbtn,1)=1,'true','false'),
        if(ifnull(ds.globalsearch,1)=1,'true','false')

    INTO 
        title,
        hint,
        default_pagesize,
        listxtypeprefix,
        listviewbaseclass,
        showactionbtn,
        globalsearch
    FROM ds WHERE ds.table_name = in_table_name;


--    IF (source_text is null) THEN SET @errormsg = (concat('replaceDefaultDefinitionVars source_text is null  ',in_table_name));  SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;  END IF;


    SET table_name_lower = LOWER(in_table_name);
    SET ds_name = CONCAT(LEFT(UCASE(in_table_name),1),SUBSTRING(table_name_lower,2));
    SET source_text = REPLACE(source_text,'[{table_name_lower}]',table_name_lower);

    
--    IF (source_text is null) THEN SET @errormsg = (concat('replaceDefaultDefinitionVars  null after table_name_lower ',in_table_name));  SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;  END IF;

    SET source_text = REPLACE(source_text,'[{ds_name}]',ds_name);
--    IF (source_text is null) THEN SET @errormsg = (concat('replaceDefaultDefinitionVars  null after ds_name ',in_table_name));  SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;  END IF;

    SET source_text = REPLACE(source_text,'[{lowerprefix}]',lowerprefix);
--    IF (source_text is null) THEN SET @errormsg = (concat('replaceDefaultDefinitionVars  null after lowerprefix ',in_table_name));  SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;  END IF;


    SET source_text = REPLACE(source_text,'[{hint}]',ifnull(hint,''));
--    IF (source_text is null) THEN SET @errormsg = (concat('replaceDefaultDefinitionVars  null after hint ',in_table_name));  SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;  END IF;

    SET source_text = REPLACE(source_text,'[{title}]',ifnull(title,'not set'));
--    IF (source_text is null) THEN SET @errormsg = (concat('replaceDefaultDefinitionVars  null after title ',in_table_name));  SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;  END IF;

    SET source_text = REPLACE(source_text,'[{default_pagesize}]',ifnull(default_pagesize,50));
--    IF (source_text is null) THEN SET @errormsg = (concat('replaceDefaultDefinitionVars  null after default_pagesize ',in_table_name));  SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;  END IF;
    
    
    SET source_text = REPLACE(source_text,'[{listxtypeprefix}]',ifnull(listxtypeprefix,''));
--    IF (source_text is null) THEN SET @errormsg = (concat('replaceDefaultDefinitionVars  null after listxtypeprefix ',in_table_name));  SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;  END IF;

    SET source_text = REPLACE(source_text,'[{globalsearch}]',ifnull(globalsearch,0));
--    IF (source_text is null) THEN SET @errormsg = (concat('replaceDefaultDefinitionVars  null after globalsearch ',in_table_name));  SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;  END IF;

    SET source_text = REPLACE(source_text,'[{listviewbaseclass}]',ifnull(listviewbaseclass,''));
--    IF (source_text is null) THEN SET @errormsg = (concat('replaceDefaultDefinitionVars  null after listviewbaseclass ',in_table_name));  SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;  END IF;
    
    


    SET source_text = REPLACE(source_text,'[{showactionbtn}]',ifnull(showactionbtn,0));
--    IF (source_text is null) THEN SET @errormsg = (concat('replaceDefaultDefinitionVars  null after showactionbtn ',in_table_name));  SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;  END IF;

    SET source_text = REPLACE(source_text,'[{quicksearch_minchars}]',ifnull(quicksearch_minchars,5));
--    IF (source_text is null) THEN SET @errormsg = (concat('replaceDefaultDefinitionVars  null after quicksearch_minchars ',in_table_name));  SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;  END IF;


    RETURN source_text;
END //

-- SOURCE FILE: ./src//ui/110.getJSClass.sql 
DELIMITER //

DROP FUNCTION IF EXISTS `getJSClass` //
CREATE FUNCTION `getJSClass`(in_name varchar(255))
RETURNS longtext
READS SQL DATA
COMMENT '
# getJSClass

`getJSClass`return the JS Controll Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE result longtext default '';
    DECLARE basename varchar(255);

    SET basename = 'Tualo.DataSets.models.list.'; IF LOCATE( basename , in_name)=1 THEN RETURN getListViewModel( lower( REPLACE( in_name, basename, '' ) ) );  END IF;
    SET basename = 'Tualo.DataSets.controller.list.'; IF LOCATE( basename , in_name)=1 THEN RETURN getListViewController( lower( REPLACE( in_name, basename, '' )  ) );  END IF;
    
    SET basename = 'Tualo.DataSets.controller.'; IF LOCATE( basename , in_name)=1 THEN RETURN getViewportController( lower( REPLACE( in_name, basename, '' ) ) );  END IF;
    SET basename = 'Tualo.DataSets.models.'; IF LOCATE( basename , in_name)=1 THEN RETURN getViewportModel( lower( REPLACE( in_name, basename, '' ) ) );  END IF;
    SET basename = 'Tualo.DataSets.views.'; IF LOCATE( basename , in_name)=1 THEN RETURN getViewport( lower( REPLACE( in_name, basename, '' ) ) );  END IF;
    SET basename = 'Tualo.DataSets.globalsearch.'; IF LOCATE( basename , in_name)=1 THEN RETURN getGlobalSearch( lower( REPLACE( in_name, basename, '' ) ) );  END IF;
    SET basename = 'Tualo.DataSets.stores.'; IF LOCATE( basename , in_name)=1 THEN RETURN getStoreDefinition( lower( REPLACE( in_name, basename, '' ) ) );  END IF;
    SET basename = 'Tualo.DataSets.columnstore.'; IF LOCATE( basename , in_name)=1 THEN RETURN getColumnsStore( lower( REPLACE( in_name, basename, '' ) ) );  END IF;
    SET basename = 'Tualo.DataSets.model.'; IF LOCATE( basename , in_name)=1 THEN RETURN getModelDefinition( lower( REPLACE( in_name, basename, '' ) ) );  END IF;
    SET basename = 'Tualo.DataSets.list.'; IF LOCATE( basename , in_name)=1 THEN RETURN getListViewport( lower( REPLACE( in_name, basename, '' ) ) );  END IF;

    -- Tualo.DataSets.store.Basic
    SET result = 'x';
    RETURN result;
END //

/*

select getJSClass('Tualo.DataSets.controller.Ds') \G
select getJSClass('Tualo.DataSets.models.Ds') \G
select getJSClass('Tualo.DataSets.views.Ds') \G
select getJSClass('Tualo.DataSets.globalsearch.Ds') \G
select getJSClass('Tualo.DataSets.stores.Ds') \G
select getJSClass('Tualo.DataSets.columnstore.Ds') \G
select getJSClass('Tualo.DataSets.model.Ds') \G
select getJSClass('Tualo.DataSets.list.Ds') \G
select getJSClass('Tualo.DataSets.models.list.Ds') \G
select getJSClass('Tualo.DataSets.controller.list.Ds') \G


*/
-- SOURCE FILE: ./src//ui/checklist/100.getCheckListViewController.sql 
DELIMITER //

DROP FUNCTION IF EXISTS `getCheckListViewController` //
CREATE FUNCTION `getCheckListViewController`(in_table_name varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT '
# getCheckListViewController

`getCheckListViewController` return the JS Model Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE result longtext default '
Ext.define("Tualo.DataSets.controller.checklist.[{ds_name}]", {
  extend: "Tualo.DataSets.ListController",
  alias: "controller.[{lowerprefix}][{table_name_lower}]_checklist_controller",
  setViewType: function(){

  },
  onListLoad: function(){

    let model=this.getViewModel();
    if (typeof this.refstore == "undefined"){

        var fn = Ext.ClassManager.getByAlias("store."+this.getView().intermedia+"_store");
        this.refstore = new fn({
            autoSync: true,
            
            listeners: {
                scope: this,
                beforeload: this.onIntermediaBeforeload,
                load: this.onIntermediaLoad
            }
        });
        this.refstore.getProxy().setExtraParam("updateOnDuplicate","1");
    }

    model.set("syncable",false);
    this.refstore.load();
  },
  onDataChanged: function(store,opt){
    let model=this.getViewModel();
    let view = this.getView();
    let list = model.getStore("list");
    let refstore = this.refstore;
    let records = store.getModifiedRecords();
    let referencedRecord = model.get("referencedRecord");
    if (model.get("syncable")===true){
        if (refstore){
        records.forEach(function(r){
            if(r.get("__checked")){
                let nr = {

                };
                for(var ref in view.referenced){
                    nr[ref]=referencedRecord.get(view.referenced[ref]);
                }
                for(var ref in view.referencedTo){
                    nr[ref]=r.get(view.referencedTo[ref]);
                }
                if(Ext.isEmpty(r.get("__checkedRecord")))
                refstore.add(nr);
            }else{
                refstore.remove(r.get("__checkedRecord"));
                r.set("__checkedRecord",null);
            }
        });
        records.forEach(function(r){ r.commit() });
        }
    }
  },
  onIntermediaBeforeload: function(store, operation, eOpts){
    let model=this.getViewModel();
    let view = this.getView();
    let filter=[];
    let params = operation.getParams();
    let referencedRecord = model.get("referencedRecord");
    if (typeof params=="undefined") params={};
    if (model.get("referencedList")===true){
        if (!Ext.isEmpty(referencedRecord)){
            for(var ref in view.referenced){
                filter.push({property: ref,operator:"eq",value:referencedRecord.get(view.referenced[ref])});
            }
        }
        params.filter = JSON.stringify(filter);
    }
    operation.setParams(params);
  },

  onIntermediaLoad: function(store,records){

    let model=this.getViewModel();
    let view = this.getView();
    let list = model.getStore("list");
    let filter=[];
    let referencedRecord = model.get("referencedRecord");


    records.forEach(function(record){
        for(var ref in view.referencedTo){
            let value = record.get(ref);
            let k = view.referencedTo[ref];


            filter.push({property: k,operator:"=", value: value });
        }

        list.filter(filter);

        list.getRange().forEach( function(r){
            r.set("__checked",true);
            r.set("__checkedRecord",record);
            r.commit();
        } );
        list.clearFilter();
    });
    model.set("syncable",true);
    
  }

});
';
    SET result = `replaceDefaultDefinitionVars`(in_table_name,result);
    SET result = REPLACE(result,'[{fields}]', getModelFields( in_table_name ) );


    RETURN result;
END //

-- SELECT getListViewController('ds') x //

-- SOURCE FILE: ./src//ui/checklist/100.getCheckListViewModel.sql 


DELIMITER //

DROP FUNCTION IF EXISTS `getCheckListViewModel` //
CREATE FUNCTION `getCheckListViewModel`(in_table_name varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT '
# getCheckListViewModel

`getCheckListViewModel` return the JS Model Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE reorderfield varchar(64);
    DECLARE result longtext default '
        Ext.define("Tualo.DataSets.models.checklist.[{ds_name}]", {
        extend: "Ext.app.ViewModel",
        alias: "viewmodel.[{lowerprefix}][{table_name_lower}]_checklist_model",
        data: {
            contextmenu: [],
            toolContextmenu: {},
            reorderfield: "[{reorderfield}]",
            table_name: "[{table_name_lower}]",
            referencedRecord: null,
            syncable: false
        },
        stores: {
            list: {
                type: "[{lowerprefix}][{table_name_lower}]_store",
                model: "Tualo.DataSets.checkmodel.[{ds_name}]",
                pageSize: 100000,
                remoteFilter: false,
                listeners: {
                    load: "onListLoad",
                    datachanged: "onDataChanged"
                }
            }
        }
        });
    ';
    SELECT ds.reorderfield INTO reorderfield FROM ds WHERE ds.table_name = in_table_name;
    IF reorderfield IS NULL THEN SET reorderfield=""; END IF;
            
    SET result = `replaceDefaultDefinitionVars`(in_table_name,result);
    SET result = REPLACE(result,'[{reorderfield}]', reorderfield );


    RETURN result;
END //

-- SELECT getListViewModel('ds') x //

-- SOURCE FILE: ./src//ui/checklist/100.getCheckListViewport.sql 
DELIMITER //

DROP FUNCTION IF EXISTS `getCheckListViewport` //
CREATE FUNCTION `getCheckListViewport`(in_table_name varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT '
# getCheckListViewport

`getCheckListViewport` return the JS Model Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE listselectionmodel varchar(64);
    DECLARE result longtext default '
        Ext.define("Tualo.DataSets.checklist.[{ds_name}]",  {
            extend: "[{listviewbaseclass}]",
            alias: "widget.[{lowerprefix}]checklistview-[{table_name_lower}]",
            tablename: "[{table_name_lower}]",
            paramfieldPrefix: "[{table_name_lower}]__",
            lowerprefix: "[{lowerprefix}]",
            controller: "[{lowerprefix}][{table_name_lower}]_checklist_controller",
            viewModel: {
                type: "[{lowerprefix}][{table_name_lower}]_checklist_model"
            },
            selModel: "[{listselectionmodel}]",
            features: [{listfeatures}],
            columns:  [{columns}],
            setRecord: function(){
                
                
            },
            bind: {
                store: "{list}"
            },
            viewConfig: {
                plugins: [ ].concat([{listplugins}]),
                listeners: {
                    drop: "onDropGrid"
                },
                getRowClass: function(record, rowIndex, rowParams, store){
                    var tn = store.tablename||"";
                    if ((rowIndex%2==0)&&(typeof record.data[tn+"___rowclass_even"]=="string")){
                        return record.data[tn+"___rowclass_even"];
                    }
                    if ((rowIndex%2==1)&&(typeof record.data[tn+"___rowclass_odd"]=="string")){
                        return record.data[tn+"___rowclass_odd"];
                    }
                    return "";
                }
            }
            });
    ';
    SELECT ds.listselectionmodel INTO listselectionmodel FROM ds WHERE ds.table_name = in_table_name;
    IF listselectionmodel IS NULL THEN SET listselectionmodel=""; END IF;
            
    SET result = `replaceDefaultDefinitionVars`(in_table_name,result);
    SET result = REPLACE(result,'[{listselectionmodel}]', listselectionmodel );
    
    
    SET result = REPLACE(result,'[{columns}]', getListColumns(in_table_name,concat(
      '{',
        '"dataIndex":',	`DOUBLEQUOTE`( '__checked' ) ,',',
        '"header":',		`DOUBLEQUOTE`( 'verwenden' ) ,',',
        '"xtype":',		`DOUBLEQUOTE`( 'checkcolumn' ) ,',',
        '"flex":', 1 ,'',
      '}'
    )) );
    SET result = REPLACE(result,'[{listfeatures}]', getListFeatures(in_table_name) );
    SET result = REPLACE(result,'[{listplugins}]', getListPlugins(in_table_name) );

    RETURN result;
    
END //

-- SELECT getListViewport('ds') x //



-- SOURCE FILE: ./src//ui/controlls/100.getColumnType.sql 
DELIMITER //

DROP FUNCTION IF EXISTS `getColumnsType` //
CREATE FUNCTION `getColumnsType`(in_table_name varchar(64))
RETURNS longtext

READS SQL DATA
COMMENT '
# getColumnsStore

`getColumnsStore`return the JS Store Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE result longtext;

    DECLARE columnstore_result longtext default '

Ext.define("Tualo.DataSets.columnstore.[{ds_dropdownfield}]", {
    extend: "Tualo.DataSets.stores.[{ds_name}]",
    autoLoad: true,
    pageSize: 1000000,
    proxy: {
      type: "ajax",
      url: "./ds/[{table_name_lower}]/read",
      noCache: false,
      extraParams: {
        only: "[{idfield}],[{displayfield}]",
        queryField: "[{displayfield}]"
      },
      reader: {
        type: "json",
        rootProperty: "data",
        idProperty: "[{idfield}]"
      }
    }
});



Ext.define("Tualo.DataSets.columnrenderer.[{ds_dropdownfield}]", {
    requires: [
      "Tualo.DataSets.columnstore.[{ds_dropdownfield}]"
    ],

    
    
    renderer: function(val,meta,rec){
      try{
        var fieldName = "[{table_name_lower}]__[{idfield}]";
        var renderstore = Ext.data.StoreManager.lookup("[{ds_dropdownfield_lower}]_columnstore");
        
        if (typeof Ext.data.StoreManager.lookup("[{ds_dropdownfield_lower}]_columnstore")==="undefined"){
            var store = Ext.create("Tualo.DataSets.columnstore.[{ds_dropdownfield}]", {
              storeId: "[{ds_dropdownfield_lower}]_columnstore"
            });
            store.load({
              callback: function(){
              }
            });
        }

        if (renderstore){
          var renderRecord = renderstore.findRecord( fieldName, val,0,false,false,true);
          if (renderRecord){
            return renderRecord.get("[{table_name_lower}]__[{displayfield}]");
          }else{
            meta.tdStyle="color:rgb(200,30,30);";
            console.log("---");
            return val;
          }
        }else{
          meta.tdStyle="color:red;font-weight:bold;";
          console.log("***");
          return val;
        }
      }catch(e){
          console.log("???");
        meta.tdStyle="color:darkred;";
        return val;
      }

    }
});

Ext.define("Tualo.DataSets.column.[{ds_dropdownfield}]", {
    extend: "Ext.grid.column.Column",
    alias: "widget.column_[{ds_dropdownfield_lower}]",
    requires: [
      "Tualo.DataSets.columnstore.[{ds_dropdownfield}]"
    ],
    listeners: {
      added: function( me, eOpts ){
        var grid = eOpts.grid;
        var dsformXtype = "[{form_xtype}]";
        if (dsformXtype=="dsdocumentfield"){

        }else{
          if (typeof Ext.data.StoreManager.lookup("[{ds_dropdownfield_lower}]_columnstore")==="undefined"){
            var store = Ext.create("Tualo.DataSets.columnstore.[{ds_dropdownfield}]", {
              storeId: "[{ds_dropdownfield_lower}]_columnstore"
            });
            store.load({
              callback: function(){
                grid.getView().refresh();
              }
            });
          }
        }
      }
    },
    renderID: function(val,meta,rec){
      var fieldName = "__id";
      var renderstore = Ext.data.StoreManager.lookup("[{ds_dropdownfield_lower}]_columnstore");
      if (renderstore){
        var renderRecord = renderstore.findRecord( fieldName, val,0,false,false,true);
        if (renderRecord){
          return renderRecord.get("__displayfield");
        }else{
          meta.tdStyle="color:rgb(200,30,30);";
          return val;
        }
      }else{
        meta.tdStyle="color:red;";
        return val;
      }
    },
    renderer: function(val,meta,rec){
      try{
        var dsformXtype = "[{form_xtype}]";
        if (dsformXtype=="dsdocumentfield"){
          return " DOTO LOAD dsdocument getColumnsType ";
        }else{
          var fieldName = "[{table_name_lower}]__[{idfield}]";
          var renderstore = Ext.data.StoreManager.lookup("[{ds_dropdownfield_lower}]_columnstore");
          if (renderstore){
            var renderRecord = renderstore.findRecord( fieldName, val,0,false,false,true);
            if (renderRecord){
              return renderRecord.get("[{table_name_lower}]__[{displayfield}]");
            }else{
              meta.tdStyle="color:rgb(200,30,30);";
              return val;
            }
          }else{
            meta.tdStyle="color:red;font-weight:bold;";
            return val;
          }
        }
      }catch(e){
        meta.tdStyle="color:darkred;";
        return val;
      }

    }
});

';
    SET columnstore_result = `replaceDefaultDefinitionVars`(in_table_name,columnstore_result);

    SET result = replaceDSDropDownField( in_table_name, columnstore_result );

    RETURN result;

END //

-- select getColumnsType('ds') \G



-- SOURCE FILE: ./src//ui/controlls/100.getComboBox.sql 
DELIMITER //

DROP FUNCTION IF EXISTS `getComboBox` //
CREATE FUNCTION `getComboBox`(in_table_name varchar(64))
RETURNS longtext

READS SQL DATA
COMMENT '
# getComboBox

`getComboBox`return the JS Store Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE result longtext;

    DECLARE combobox_result longtext default '

Ext.define("Tualo.DataSets.combobox.[{ds_dropdownfield}]",  {
  extend: "Tualo.DataSets.Combobox",
  xtype: "combobox_[{ds_dropdownfield_lower}]",
  alias: "widget.combobox_[{ds_dropdownfield_lower}]",
  tablename: "[{table_name_lower}]",
	store: {
    type: "[{table_name_lower}]_store",
    autoLoad: true,
    autoSync: true,
    remoteFilter: true,
    pageSize: 100,
  },
  listeners: {
    render: function(me){
      if (Ext.isEmpty(me.up("grid"))){
        if (me.up("form"))
        me.up("form").on("recordchanged",this.formRecordChanged);
        // this.formRecordChanged(me.up("form").getViewModel().get("currentrecord"));
      }else{
        me.up("grid").on("select",function( m, record, index, eOpts ){
          this.formRecordChanged(record);
        }.bind(this));
        var sel = me.up("grid").getSelection();
        if (!Ext.isEmpty(sel)){
          this.formRecordChanged(sel[0]);
        }

      }
    }
  },
  formRecordChanged: function(recordchanged){
    if (!Ext.isEmpty(this.filterconfig) && !Ext.isEmpty(recordchanged)){
      var data = recordchanged.getData();
      var filters = this.store.getFilters();
      for( var key in this.filterconfig){
        if (this.filterconfig.hasOwnProperty(key)){
          if (typeof data[recordchanged.store.tablename+"__"+key]){


            filters.add(new Ext.util.Filter({
              property: this.tablename+"__"+key,
              value: data[recordchanged.store.tablename+"__"+key],
              operator: "eq"
            }));

          }
        }
      }
    }
  },
  valueField: "[{table_name_lower}]__[{idfield}]",
  displayField: "[{table_name_lower}]__[{displayfield}]",
  filterconfig: [{filterconfig}]
});

';



    SET combobox_result = `replaceDefaultDefinitionVars`(in_table_name,combobox_result);
    SET result = replaceDSDropDownField( in_table_name, combobox_result );


    RETURN result;

END //

-- select getComboBox('ds') \G



-- SOURCE FILE: ./src//ui/controlls/100.getControlls.sql 

DELIMITER //

DROP FUNCTION IF EXISTS `getControlls` //
CREATE FUNCTION `getControlls`(in_table_name varchar(64))
RETURNS longtext

READS SQL DATA
COMMENT ''
BEGIN 

    DECLARE result longtext default '';
    SET result = concat('
        
        ',getTagField(in_table_name),'
        
        ',getColumnsType(in_table_name),'
        
        ',getComboBox(in_table_name),'
        
        ',getDisplayComboBox(in_table_name),'
        
        ',getMainComboBox(in_table_name),'
        
        ',

        '/** controlls */'
    );
    RETURN result;

END //

-- select getControlls('ds') \G



-- SOURCE FILE: ./src//ui/controlls/100.getDisplayComboBox.sql 

DELIMITER //

DROP FUNCTION IF EXISTS `getDisplayComboBox` //
CREATE FUNCTION `getDisplayComboBox`(in_table_name varchar(64))
RETURNS longtext

READS SQL DATA
COMMENT '
# getDisplayComboBox

`getDisplayComboBox`return the JS Store Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE result longtext;

    DECLARE js_result longtext default '
Ext.define("Tualo.DataSets.displaycombobox.[{ds_dropdownfield}]",  {
  extend: "Tualo.DataSets.Displaycombobox",
  alias: "widget.displaycombobox_[{ds_dropdownfield_lower}]",
  tablename: "[{table_name_lower}]",
  dsname: "[{ds_name}]"
});

';
    SET js_result = `replaceDefaultDefinitionVars`(in_table_name,js_result);



    SET result = replaceDSDropDownField( in_table_name, js_result );

    RETURN result;

END //

-- select getDisplayComboBox('ds') \G



-- SOURCE FILE: ./src//ui/controlls/100.getMainComboBox.sql 

DELIMITER //

DROP FUNCTION IF EXISTS `getMainComboBox` //
CREATE FUNCTION `getMainComboBox`(in_table_name varchar(64))
RETURNS longtext

READS SQL DATA
COMMENT '
# getMainComboBox

`getMainComboBox`return the JS Store Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE result longtext;

    DECLARE combobox_result longtext default '

Ext.define("Tualo.DataSets.combobox.[{ds_name}]",  {
  extend: "Tualo.DataSets.Combobox",
  xtype: "combobox_[{table_name_lower}]",
  alias: "widget.combobox_[{table_name_lower}]",
  tablename: "[{table_name_lower}]",
  store: {
    type: "[{table_name_lower}]_store",
    autoLoad: true,
    autoSync: false,
    remoteFilter: true,
    pageSize: 100,
  },
  listeners: {
    render: function(me){
      if (Ext.isEmpty(me.up("grid"))){
        if (me.up("form"))
        me.up("form").on("recordchanged",this.formRecordChanged);
      }else{
        me.up("grid").on("select",function( m, record, index, eOpts ){
          this.formRecordChanged(record);
        }.bind(this));
        var sel = me.up("grid").getSelection();
        if (!Ext.isEmpty(sel)){
          this.formRecordChanged(sel[0]);
        }

      }
    }
  },
  formRecordChanged: function(recordchanged){
    if (!Ext.isEmpty(this.filterconfig) && !Ext.isEmpty(recordchanged)){
      var data = recordchanged.getData();
      var filters = this.store.getFilters();
    }
  },
  valueField: "__id",
  displayField: "__displayfield"
});

';



    SET combobox_result = `replaceDefaultDefinitionVars`(in_table_name,combobox_result);
    

    RETURN combobox_result;


END //

-- select getDisplayComboBox('ds') \G



-- SOURCE FILE: ./src//ui/controlls/100.getTagField.sql 

DELIMITER //

DROP FUNCTION IF EXISTS `getTagField` //
CREATE FUNCTION `getTagField`(in_table_name varchar(64))
RETURNS longtext

READS SQL DATA
COMMENT '
# getTagField

`getTagField`return the JS Store Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE result longtext;

    DECLARE js_result longtext default '
Ext.define("Tualo.DataSets.tagfield.[{ds_dropdownfield}]",  {
	extend: "Tualo.DataSets.tagfield.DSTagField",
	alias: "widget.tagfield_[{ds_dropdownfield_lower}]",
	store: {
    type: "[{table_name_lower}]_store",
    autoLoad: true,
    autoSync: true,
    remoteFilter: true,
    pageSize: 100,
		listeners: {
			beforeload: function(store, operation, eOpts ){
				var params = operation.getParams();
		    if (typeof params==="undefined"){
		      params = {};
		    }
				operation.setParams(params);
		    return true;
			}
		}
	}
});

';
    SET js_result = `replaceDefaultDefinitionVars`(in_table_name,js_result);



    SET result = replaceDSDropDownField( in_table_name, js_result );

    RETURN result;

END //

-- select getTagField('ds') \G



-- SOURCE FILE: ./src//ui/controlls/100.getUIListFilter.sql 

DELIMITER //

DROP FUNCTION IF EXISTS `getUIListFilter` //
CREATE FUNCTION `getUIListFilter`(in_table_name varchar(64))
RETURNS longtext

READS SQL DATA
COMMENT ''
BEGIN 

    DECLARE ds_name varchar(64);
    DECLARE lowerprefix varchar(32) default '';
    DECLARE table_name_lower varchar(64);
    
    DECLARE result longtext default '
    Ext.define("Tualo.DataSets.grid.filters.filter.[{dd_name}]",  {
        extend: "Ext.grid.filters.filter.List",
        alias: "grid.filter.[{alias}]",
        idField: "[{id}]",
        labelField: "[{label}]",
        store: {
            type: "[{lowerprefix}][{table_name_lower}]_store"
        }
    });
    ';
    
    SET table_name_lower = LOWER(in_table_name);
    SET ds_name = CONCAT(LEFT(UCASE(in_table_name),1),SUBSTRING(table_name_lower,2));
    SET result = REPLACE(result,'[{table_name_lower}]',table_name_lower);
    SET result = REPLACE(result,'[{ds_name}]',ds_name);
    SET result = REPLACE(result,'[{lowerprefix}]',lowerprefix);


    select 
    group_concat( f separator ' ' ) 

    into result
    from (
        select 
            REPLACE(
                REPLACE(
                    REPLACE(
                        REPLACE(
                            result,
                            '[{alias}]',
                            `alias`
                        ),
                        '[{dd_name}]',
                        concat(ds_dropdownfield,'_',name)
                    ),
                    '[{id}]',
                    concat(table_name,'__',idfield)
                ),
                '[{label}]',
                concat(table_name,'__',displayfield)
            )
            F
        from (
            select
            
                concat( CONCAT(UCASE(LEFT(ds_dropdownfields.table_name, 1)), SUBSTRING(ds_dropdownfields.table_name, 2)),'_',lower( ds_dropdownfields.name ) ) ds_dropdownfield,
                CONCAT(UCASE(LEFT(ds.table_name, 1)), SUBSTRING(ds.table_name, 2)) ds_name,
                ds_dropdownfields.idfield,
                ds_dropdownfields.displayfield,
                ds_dropdownfields.table_name,
                ds_dropdownfields.name,
                lower(concat(ds_dropdownfields.table_name,'_',ds_dropdownfields.name,'_listfilter')) `alias`

            from 
            
            ds_dropdownfields
            join ds
                on ds_dropdownfields.table_name = ds.table_name
                and ds.existsreal=1
            join (
                select table_name from ( select table_name from ds_access where `role` in (select `group` from `VIEW_SESSION_GROUPS`) and (`read`+`write`+`delete`+`append` > 0) ) g_dsa group by table_name
            ) ds_access
            on ds.table_name = ds_access.table_name
            and ds.table_name = in_table_name
        ) a
    ) b
    ;
   
   
   RETURN result;

END //
-- SOURCE FILE: ./src//ui/controlls/100.replaceDSDropDownField.sql 
DELIMITER //

DROP FUNCTION IF EXISTS `replaceDSDropDownField` //
CREATE FUNCTION `replaceDSDropDownField`(in_table_name varchar(64), source longtext)
RETURNS longtext

READS SQL DATA
COMMENT '
# replaceDSDropDownField

`replaceDSDropDownField`return the JS Store Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE result longtext;
    DECLARE source_result longtext;
    
    SET source_result = `replaceDefaultDefinitionVars`(in_table_name,source);



  
    SELECT 
        ifnull(
            group_concat( F separator '
            '),
        '')
    INTO 
        result
    FROM (
        SELECT
            REPLACE(
                REPLACE(
                    REPLACE(
                        REPLACE(
                            REPLACE(
                                REPLACE(
                                    REPLACE(
                                      source_result,
                                      '[{ds_dropdownfield_lower}]',
                                      ifnull(ds_dropdownfield_lower,'')
                                    ),
                                    '[{filterconfig}]',
                                    if (ifnull(filterconfig,'')='','undefined',ifnull(filterconfig,''))
                                ),
                                '[{form_xtype}]',
                                ifnull(form_xtype,'')
                            ),
                            '[{table_name_lower}]',
                            table_name_lower
                        ),
                        '[{displayfield}]',
                        ifnull(displayfield,'')
                    ),
                    '[{idfield}]',
                    ifnull(idfield,'')
                ),
                '[{ds_dropdownfield}]',
                ds_dropdownfield
            ) F
        FROM (
            select
                concat( CONCAT(UCASE(LEFT(ds_dropdownfields.table_name, 1)), SUBSTRING(ds_dropdownfields.table_name, 2)),'_',lower( ds_dropdownfields.name ) ) ds_dropdownfield,
                CONCAT(UCASE(LEFT(ds.table_name, 1)), SUBSTRING(ds.table_name, 2)) ds_name,
                ds_dropdownfields.idfield,
                ds_dropdownfields.displayfield,
                lower(ds.table_name) table_name_lower,
                lower( concat(ds_dropdownfields.table_name,'_',ds_dropdownfields.name) ) ds_dropdownfield_lower,
                ds_dropdownfields.table_name,
                ds_dropdownfields.name,
                '' form_xtype, 
                ds_dropdownfields.filterconfig  
            from 
                ds_dropdownfields
                join ds
                    on ds_dropdownfields.table_name = ds.table_name
                    and ds.existsreal=1
                join (
                    select table_name from ( select table_name from ds_access where `role` in (select `group` from `VIEW_SESSION_GROUPS`) and (`read`+`write`+`delete`+`append` > 0) ) g_dsa group by table_name
                ) ds_access
                on ds.table_name = ds_access.table_name
                and ds.table_name = in_table_name
        ) A
    ) B
    ;

    RETURN result;

END //


-- SOURCE FILE: ./src//ui/dso/200.getViewport.sql 
DELIMITER //

DROP FUNCTION IF EXISTS `getViewport` //
CREATE FUNCTION `getViewport`(in_table_name varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT '
# getViewport

`getViewport` return the JS Model Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE aformxtype varchar(50) default '';
    DECLARE allowform varchar(50) default '';
    DECLARE rendererList longtext default '';
    DECLARE result longtext default '
        Ext.define("Tualo.DataSets.dso.[{ds_name}]",  {
            extend: "Ext.form.Panel",
            alias: ["widget.dso-[{table_name_lower}]"],
            mixins: [ "Ext.mixin.Responsive" ],
            requires: [
                    "Tualo.DataSets.dso.controller.[{ds_name}]",
                    "Tualo.DataSets.dso.models.[{ds_name}]"
            ],
            layout: {
                type: "hbox",
                align: "stretch"
            },

            viewModel: {
                type: "dso_[{table_name_lower}]"
            },

            config: {
                currentrecord: null
            },

            publishes: {
                "currentrecord": true
            },
            updateCurrentrecord: function(nrecord,orecord){
                this.fireEvent("recordchanged",nrecord);
                this.getViewModel().set("currentrecord",nrecord);
                if (nrecord!==null){
                    if (nrecord.get("[{table_name_lower}]____formlocked")===true){
                        this.disable();
                    }else{
                        this.enable();
                    }
                }
            },
            controller: "dso_[{table_name_lower}]_controller",
            trackResetOnLoad: true,
            items: [
                {
                    xtype: "tabpanel",
                    flex: 1,
                    itemId: "tabs",
                    items: [{panels}]
                }
            ]
        });
    ';

    SET SESSION group_concat_max_len=18446744073709551615;
    SET result = `replaceDefaultDefinitionVars`(in_table_name,result);
    SET result = REPLACE(result,'[{formfields}]', getFormFields(in_table_name) );
    
    RETURN result;
END //



-- SOURCE FILE: ./src//ui/form/100.getFormFields.sql 

DELIMITER //


DROP FUNCTION IF EXISTS `hasVisibleFormFieldsByPath` //
CREATE FUNCTION `hasVisibleFormFieldsByPath`(in_table_name varchar(64),in_path varchar(255))
RETURNS boolean
READS SQL DATA
COMMENT ' # hasVisibleFormFieldsByPath '
BEGIN 
    DECLARE result boolean default FALSE;

    SELECT 
    
        if(count(*)>0,true,false)

    INTO result

    FROM
    (
        
        
            select
                `table_name`,
                `column_name`
                

            from
                ds_column_form_label
            where 
                `table_name`=in_table_name
                and `active` = 1
                and `hidden` = 0                
                and `field_path` =  in_path


            union 

            select
                `table_name`,
                `column_name`
                
            from
                ds_column_tagfields
            where 
                `table_name`=in_table_name
                and `active` = 1
                and `hidden` = 0
                and `field_path` =  in_path
                
            
    ) X

    ;


    RETURN result;
END //




DROP FUNCTION IF EXISTS `getFormFieldsByPath` //
CREATE FUNCTION `getFormFieldsByPath`(in_table_name varchar(64),in_path varchar(255))
RETURNS longtext
READS SQL DATA
COMMENT ' # getFormFieldsByPath '
BEGIN 
    DECLARE result longtext default '[]';
    DECLARE primaryKeys longtext;
    SET result = `replaceDefaultDefinitionVars`(in_table_name,result);


    SELECT 
        concat(
        '[',
            group_concat(
                F
                order by position
                SEPARATOR 
                ','
            ),
        ']')
    INTO result
    FROM
    (
        select 

                
                concat(
'
{
"fieldLabel": ',DOUBLEQUOTE(ifnull(`label`,`column_name`)),',
"name":"',`table_name`,'__',`column_name`,'",
"column_name":"',`column_name`,'",
"tablename": ',DOUBLEQUOTE(ifnull(`table_name`,'')),',
"primaryKeys": [{primaryKeys}],
"readOnly":false,
"bind":"{currentrecord.',`table_name`,'__',`column_name`,'}",
"hidden":',if(`hidden`=1,'true','false'),',
"constraint_name":"",
"referenced_constraint_name":"",
"referenced_table_name":"",
"xtype":',DOUBLEQUOTE(ifnull(`xtype`,'displayfield')),',', if( ifnull(`xtype`,'displayfield')='datefield', '"submitFormat": "Y-m-d",' ,'') ,'
"allowEmpty":',if(`allowempty`=1,'true','false'),',
"allowBlank":',if(`allowempty`=1,'true','false'),',
',if ( ifnull(`xtype`,'displayfield')='datefield','format:"d.m.Y"','' ),'
}
'

                )  F,
                position
            /*
            `table_name`,
            `column_name`,
            `language` ,
            `label`,
            `xtype`,
            `field_path`,
            `position`,
            `hidden`,
            `active`,
            `nextlabel`,

            `constraint_name`,
            `referenced_constraint_name`,
            `referenced_table_name`
    */
        from
        (

            select
                `table_name`,
                `column_name`,
                `language` ,
                `label`,
                `xtype`,
                `field_path`,
                `position`,
                `hidden`,
                `active`,
                substring(`field_path`,length(in_path)+2,1000) nextlabel,
                ifnull(`allowempty`,1) `allowempty`,

                '' `constraint_name`,
                '' `referenced_constraint_name`,
                '' `referenced_table_name`

            from
                ds_column_form_label
            where 
                `table_name`=in_table_name
                and `active` = 1
            
            having 
                `field_path` = in_path
                -- substring(`field_path`,1,length(in_path)) = in_path 
                -- and INSTR(substring(`field_path`,length(in_path)+2,1000),'/')=0

            union 

            select
                `table_name`,
                `column_name`,
                `language` ,
                `label`,
                `xtype`,
                `field_path`,
                `position`,
                `hidden`,
                `active`,
                1 `allowempty`,
                
                substring(`field_path`,length(in_path)+2,1000) nextlabel,


                `constraint_name`,
                `referenced_constraint_name`,
                `referenced_table_name`
            from
                ds_column_tagfields
            where 
                `table_name`=in_table_name
                and `active` = 1
            having 
                `field_path` =  in_path
                -- substring(`field_path`,1,length(in_path)) = in_path 
                -- and INSTR(substring(`field_path`,length(in_path)+2,1000),'/')=0
            
        ) sub
    ) X

    ;

    select 
        concat('[',
        ifnull( 
            group_concat(
                concat('"',ds_column.table_name,'__', ds_column.column_name,'"')
                order by column_name 
                separator ','
            )
        ,""),
        ']')
    into 
        primaryKeys
    from 
        ds_column
    where 
        ds_column.table_name = in_table_name
        and ds_column.existsreal = 1
        and ds_column.column_key like '%PRI%'
    ;

    if (primaryKeys IS NULL) THEN SET primaryKeys='[]'; END IF;

    SET result = REPLACE(result,'[{primaryKeys}]', primaryKeys );

    IF result is null THEN
       SET result='[]';
    END IF;

    RETURN result;
END //


DROP FUNCTION IF EXISTS `getFormFieldsSets` //
CREATE FUNCTION `getFormFieldsSets`(in_table_name varchar(64),in_path varchar(255))
RETURNS longtext
READS SQL DATA
COMMENT ' # getFormFieldsSets'
BEGIN 
    DECLARE result longtext default '[]';

    SELECT 

    concat('
        [
        ',
        group_concat(
            F
            SEPARATOR ',
            '
        ),
        '
        ]'
    )

    INTO result

    FROM

    (

        SELECT 

        concat(
            '
            {
                "xtype": "fieldset",
                "collapsible": true,
                "defaults": {"anchor": "95%"},
                "title": ',DOUBLEQUOTE(`field_path`),',
                "items": ',getFormFieldsByPath(in_table_name,`full_field_path`),',
                "hidden": ',if(hasVisibleFormFieldsByPath(in_table_name,`full_field_path`),'false','true'),'
            }'
            
        ) F

        FROM 
        (
            SELECT
                `field_path`,
                `full_field_path`,
                min(`position`) `position`        
            FROM 
            (
                select 
                    substring(`field_path`, length(in_path)+2,1000) `field_path`,
                    `field_path` `full_field_path`,
                    `position`
                from
                    ds_column_form_label
                where 
                    `table_name` = in_table_name
                    and left(`field_path`,IF (INSTR(`field_path`,'/')=0,255,INSTR(`field_path`,'/')-1)) = in_path
                    and `active` = 1
                    
                        

                union

                select 
                    substring(`field_path`, length(in_path)+2,1000) `field_path`,
                    `field_path` `full_field_path`,

                    `position`
                from
                    ds_column_tagfields
                where 
                    `table_name` = in_table_name
                    and left(`field_path`,IF (INSTR(`field_path`,'/')=0,255,INSTR(`field_path`,'/')-1)) = in_path
                    and `active` = 1
            ) A
            GROUP BY `field_path`
            ORDER BY `position`, `field_path`
        ) B

        
    ) U
    ;

    RETURN result;
END //


    

DROP FUNCTION IF EXISTS `getFormFields` //
CREATE FUNCTION `getFormFields`(in_table_name varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT ' # getFormFields'
BEGIN 
    DECLARE result longtext default '[]';

    -- ACHTUNG das unter SQL muss doppelt bearbeitet werden
    -- es gibt uU. keine bezug_config tabelle

    IF (
        NOT EXISTS(
            select * from INFORMATION_SCHEMA.tables
            WHERE table_schema = database()
            and table_name = 'bezug_config'
            
        )
    ) THEN 


    SELECT 
        concat('[',
            group_concat( F order by position SEPARATOR ',
            ')
        ,']')


    INTO result

    FROM 
    (


        SELECT 
            group_concat(
                    
                    concat('
                        {
                            "xtype":        "panel",
                            "bodyPadding":  5,
                            "items":        ',getFormFieldsSets(in_table_name,`field_path`),',
                            "title":        "',`field_path`,'",
                            "scrollable":   "y",
                            "layout":       "form",
                            "border":       false
                        }
                    ')
                    ORDER BY `field_path`
                    SEPARATOR ',
                    '
            ) F,
            -99999 position
        FROM 
        (
            SELECT
                `field_path`      
            FROM 
            (

                SELECT
                    `field_path`,
                    `position`        
                FROM 
                (
                    select 
                        left(`field_path`,IF (INSTR(`field_path`,'/')=0,255,INSTR(`field_path`,'/')-1)) `field_path`,
                        ds_column_form_label.`position`
                    from
                        ds_column_form_label
                        join ds on ds_column_form_label.table_name=ds.table_name
                        and ifnull(ds.alternativeformxtype,'')=''
                    where 
                        ds_column_form_label.`table_name` = in_table_name
                        and ds_column_form_label.`active` = 1
                        
                            

                    union

                    select 
                        left(`field_path`,IF (INSTR(`field_path`,'/')=0,255,INSTR(`field_path`,'/')-1)) `field_path`,
                        `position`
                    from
                        ds_column_tagfields
                    where 
                        `table_name` = in_table_name
                        and `active` = 1
                ) A
                ORDER BY `position`, `field_path`
            ) B
            GROUP BY `field_path`
        ) C where c.f is not null

        UNION

        SELECT
            concat('{
                "xtype": "',lower(ds.alternativeformxtype),'",
                "title": ',DOUBLEQUOTE(`title`),'
            }
            ') F,
            -999998 position
        from 
            ds  
        where 
            `table_name` = in_table_name
            and ifnull(ds.alternativeformxtype,'')<>''

        UNION

        SELECT
        concat('{
            "xtype": "cmp_ds_formtabpanel",
            "title": ',DOUBLEQUOTE(`title`),',
            "deferedPanel": {
                "xtype": "view-',lower(table_name),'",
                "bind": {
                    "record": "{currentrecord}"
                },
                "border": false,
                "collapsible": true,
                "referencedList": true,
                "referenced": ',lower(columnsdef),'
            }
        }
        ') F,
        position
        FROM (
         select
            ds.title,
            ds_reference_tables.*
        from

            ds_reference_tables
            join ds
            on ds_reference_tables.table_name = ds.table_name
            and ds.existsreal=1

            join ds_access
                on ds.table_name = ds_access.table_name 
                and ds_access.read=1
            join VIEW_SESSION_GROUPS on VIEW_SESSION_GROUPS.group = ds_access.role

        where
            reference_table_name=in_table_name
            and active = 1
        order by position
        ) REF



    ) X
    ;


    ELSE 


    SELECT 
        concat('[',
            group_concat( F   order by position SEPARATOR ',
            ')
        ,']')


    INTO result

    FROM 
    (


        SELECT 
            group_concat(
                    
                    concat('
                        {
                            "xtype":        "panel",
                            "bodyPadding":  5,
                            "items":        ',getFormFieldsSets(in_table_name,`field_path`),',
                            "title":        "',`field_path`,'",
                            "scrollable":   "y",
                            "layout":       "form",
                            "border":       false
                        }
                    ')
                    ORDER BY `field_path`
                    SEPARATOR ',
                    '
            ) F,
         -99999 position
        FROM 
        (
            SELECT
                `field_path`      
            FROM 
            (

                SELECT
                    `field_path`,
                    `position`        
                FROM 
                (
                    select 
                        left(`field_path`,IF (INSTR(`field_path`,'/')=0,255,INSTR(`field_path`,'/')-1)) `field_path`,
                        `position`
                    from
                        ds_column_form_label
                    where 
                        `table_name` = in_table_name
                        and `active` = 1
                        
                            

                    union

                    select 
                        left(`field_path`,IF (INSTR(`field_path`,'/')=0,255,INSTR(`field_path`,'/')-1)) `field_path`,
                        `position`
                    from
                        ds_column_tagfields
                    where 
                        `table_name` = in_table_name
                        and `active` = 1
                ) A
                ORDER BY `position`, `field_path`
            ) B
            GROUP BY `field_path`
        ) C


        UNION

        SELECT
        concat('{
            "xtype": "cmp_ds_formtabpanel",
            "title": ',DOUBLEQUOTE(`title`),',
            "deferedPanel": {
                "xtype": "view-',lower(table_name),'",
                "bind": {
                    "record": "{currentrecord}"
                },
                "border": false,
                "collapsible": true,
                "referencedList": true,
                "referenced": ',lower(columnsdef),'
            }
        }
        ') F,
        position
        FROM (
         select
            ds.title,
            ds_reference_tables.*
        from
            ds_reference_tables
            join ds
            on ds_reference_tables.table_name = ds.table_name
            and ds.existsreal=1
            join ds_access
                on ds.table_name = ds_access.table_name 
                and ds_access.read=1
            join VIEW_SESSION_GROUPS on VIEW_SESSION_GROUPS.group = ds_access.role
        where
            reference_table_name=in_table_name
            and active = 1
        order by position
            
        ) REF



        UNION

        SELECT
        concat('{
            "xtype": "cmp_ds_formtabpanel",
            "title": ',DOUBLEQUOTE(`title`),',
            "deferedPanel": {
                "xtype": "[{lowerprefix}]checklistview-',lower(referenced_table_name),'",
                "bind": {
                    "record": "{currentrecord}"
                },
                "border": false,
                /*"collapsible": true,*/
                "referencedList": true,
                "intermedia": ',DOUBLEQUOTE(lower(intermedia_table_name)),',
                "referenced": ',lower(table_name_json),',
                "referencedTo": ',lower(referenced_table_json),'
            }
        }
        ') F,
        99999 position
        FROM (

            select
              intermedia_table_name,
              max(table_name_json) table_name_json,
              max(constraint_name) constraint_name,
              max(referenced_table_name) referenced_table_name,
              max(referenced_table_json) referenced_table_json,
              max(label) title
            from
              ds_nm_tables
            where
              table_name = in_table_name
              and
              active=1
            group by
              intermedia_table_name
            order by
              position
            
        ) REF


        

        UNION


        SELECT 

            concat(
                '
                {
                    "xtype": "cmp_ds_formtabpanel",
                    "title": ',DOUBLEQUOTE(`name`),',
                    "deferedPanel": {
                        "xtype": "view-view_blg_list_',lower(tabellenzusatz),'",
                        "bind": {
                            "record": "{currentrecord}"
                        },
                        "border": false,
                        "collapsible": true,
                        "referencedList": true,
                        "referenced": ',lower(columnsdef),'
                    }
                }
                '
            ) F,
        999999 position

        FROM 
        (

           
            select
    
                bezug_config.blg_table,
                lower(concat('{"view_blg_list_',lower(blg_config.tabellenzusatz),'__kundennummer":"',bezug_config.base_table,'__',bezug_config.id_column,'", "view_blg_list_',lower(blg_config.tabellenzusatz),'__kostenstelle":"',bezug_config.base_table,'__','kostenstelle','"}'))    columnsdef,
                blg_config.*



            from 
 /*
                 blg_config
                join bezug_config
                    on bezug_config.base_table      = in_table_name
                    and blg_config.adress_bezug     = bezug_config.base_table
                    and blg_config.bezug_anzeigen   = 1

            */

            blg_config 

            join bezug_config 
                on bezug_config.base_table = in_table_name
            
            where 
                adress_bezug=in_table_name 
                and bezug_anzeigen=1
                and
                concat( 'view_blg_list_',lower( tabellenzusatz ) ) in (
                select lower(table_name) from (
                    select table_name from ds_access where `role` in (SELECT `group` FROM VIEW_SESSION_GROUPS) and (`read`+`write`+`delete`+`append` > 0)
                ) g_dsa group by table_name
                )

                
        ) RPT



        UNION


        SELECT 

            concat(
                '
                {
                    "xtype": "cmp_ds_formtabpanel",
                    "title": ',DOUBLEQUOTE(`name`),',
                    "deferedPanel": {
                        "xtype": "',lower(`xtype`),'",
                        "bind": {
                            "record": "{currentrecord}"
                        },
                        "border": false,
                        "collapsible": true,
                        "referencedList": true,
                        "referenced": ',lower(columnsdef),'
                    }
                }
                '
            ) F,
        1900000+position position

        FROM 
            ds_extended_panels
        WHERE 
            table_name = in_table_name
            and active = 1 
            and FALSE




    ) X
    ;

    END IF;
    



        

    RETURN replaceDefaultDefinitionVars(in_table_name,result);
END //

-- SOURCE FILE: ./src//ui/form/100.getFormViewController.sql 


DELIMITER //

DROP FUNCTION IF EXISTS `getFormViewController` //
CREATE FUNCTION `getFormViewController`(in_table_name varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT '
# getFormViewController

`getFormViewController` return the JS Controller Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE reorderfield varchar(64);
    DECLARE result longtext default '
        Ext.define("Tualo.DataSets.form.controller.[{ds_name}]", {
            extend: "Ext.app.ViewController",
            alias: "controller.[{lowerprefix}]formview_[{table_name_lower}]_controller",
            mixins: [
            ],
            onModifiedRecords: function(v,store,count,name){
                var view = this.getView();

                view.fireEvent("modifiedRecords",v,store,count,name);
            },
            onShowReferencedView: function( me ){

            },
            onHideReferencedView: function( me ){

            }
        });
    ';
    SELECT ds.reorderfield INTO reorderfield FROM ds WHERE ds.table_name = in_table_name;
    IF reorderfield IS NULL THEN SET reorderfield=""; END IF;
            
    SET result = `replaceDefaultDefinitionVars`(in_table_name,result);
    SET result = REPLACE(result,'[{reorderfield}]', reorderfield );


    RETURN result;
END //

-- SELECT getFormViewController('ds') x //

-- SOURCE FILE: ./src//ui/form/100.getFormViewModel.sql 


DELIMITER //

DROP FUNCTION IF EXISTS `getFormViewModel` //
CREATE FUNCTION `getFormViewModel`(in_table_name varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT '
# getFormViewModel

`getFormViewModel` return the JS Model Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE reorderfield varchar(64);
    DECLARE result longtext default '
        Ext.define("Tualo.DataSets.form.models.[{ds_name}]", {
            extend: "Ext.app.ViewModel",
            alias: "viewmodel.[{lowerprefix}]formmodel_[{table_name_lower}]",
            data:{
                table_name: "[{table_name_lower}]",
                currentrecord: null,
            }
        });
    ';
    SELECT ds.reorderfield INTO reorderfield FROM ds WHERE ds.table_name = in_table_name;
    IF reorderfield IS NULL THEN SET reorderfield=""; END IF;
            
    SET result = `replaceDefaultDefinitionVars`(in_table_name,result);
    SET result = REPLACE(result,'[{reorderfield}]', reorderfield );


    RETURN result;
END //

-- SELECT getFormViewModel('ds') x //

-- SOURCE FILE: ./src//ui/form/100.getFormViewport.sql 


DELIMITER //

DROP FUNCTION IF EXISTS `getFormViewport` //
CREATE FUNCTION `getFormViewport`(in_table_name varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT '
# getFormViewport

`getFormViewport` return the JS Viewport Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE formfields longtext;
    DECLARE result longtext default '
    
    Ext.define("Tualo.DataSets.form.[{ds_name}]",  {
        extend: "Tualo.DataSets.Form",
        alias: ["widget.[{lowerprefix}]formview-[{table_name_lower}]"],
        mixins: [ "Ext.mixin.Responsive" ],
        requires: [
                "Tualo.DataSets.form.controller.[{ds_name}]",
                "Tualo.DataSets.form.models.[{ds_name}]"
        ],
        layout: {
            type: "hbox",
            align: "stretch"
        },

        viewModel: {
            type: "[{lowerprefix}]formmodel_[{table_name_lower}]"
        },

        config: {
            currentrecord: null
        },

        publishes: {
            "currentrecord": true
        },
        updateCurrentrecord: function(nrecord,orecord){

            this.fireEvent("recordchanged",nrecord);
            this.getViewModel().set("currentrecord",nrecord);
            if (nrecord!==null){
                if (nrecord.get("[{table_name_lower}]____formlocked")===true){
                    this.disable();
                }else{
                    this.enable();
                }
            }
        },
        controller: "[{lowerprefix}]formview_[{table_name_lower}]_controller",
        trackResetOnLoad: true,
        items: [
            {
                xtype: "tabpanel",
                flex: 1,
                itemId: "tabs",
                items: [{formfields}]
            }
        ]
    });
    ';
    
    
    SET SESSION group_concat_max_len=18446744073709551615;
    
    SET result = `replaceDefaultDefinitionVars`(in_table_name,result);
    SET result = REPLACE(result,'[{formfields}]', getFormFields(in_table_name) );


    RETURN result;
END //

-- SELECT getListViewModel('ds') x //

-- SOURCE FILE: ./src//ui/list/100.getListFeatures.sql 
DELIMITER //

DROP FUNCTION IF EXISTS `getListFeatures` //
CREATE FUNCTION `getListFeatures`(
    in_table_name varchar(64)
) 
RETURNS longtext
DETERMINISTIC
BEGIN 
    DECLARE result longtext;


    SELECT
      concat('[', ifnull(group_concat(FLD separator ', '),'') ,']') 
    INTO
      result
    FROM 
    (
      SELECT
        '{"ftype":"grouping","showSummaryRow": true }' FLD
      FROM 
        ds_column_list_label
      WHERE ds_column_list_label.table_name = in_table_name and ds_column_list_label.grouped = 1
      group by ds_column_list_label.table_name

      union

      SELECT
        '{"ftype":"summary","dock":"bottom"}' FLD
      FROM 
        ds_column_list_label
      WHERE ds_column_list_label.table_name = in_table_name and ds_column_list_label.summarytype<>''
        group by ds_column_list_label.table_name
      
--      union

--      SELECT
--        '{"ftype":"summary","dock":"bottom"}' FLD
--      FROM 
--        ds_column_list_label
--      WHERE ds_column_list_label.table_name = in_table_name and ds_column_list_label.summarytype<>''
--      group by ds_column_list_label.table_name
      


    ) A
    ;
  RETURN result;

END //

-- SOURCE FILE: ./src//ui/list/100.getListPlugins.sql 
DELIMITER //
create table if not exists ds_listplugins (
  `table_name` varchar(128),
  `ptype` varchar(255),
  CONSTRAINT `fk_ds_listplugins_ds` FOREIGN KEY (`table_name`) REFERENCES `ds` (`table_name`) ON DELETE CASCADE ON UPDATE CASCADE

) //

DROP FUNCTION IF EXISTS `getListPlugins` //
CREATE FUNCTION `getListPlugins`(
    in_table_name varchar(64)
) 
RETURNS longtext
DETERMINISTIC
BEGIN 
    DECLARE result longtext;


    SELECT
      concat('[', ifnull(group_concat(FLD separator ', '),'') ,']') 
    INTO
      result
    FROM 
    (
      SELECT
        concat('{"ptype":"gridviewdragdrop","pluginId":"',LOWER(ds.table_name),'_gridviewdragdrop","dragText":"Reihenfolge ändern","reorderfield":"',LOWER(ds.table_name),'__',LOWER(ds.reorderfield),'"}') FLD
      FROM 
        ds 
      WHERE ds.table_name = in_table_name and ds.reorderfield<>'' and ds.reorderfield is not null

      UNION

      SELECT
        concat('{"ptype":"',ds_listplugins.ptype,'","pluginId":"',LOWER(ds_listplugins.table_name),'_gridexporter" }') FLD
      FROM 
        ds_listplugins 
      WHERE ds_listplugins.table_name = in_table_name 



    ) A
    ;
  RETURN result;

END //

-- SOURCE FILE: ./src//ui/list/100.getListViewController.sql 
DELIMITER //

DROP FUNCTION IF EXISTS `getListViewController` //
CREATE FUNCTION `getListViewController`(in_table_name varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT '
# getListViewController

`getListViewController` return the JS Model Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE result longtext default '
Ext.define("Tualo.DataSets.controller.list.[{ds_name}]", {
  extend: "Tualo.DataSets.ListController",
  alias: "controller.[{lowerprefix}][{table_name_lower}]_list_controller",
});
';
    SET result = `replaceDefaultDefinitionVars`(in_table_name,result);
    SET result = REPLACE(result,'[{fields}]', getModelFields( in_table_name ) );


    RETURN result;
END //

-- SELECT getListViewController('ds') x //

-- SOURCE FILE: ./src//ui/list/100.getListViewModel.sql 


DELIMITER //

DROP FUNCTION IF EXISTS `getListViewModel` //
CREATE FUNCTION `getListViewModel`(in_table_name varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT '
# getListViewModel

`getListViewModel` return the JS Model Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE reorderfield varchar(64);
    DECLARE result longtext default '
        Ext.define("Tualo.DataSets.models.list.[{ds_name}]", {
        extend: "Ext.app.ViewModel",
        alias: "viewmodel.[{lowerprefix}][{table_name_lower}]_list_model",
        data: {
            contextmenu: [],
            toolContextmenu: {},
            reorderfield: "[{reorderfield}]",
            table_name: "[{table_name_lower}]"
        }
        });
    ';
    SELECT ds.reorderfield INTO reorderfield FROM ds WHERE ds.table_name = in_table_name;
    IF reorderfield IS NULL THEN SET reorderfield=""; END IF;
            
    SET result = `replaceDefaultDefinitionVars`(in_table_name,result);
    SET result = REPLACE(result,'[{reorderfield}]', reorderfield );


    RETURN result;
END //

-- SELECT getListViewModel('ds') x //

-- SOURCE FILE: ./src//ui/list/100.getListViewport.sql 
DELIMITER //

DROP FUNCTION IF EXISTS `getListViewport` //
CREATE FUNCTION `getListViewport`(in_table_name varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT '
# getListViewport

`getListViewport` return the JS Model Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE listselectionmodel varchar(64);
    DECLARE result longtext default '
        Ext.define("Tualo.DataSets.list.[{ds_name}]",  {
            extend: "[{listviewbaseclass}]",
            alias: "widget.[{lowerprefix}]listview-[{table_name_lower}]",
            tablename: "[{table_name_lower}]",
            paramfieldPrefix: "[{table_name_lower}]__",
            lowerprefix: "[{lowerprefix}]",
            controller: "[{lowerprefix}][{table_name_lower}]_list_controller",
            viewModel: {
                type: "[{lowerprefix}][{table_name_lower}]_list_model"
            },
            selModel: "[{listselectionmodel}]",
            features: [{listfeatures}],
            columns:  [{columns}],
            store: {
                type: "[{lowerprefix}][{table_name_lower}]_store"
            },
            stateId: "[{lowerprefix}][{table_name_lower}]_state",
            stateful: true,
            viewConfig: {
                plugins: [ ].concat([{listplugins}]),
                listeners: {
                    drop: "onDropGrid"
                },
                getRowClass: function(record, rowIndex, rowParams, store){
                    var tn = store.tablename||"";
                    if ((rowIndex%2==0)&&(typeof record.data[tn+"___rowclass_even"]=="string")){
                        return record.data[tn+"___rowclass_even"];
                    }
                    if ((rowIndex%2==1)&&(typeof record.data[tn+"___rowclass_odd"]=="string")){
                        return record.data[tn+"___rowclass_odd"];
                    }
                    return "";
                }
            }
            });
    ';
    SELECT ds.listselectionmodel INTO listselectionmodel FROM ds WHERE ds.table_name = in_table_name;
    IF listselectionmodel IS NULL THEN SET listselectionmodel=""; END IF;
            
    SET result = `replaceDefaultDefinitionVars`(in_table_name,result);
    SET result = REPLACE(result,'[{listselectionmodel}]', listselectionmodel );
    
    
    SET result = REPLACE(result,'[{columns}]', getListColumns(in_table_name,'') );
    SET result = REPLACE(result,'[{listfeatures}]', getListFeatures(in_table_name) );
    SET result = REPLACE(result,'[{listplugins}]', getListPlugins(in_table_name) );

    RETURN result;
    
END //

-- SELECT getListViewport('ds') x //



-- SOURCE FILE: ./src//ui/list/101.getListColumnFilter.sql 
DELIMITER //

DROP FUNCTION IF EXISTS `getListColumnFilter` //
CREATE FUNCTION `getListColumnFilter`(in_table_name varchar(64),in_column_name varchar(64))
RETURNS longtext
READS SQL DATA
BEGIN 
    DECLARE listfiltertype varchar(255);
    SELECT ds_column_list_label.listfiltertype INTO listfiltertype FROM ds_column_list_label 
    WHERE column_name=in_column_name and table_name=in_table_name and ds_column_list_label.listfiltertype<>''
    and ds_column_list_label.listfiltertype<>"''";
    IF listfiltertype IS NOT NULL THEN
        IF trim(listfiltertype)='' THEN
            RETURN concat('"filter": {"type":"string"}');
        END IF;
        RETURN concat('"filter": {"type":"',listfiltertype,'"}');
    END IF;
    
    IF EXISTS( SELECT column_name FROM ds_column WHERE column_name=in_column_name and table_name=in_table_name and data_type='date' ) THEN
        RETURN '"filter": {"type":"date", "dateFormat": "Y-m-d"}';
    END IF;
    IF EXISTS( SELECT column_name FROM ds_column WHERE column_name=in_column_name and table_name=in_table_name and data_type='int' ) THEN
        RETURN '"filter": {"type":"number"}';
    END IF;
    IF EXISTS( SELECT column_name FROM ds_column WHERE column_name=in_column_name and table_name=in_table_name and (column_type='bigint(4)' or data_type in ('tinyint','boolean')) ) THEN
        RETURN '"filter": {"type":"boolean", "yesText": "Ja", "noText":"Nein"}';
    END IF;
    RETURN '"filter": {"type":"string"}';
END //

-- SOURCE FILE: ./src//ui/list/101.getListColumns.sql 
DELIMITER //



DROP FUNCTION IF EXISTS `getListColumns` //
CREATE FUNCTION `getListColumns`(
  in_table_name varchar(64),
  in_append_column longtext
)
RETURNS longtext
DETERMINISTIC
COMMENT 'Return a JSON-STRING of List Columns'
BEGIN 
  DECLARE result longtext default '';

  SELECT
      concat('[', if(in_append_column<>'',concat(in_append_column,','),'') ,ifnull( group_concat(x order by position separator ', '),'') ,']') 
  INTO 
    result
  FROM
  (

  
    select
    concat(
      '{',
      '"dataIndex":',	`DOUBLEQUOTE`( lower(concat( ds_column_list_label.table_name,'__',ds_column_list_label.column_name ) )) ,',',
      '"header":',		`DOUBLEQUOTE`(ds_column_list_label.label) ,',',
      '"xtype":',		`DOUBLEQUOTE`(ds_column_list_label.xtype) ,',',
      
      if(ds_column_list_label.summarytype<>'', concat( '"summaryType": ',`DOUBLEQUOTE`(ds_column_list_label.summarytype),',' ),'' ),
      if(ds_column_list_label.summarytype<>'', concat( '"summaryRenderer": Tualo.Renderer.getRenderer(', `DOUBLEQUOTE`(ds_column_list_label.summaryrenderer),'),' ),'' ),
      
      /*
      getListColumnFilter( ds_column_list_label.table_name,ds_column_list_label.column_name ), ',', 
      summaryType
      summaryRenderer
*/

      '"filter":',		if(ds_column_list_label.listfiltertype <>'',  concat(' {"type":"',ds_column_list_label.listfiltertype,'"}') ,if(ds_column.data_type='date','{"type":"date", "dateFormat": "Y-m-d"}',  if(ds_column.data_type='int','{"type":"number"}', if((ds_column.data_type in ('tinyint','boolean') or ds_column.column_type='bigint(4)' ),'{"type":"boolean", "yesText": "Ja", "noText":"Nein"}','{"type":"string"}') )   ) ),',',

      '"hidden":',		if(ds_column_list_label.hidden=0,'false','true') ,',',
      if( ifnull(ds_column_list_label.editor,'')='','', concat( '"editor": "', ds_column_list_label.editor ,'"', ', ') ),
      '"flex":',		ifnull(ds_column_list_label.flex,1) ,'',
      '}'
    ) x,
    ds_column_list_label.position
    from 
        ds_column_list_label 
        join ds_column on (ds_column.table_name,ds_column.column_name) = (ds_column_list_label.table_name,ds_column_list_label.column_name)
    where ds_column_list_label.table_name=in_table_name
    order by ds_column_list_label.position
  ) A
  where x<>''
  ;
  RETURN result;
END //


-- SOURCE FILE: ./src//ui/model/100.getCheckModelDefinition.sql 
DELIMITER //

DROP FUNCTION IF EXISTS `getCheckModelDefinition` //
CREATE FUNCTION `getCheckModelDefinition`(in_table_name varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT '
# getCheckModelDefinition

`getCheckModelDefinition`return the JS Model Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE result longtext default '
Ext.define("Tualo.DataSets.checkmodel.[{ds_name}]", {
  extend: "Tualo.DataSets.model.[{ds_name}]",
  entityName: "check_[{table_name_lower}]",
  fields: [{
      "name": "__checked",
      "type": "boolean",
      "default": false
  },{
      "name": "__checkedRecord"
  }]
});
';
    SET result = `replaceDefaultDefinitionVars`(in_table_name,result);
    RETURN result;
END //

-- SELECT getCheckModelDefinition('ds') x //

-- SOURCE FILE: ./src//ui/model/100.getModelDefinition.sql 
DELIMITER //

DROP FUNCTION IF EXISTS `getModelDefinition` //
CREATE FUNCTION `getModelDefinition`(in_table_name varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT '
# getModelDefinition

`getModelDefinition`return the JS Model Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE result longtext default '
Ext.define("Tualo.DataSets.model.[{ds_name}]", {
  extend: "Ext.data.Model",
  
  entityName: "[{table_name_lower}]",
  get: function(fieldName) {
    if (this.data.hasOwnProperty(fieldName)) return this.data[fieldName];
    if (this.data.hasOwnProperty("__table_name") && this.data.hasOwnProperty(this.data["__table_name"]+"__"+fieldName)) return this.data[this.data["__table_name"]+"__"+fieldName];
    return this.data[fieldName];
  },
  idProperty: "__id",
  idPropertyY: function(v){ return [{idfieldformula}].join("|");},
  fields: [{fields}]
});
';

/*
idProperty: function(v) {
  return v.pk1 + '_' + v.pk2;
}
*/
    SET result = `replaceDefaultDefinitionVars`(in_table_name,result);
    if result is null THEN     SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "getModelDefinition: result is null after replaceDefaultDefinitionVars";  END IF;

    SET result = REPLACE(result,'[{fields}]', getModelFields( in_table_name ) );
    if result is null THEN     SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "getModelDefinition: result is null after getModelFields";  END IF;

    SET result = REPLACE(result,'[{idfieldformula}]', ifnull( getDSKeyJSFormula( in_table_name ),'__id' ) );
    if result is null THEN     SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "getModelDefinition: result is null after getDSKeyJSFormula";  END IF;


    RETURN result;
END //

-- SELECT getModelDefinition('ds') x //

-- SOURCE FILE: ./src//ui/model/100.getModelSingleField.sql 
DELIMITER //

DROP FUNCTION IF EXISTS `getModelSingleField` //
CREATE FUNCTION `getModelSingleField`(
    in_table_name varchar(64),
    in_column_name varchar(64)
) 
RETURNS longtext
DETERMINISTIC
BEGIN 
  DECLARE result longtext default '';

  
  SELECT
    concat(
      '{ ',
        '"name": "',lower(ds_column.table_name),'__',lower(ds_column.column_name),'",',char(10),
        getModelSingleFieldDefault( `ds_db_types_fieldtype`.`fieldtype` , `ds_column`.`default_value` ),
        getModelSingleFieldDateFormat( `ds_column`.`data_type`  ),
        '"type": "', if(ds_column.column_type='bigint(4)','boolean', ifnull(`ds_column_forcetype`.`fieldtype`, ifnull(`ds_db_types_fieldtype`.`fieldtype`,'string'))) ,'"', char(10),


        if(
            ds_column.default_value like '{%',',"allowNull": true',
            ''
        ),'',char(10),

        /*
        if(
            ds_column.default_value like '{%','string',
            ifnull(`ds_db_types_fieldtype`.`fieldtype`,'string')
        ),'"',char(10),

        */
      ' }'
    )
  INTO result 
  FROM 
    `ds_column`
    left join `ds_db_types_fieldtype` on `ds_column`.`data_type` = `ds_db_types_fieldtype`.`dbtype`
    left join `ds_column_forcetype` 
    on (`ds_column`.`table_name`,`ds_column`.`column_name`) =  (`ds_column_forcetype`.`table_name`,`ds_column_forcetype`.`column_name`)
  WHERE
    ds_column.column_name = in_column_name
    and ds_column.table_name = in_table_name
  ;

  RETURN result;
END //

-- SOURCE FILE: ./src//ui/model/100.getModelSingleFieldDateFormat.sql 
DELIMITER //


DROP FUNCTION IF EXISTS `getModelSingleFieldDateFormat` //
CREATE FUNCTION `getModelSingleFieldDateFormat`( in_data_type varchar(64) )
RETURNS longtext
DETERMINISTIC
COMMENT 'Return a Fragment for dateFormat property'
BEGIN 
  DECLARE result longtext default '';
  IF in_data_type = 'date' THEN
        SET result = concat( '"dateFormat": "Y-m-d",',char(10) );
  ELSEIF in_data_type = 'datetime' THEN
        SET result = concat( '"dateFormat": "Y-m-d H:i:s","dateWriteFormat":"Y-m-d H:i:s",',char(10) );
  ELSEIF in_data_type = 'time' THEN
        SET result = concat( '"dateFormat": "H:i:s","dateWriteFormat":"H:i:s",',char(10) );
  END IF;

  RETURN result;
END //
-- SOURCE FILE: ./src//ui/model/100.getModelSingleFieldDefault.sql 
DELIMITER //


DROP FUNCTION IF EXISTS `getModelSingleFieldDefault` //
CREATE FUNCTION `getModelSingleFieldDefault`(
  in_fieldtype varchar(64), 
  in_default_value varchar(255)
)
RETURNS longtext
DETERMINISTIC
COMMENT 'Return a Fragment for defaultValue property'
BEGIN 
  DECLARE result longtext default '';
  IF (in_fieldtype IS NULL) THEN
    SET in_fieldtype = 'string';
  END IF;
  IF in_default_value<>'' and INSTR(in_default_value,'{')=0 THEN
    IF in_fieldtype in ('string','date') THEN
    
      SET result = concat( '"defaultValue": "', ifnull(in_default_value,'') ,'",',char(10) );

    ELSEIF in_fieldtype in ('boolean') THEN
      IF in_default_value REGEXP '^-?[0-9]+$' THEN
        SET result = concat( '"defaultValue": ', if( cast( ifnull(in_default_value,'0') as UNSIGNED)=0,'false','true') ,',',char(10) );
      END IF;
    ELSE
    
      SET result = concat( '"defaultValue": "', ifnull(in_default_value,'0') ,'",',char(10) );
    
    END IF;
  END IF;

  RETURN result;
END //

-- SOURCE FILE: ./src//ui/model/101.getModelFields.sql 
DELIMITER //



DROP FUNCTION IF EXISTS `getModelFields` //
CREATE FUNCTION `getModelFields`(
    in_table_name varchar(64)
) 
RETURNS longtext
DETERMINISTIC
BEGIN 
    DECLARE result longtext;


    SELECT
      concat('[', group_concat(FLD separator ', '),']') 
    INTO
      result
    FROM 
    (
      SELECT
        concat('{"name":"__id","type":"string"},{"name":"__displayfield","type":"string"},{"name":"__table_name","type":"string","defaultValue":"',in_table_name,'"},{"name":"__rownumber","type":"number"},{"name":"__formlocked","type":"boolean"}') FLD
      UNION
      SELECT
        getModelSingleField(`ds_column`.`table_name`,`ds_column`.`column_name`) FLD
      FROM
        `ds_column`
      WHERE
        `ds_column`.`table_name` = in_table_name
         and `ds_column`.`existsreal`=1
    ) A
    ;
  RETURN result;

END //

-- select getModelSingleField('ds','listselectionmodel') //
-- select getModelSingleField('ds','searchany') //
-- select getModelSingleField('ds_query_values_date','value') //
-- select getModelSingleField('ds_query_values_datetime','value') //
-- select getModelSingleField('ds_query_values_time','value') //
-- select getModelFields('zahlungsarten') //

-- SOURCE FILE: ./src//ui/store/100.getColumnsStore.sql 
DELIMITER //

DROP FUNCTION IF EXISTS `getColumnsStore` //
CREATE FUNCTION `getColumnsStore`(in_table_name varchar(64))
RETURNS longtext

READS SQL DATA
COMMENT '
# getColumnsStore

`getColumnsStore`return the JS Store Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE result longtext;

    DECLARE columnstore_result longtext default '
Ext.define("Tualo.DataSets.columnstore.[{ds_dropdownfield}]", {
    extend: "Tualo.DataSets.stores.[{ds_name}]",
    autoLoad: true,
    pageSize: 1000000,
    proxy: {
      type: "ajax",
      url: "./ds/[{table_name_lower}]/read",
      noCache: false,
      extraParams: {
        only: "[{idfield}],[{displayfield}]",
        queryField: "[{displayfield}]"
      },
      reader: {
        type: "json",
        rootProperty: "data",
        idProperty: "[{idfield}]"
      }
    }
});
';
    SET columnstore_result = `replaceDefaultDefinitionVars`(in_table_name,columnstore_result);



  
  
    SELECT 
        ifnull(
            group_concat( F separator '
            '),
        '')
    INTO 
        result
    FROM (
        SELECT
            REPLACE(
                REPLACE(
                    REPLACE(
                        REPLACE(
                            REPLACE(
                                columnstore_result,
                                '[{form_xtype}]',
                                form_xtype
                            ),
                            '[{table_name_lower}]',
                            table_name_lower
                        ),
                        '[{displayfield}]',
                        displayfield
                    ),
                    '[{idfield}]',
                    idfield
                ),
                '[{ds_dropdownfield}]',
                ds_dropdownfield
            ) F
        FROM (
            select
                concat( CONCAT(UCASE(LEFT(ds_dropdownfields.table_name, 1)), SUBSTRING(ds_dropdownfields.table_name, 2)),'_',lower( ds_dropdownfields.name ) ) ds_dropdownfield,
                CONCAT(UCASE(LEFT(ds.table_name, 1)), SUBSTRING(ds.table_name, 2)) ds_name,
                ds_dropdownfields.idfield,
                ds_dropdownfields.displayfield,
                lower(ds.table_name) table_name_lower,
                lower( concat(ds_dropdownfields.table_name,'_',ds_dropdownfields.name) ) ds_dropdownfield_lower,
                ds_dropdownfields.table_name,
                ds_dropdownfields.name,
                '' form_xtype, 
                ds_dropdownfields.filterconfig  
            from 
                ds_dropdownfields
                join ds
                    on ds_dropdownfields.table_name = ds.table_name
                    and ds.existsreal=1
                join (
                    select table_name from ( select table_name from ds_access where `role` in (select `group` from `VIEW_SESSION_GROUPS`) and (`read`+`write`+`delete`+`append` > 0) ) g_dsa group by table_name
                ) ds_access
                on ds.table_name = ds_access.table_name
                and ds.table_name = in_table_name
        ) A
    ) B
    ;

    RETURN result;

END //

-- select getColumnsStore('ds') //
-- SOURCE FILE: ./src//ui/store/100.getStoreDefinition.sql 
DELIMITER //

DROP FUNCTION IF EXISTS `getStoreDefinition` //
CREATE FUNCTION `getStoreDefinition`(in_table_name varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT '
# getStoreDefinition

`getStoreDefinition`return the JS Store Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE ds_name varchar(64);
    DECLARE lowerprefix varchar(32) default '';
    DECLARE table_name_lower varchar(64);
    DECLARE groupfield varchar(130);
    DECLARE default_pagesize int default 100;

    DECLARE result longtext default '
      Ext.define("Tualo.DataSets.stores.[{ds_name}]", {
        extend: "Tualo.DataSets.store.Basic",
        statics: {
          tablename: "[{table_name_lower}]"
        },
        statefulFilters: true,
        groupField: [{groupfield}],
        tablename: "[{table_name_lower}]",
        alias: "store.[{lowerprefix}][{table_name_lower}]_store",
        model: "Tualo.DataSets.model.[{ds_name}]",
        autoSync: false,
        pageSize: [{default_pagesize}]
      });
    ';
    
    SELECT ds.default_pagesize INTO default_pagesize from ds where ds.table_name = in_table_name;
    IF default_pagesize is NULL THEN SET default_pagesize = 100; END IF;


    
    SELECT QUOTE(concat( ds_column_list_label.table_name,'__',  ds_column_list_label.column_name)) INTO groupfield from ds_column_list_label where ds_column_list_label.table_name=in_table_name and  ds_column_list_label.grouped=1 limit 1;
    IF groupfield is NULL THEN SET groupfield = 'false'; END IF;

    SET table_name_lower = LOWER(in_table_name);
    SET ds_name = CONCAT(LEFT(UCASE(in_table_name),1),SUBSTRING(table_name_lower,2));
    SET result = REPLACE(result,'[{table_name_lower}]',table_name_lower);
    SET result = REPLACE(result,'[{ds_name}]',ds_name);
    SET result = REPLACE(result,'[{lowerprefix}]',lowerprefix);
    SET result = REPLACE(result,'[{default_pagesize}]',default_pagesize);
    SET result = REPLACE(result,'[{groupfield}]',groupfield);


    RETURN result;
END //

-- SELECT getStoreDefinition('ds') x //

-- SOURCE FILE: ./src//ui/view/100.getContextMenu.sql 
DELIMITER //

DROP FUNCTION IF EXISTS `getContextMenu` //
CREATE FUNCTION `getContextMenu`(in_table_name varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT '
# getContextMenu

`getContextMenu` return the JS Model Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 

    DECLARE result longtext default '';





    SELECT
        concat(
            '[',
            ifnull( group_concat(F separator ','), ''),
            ']'
        )
    INTO 
        result
    FROM
    (
        
        SELECT 
            concat(
                '{',
                    '"table_name":"',table_name,'",',
                    '"name":"',name,'",',
                    '"position": ',position,',',
                    '"component":"',component,'",',
                    '"paramfield":"',paramfield,'",',
                    '"params":"',params,'"',
                '}'
            ) F
        FROM (
            select
                `ds_contextmenu`.`table_name` `table_name`,
                `ds_contextmenu`.`name` `name`,
                `ds_contextmenu`.`position` `position`,
                `ds_contextmenu`.`component` `component`,
                `ds_contextmenu`.`paramfield` `paramfield`,
                group_concat(`ctx_groups`.`group` separator ',') `groups`,
                group_concat(`ds_contextmenu_params`.`param` separator ',') `params`
            from
                `ds_contextmenu`
                left join

                (
                
                select
                    `table_name`,
                    `name`,
                    `group`
                from
                    `ds_contextmenu_groups`
                where `table_name`= in_table_name
                and `group` in (select `group` from VIEW_SESSION_GROUPS)
                ) ctx_groups


                on (`ds_contextmenu`.`table_name`,`ds_contextmenu`.`name`) = (`ctx_groups`.`table_name`,`ctx_groups`.`name`)
                left join ds_contextmenu_params
                on (`ds_contextmenu`.`table_name`,`ds_contextmenu`.`name`) = (`ds_contextmenu_params`.`table_name`,`ds_contextmenu_params`.`name`)
            where
                `ds_contextmenu`.`table_name`= in_table_name
            group by 
                `ds_contextmenu`.`table_name`,`ds_contextmenu`.`name`
            order by `position` asc
        ) B

        
    ) A
    ;


    RETURN result;
END //

-- select getContextMenu('ds') \G
-- SOURCE FILE: ./src//ui/view/100.getGlobalSearch.sql 


DELIMITER //

DROP FUNCTION IF EXISTS `getGlobalSearch` //
CREATE FUNCTION `getGlobalSearch`(in_table_name varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT '
# getGlobalSearch

`getGlobalSearch` return the JS Model Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE result longtext default '
    
Ext.define("Tualo.DataSets.globalsearch.[{ds_name}]", {
  extend: "Ext.panel.Panel",
  requires: [
    "Tualo.DataSets.globalsearch.Static"
  ],
  listeners: {
    boxReady: "onBoxReady"
  },
  statics: {
    searchTitle: "Suche in [{title}]",
    reportstores: [ ],
    queryReportstores: Tualo.DataSets.globalsearch.Static.queryReportstores("[{table_name_lower}]"),
    globalsearch: [{globalsearch}],
    search: Tualo.DataSets.globalsearch.Static.search("[{table_name_lower}]"),
  },
  title: "Suchen in: [{title}]",
  alias: "globalsearch.[{lowerprefix}][{table_name_lower}]",
  viewModel: {
    data: {
    }
  },
  scrollable: "y",
  items:[
    {
      xtype: "dataview",

      reference: "dataview",
      store: {
        type: "array",
        fields: ["className","table","__id","display"],
        data: []
      },
      overItemCls: "globalsearch-over",
      itemSelector: "div.dataview-multisort-item",
      tpl: [
        "<tpl for=\\".\\">",
            "<div class=\\"dataview-multisort-item\\" style=\\"margin:15px;padding: 15px;\\">",
            "<h3>{display}</h3>",
            "<p>{__id}</p>",
            "</div>",
        "</tpl>"
      ],
      listeners: {
        itemclick: "onItemClick"
      }
    }
  ]
});

    ';
    SET result = `replaceDefaultDefinitionVars`(in_table_name,result);
    RETURN result;
END //

-- SELECT getGlobalSearch('ds') \G
-- SOURCE FILE: ./src//ui/view/100.getPreviewFields.sql 
DELIMITER //

DROP FUNCTION IF EXISTS `getPreviewFields` //
CREATE FUNCTION `getPreviewFields`(in_table_name varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT '
# getPreviewFields

`getPreviewFields` return the JS Model Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 

    DECLARE result longtext default '';


    SELECT
        concat(
            '[',
            ifnull( group_concat(F order by position separator ','), ''),
            ']'
        )
    INTO 
        result
    FROM
    (
        select
            concat(
                '{
                ',
                '"fieldLabel": "',ds_preview_form_label.label,'",',
                '"anchor": "100%",',
                '"xtype": "',ds_preview_form_label.xtype,'",',
                '"name": "',ds_preview_form_label.table_name,'__',ds_preview_form_label.column_name,'",',
                '"tablename": "',lower(ds_preview_form_label.table_name),'",',
                '"bind": "{record.', ds_preview_form_label.table_name,'__',ds_preview_form_label.column_name,'}"',
                '}
                '
            ) F,
            ds_preview_form_label.position
        from
            ds_preview_form_label
            join ds_column 
            on  (ds_column.table_name, ds_column.column_name) = (ds_preview_form_label.table_name, ds_preview_form_label.column_name)
            and ds_column.existsreal=1
        where
            ds_preview_form_label.table_name=in_table_name
        and
            ds_preview_form_label.active=1
        order by ds_preview_form_label.position
    ) A
    ;


    RETURN result;
END //

-- select getPreviewFields('ds') \G
-- SOURCE FILE: ./src//ui/view/100.getViewport.sql 
DELIMITER //

DROP FUNCTION IF EXISTS `getViewport` //
CREATE FUNCTION `getViewport`(in_table_name varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT '
# getViewport

`getViewport` return the JS Model Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE aformxtype varchar(50) default '';
    DECLARE allowform varchar(50) default '';


    DECLARE rendererList longtext default '';

    DECLARE result longtext default '
    Ext.define("Tualo.DataSets.views.[{ds_name}]",  {
        extend: "Tualo.DataSets.Viewport",
        ds: "[{table_name_lower}]",
        statics: {
            title: "[{title}]",
            tablename: "[{table_name_lower}]",
            hint: "[{hint}]"
        },
        border: false,
        requires: [
            "Tualo.DataSets.list.[{ds_name}]",
            "Tualo.DataSets.models.[{ds_name}]",
            "Tualo.DataSets.controller.[{ds_name}]"
        ],
        alias: "widget.[{lowerprefix}]view-[{table_name_lower}]",
        layout: "border",
        
    
        controller: "[{lowerprefix}][{table_name_lower}]_controller",
        viewModel: {
            type: "[{lowerprefix}][{table_name_lower}]_model"
        },

        bind: {
            headerPosition: "{headerPosition}"
        },
        listeners:{
            boxready: "onBoxReady",
            
        },
        publishes: {
            record: true,
            autoSync: true,
            autoLoad: true,
            referencedRecord: true,
            selectFirstRecord: true,
            forceHeader: true,
            hideList: true,
        },
        config: {
            record: null,
            referencedRecord: null,
            selectFirstRecord: true,
            forceHeader: false,
            autoSync: false,
            autoLoad: true,
            hideList: false
        },
        items: [
            {
                region: "west",
                itemId: "previewform",
                xtype: "form",
                split: true,
                collapsible: true,
                minWidth: 200,
                bodyPadding: "10px",
                reference: "[{table_name_lower}]_previewform",
                title: "Vorschau",
                bind: {
                    hidden: "{!previewform}"
                },
                scrollable: "y",
                fieldDefaults: {
                    msgTarget: "side",
                    labelAlign: "top",
                    labelWidth: 190,
                    anchor: "100%",
                    labelStyle: "font-weight:bold"
                },
                items: [{preview_formFields}]
            },
            {
                region: "center",
                itemId: "card",
                layout: {
                    type: "horizontal-accordion",
                    titleCollapse: true,
                    
                    animate: true
                },
                defaults: {
                    headerPosition: "left",
                },
                items: [
                    {
                        itemId: "list",
                        title: "Liste",
                        

                        xtype: "[{lowerprefix}][{listxtypeprefix}]-[{table_name_lower}]",
                        bind: {
                            store: "{list}",
                            hidden: "{hideList}",
                            selection: "{record}"
                        },
                        contextmenu: [{contextconfig}],
                        
                        dockedItems: [
                            {
                                xtype: "pagingtoolbar",
                                listeners: {
                                    beforechange: "onPagerChange"
                                },
                                bind: {
                                    store: "{list}",
                                },
                                
                                dock: "bottom",
                                displayInfo: true,
                                items: [
                                {xtype: "tbtext",text: "Zeilen:"},
                                {
                                    itemId: "pagesize",
                                    xtype: "combobox",
                                    store: {
                                    type: "array",
                                    fields: ["size"],
                                    data: [[25],[50],[100],[500],[1000],[5000],[10000],[100000],[1000000]]
                                    },
                            
                                    displayField: "size",
                                    valueField: "size",
                                    value: [{default_pagesize}],
                                    listeners:{
                                    change: function(f,nv,ov){
                                        if (f.lockUpdate===true){
                                        return;
                                        }
                                        var tb = f.up("pagingtoolbar");
                                        tb.getStore().setPageSize(parseInt(f.getValue()));
                                        tb.getStore().loadPage(tb.getStore().currentPage);
                                    }
                                    }
                                }
                            
                                ]
                            }
                        ],
                        flex: 1,
                        listeners: {
                            itemdblclick: "onListItemDblClick",
                            select: "onListItemSelect"
                        }
                    },
                    {
                        flex: 1,
                        headerPosition: "left",
                        title: "Formular",
                        bind: {
                            hidden: "{hideForm}",
                            disabled: "{disableForm}",
                            currentrecord:  "{record}"
                        },

                        style: {
                            paddingTop: "1px"
                        },
                        listeners: {
                            show: function(me){ 
                                try{
                                    for(var i=0;i<me.getComponent("tabs").items.getCount();i++){
                                        if (me.getComponent("tabs").items.getAt(i).hidden==false){
                                            if (!Ext.isEmpty(me.getComponent("tabs").items.getAt(i).title)){
                                                me.getComponent("tabs").setActiveItem( me.getComponent("tabs").items.getAt(i) );
                                                break;
                                            }
                                        }
                                    }
                                    
                                }catch(e){console.error("ERROR",e)} 
                            },
                            modifiedRecords: "onModifiedRecords"
                        },
                        
                        itemId: "form",
                        get xtype() {
                            if ( Ext.isEmpty(Ext.ClassManager.getByAlias("widget.[{viewformxtype}]")) ){
                                console.warn("Formular *[{viewformxtype}]*  wurde nicht gefunden");
                                return "tualorecordpanel";
                            }
                            return "[{viewformxtype}]";
                        }
                    }
                    [{rendererList}]
                ]
            }
        ],
        title: {
            type: "title",
            bind: {
                text: "{title}",
            },
        },
        header: {
            xtype: "header",
            bind: {
                userCls: "{userCls}",
            }
        },
        tools: [

            {
                xtype: "combobox",
                reference: "quicksearchComboBox",
                displayField: "__displayfield",
                emptyText: "Suchen ...",
                typeAhead: false,
                hideLabel: true,
                hideTrigger:true,
                minChars: [{quicksearch_minchars}],
                flex: 1,
                listeners: {
                    select: "onQuickSearchSelect"
                },
                bind:{
                    store: "{quicksearch}",
                    disabled: "{disableSearch}",
                    hidden: "{hideSearchbar}"
                },
            },
            {
                xtype: "label",
                text: " ",
                width: 50
            },
            {
                xtype: "label",
                flex: 1,
                bind:{
                    hidden: "{!referencedList}"
                },
                width: 50
            },
            {
                xtype: "glyphtool",
                glyphPrefix: "entypo et-",
                glyph: "triangle-left",

                handler: "prev",
                bind:{
                disabled: "{disablePrev}",
                    hidden: "{referencedList}"
                },
                tooltip: "vorheriger"
            },
            {
                xtype: "label",
                bind:{
                    text: "{pagerText}",
                    hidden: "{referencedList}"
                },
                padding: "5px",
                minWidth: 15
            },
            {
                xtype: "glyphtool",
                glyphPrefix: "entypo et-",
                glyph: "triangle-right",

                handler: "next",
                bind:{
                    disabled: "{disableNext}",
                    hidden: "{referencedList}"
                },
                tooltip: "nächster"
            },
            {
                xtype: "tbspacer",
                width: 20
            },
            {
                xtype: "glyphtool",
                glyph: "save",
                tooltip: "Speichern",
                reference: "savebtn",
                handler: "save",
                bind:{
                    disabled: "{disableSave}",
                    hidden: "{hideSave}"
                }
            },
            {
                xtype: "glyphtool",
                glyph: "history",
                tooltip: "Änderungen verwerfen",
                reference: "historybtn",
                handler: "reject",
                bind:{
                    disabled: "{disableSave}",
                    hidden: "{hideSave}"
                }
            },{
                xtype: "glyphtool",
                glyphPrefix: "entypo et-",
                glyph: "circle-with-plus",
                tooltip: "Hinzufügen",
                handler: "append",
                bind:{
                    disabled: "{disableAdd}",
                    hidden: "{hideAppend}"
                }
            },
            {
                xtype: "glyphtool",
                glyphPrefix: "entypo et-",
                glyph: "circle-with-minus",
                tooltip: "Entfernen",
                handler: "delete",
                bind:{
                    disabled: "{disableDelete}",
                    hidden: "{hideDelete}"
                },
            },
            { 
                xtype: "glyphtool",
                glyphPrefix: "entypo et-",
                glyph: "upload",


                tooltip: "Importieren",
                handler: "import",
                bind: {
                    hidden: "{hideAppend}"
                }
                
        
            },
            {
                xtype: "glyphtool",
                glyphPrefix: "entypo et-",
                glyph: "download",
                tooltip: "Exportieren",
                handler: "export",
                bind: {
                    hidden: "{hideExport}"
                }
        
            },
        
            {
                xtype: "glyphtool",
                glyph: "table",
                handler: "onShowGrid",
                bind:{
                    disabled: "{disableGrid}",
                    hidden: "{hideFormGrid}"
                },
                tooltip: "Liste"
            },
        
            {
                xtype: "glyphtool",
                glyph: "list-ul",
                handler: "onShowForm",
                bind:{
                    hidden: "{hideFormBtn}"
                },
                tooltip: "Formular"
            },
        
        
            {
                xtype: "glyphtool",
                glyph: "question-circle",
                handler: "showHint",
                bind:{
                    hidden: "{hideHintButton}"
                },
                tooltip: "Hinweise"
            }
        
        ]
        
    });
    ';

    
    SELECT ifnull(alternativeformxtype,''),ifnull(allowform,'0') INTO aformxtype,allowform from ds WHERE lower(table_name)=lower(in_table_name);

    -- IF aformxtype<>'' THEN
    --     SET result = REPLACE(result,'[{viewformxtype}]',aformxtype);
    -- END IF;

    SET result = REPLACE(result,'[{allowform}]',allowform);

    SET result = REPLACE(result,'[{viewformxtype}]','[{lowerprefix}]formview-[{table_name_lower}]');
    SET result = `replaceDefaultDefinitionVars`(in_table_name,result);
    SET result = REPLACE(result,'[{preview_formFields}]', getPreviewFields(in_table_name) );

    
    SET result = REPLACE(result,'[{contextconfig}]', getContextMenu(in_table_name) );



    

    SELECT 

        group_concat( F order by position SEPARATOR ',')
    INTO 
        rendererList
    FROM 
    (
        SELECT
        concat('{
            "xtype": "cmp_ds_pdfrendererpanel",
            "bind": {
                "record": "{record}"
            },
            "border": false,
            style: {
                paddingTop: "1px"
            },

            "title": ',DOUBLEQUOTE(`label`),',
            "template": ',DOUBLEQUOTE(`pug_template`),',
            "useremote": ',useremote,'
        }
        ') F,
        0 position
        FROM (

            select
              pug_template,
              label,
              if(useremote=1,'true','false') useremote
            from
              ds_renderer
            where
              table_name = in_table_name
            order by label
            
        ) RENDERER

        UNION

        SELECT 

            concat(
                '
                {
                    "title": ',DOUBLEQUOTE(`name`),',
                    "xtype": "',lower(`xtype`),'",
                    "bind": {
                        "record": "{record}"
                    },
                    "border": false,
                    "collapsible": true
                }
                '
            ) F,
        1900000+position position

        FROM 
            ds_extended_panels
        WHERE 
            table_name = in_table_name
            and active = 1 

    ) A;

    IF rendererList IS NULL THEN 
        SET rendererList = '';
    ELSE
        SET rendererList = concat(', ',rendererList);
    END IF;
    SET result = REPLACE(result,'[{rendererList}]', rendererList );




    RETURN result;
END //

-- select getViewport('ds') \G
-- select getViewport('Adressen') \G

-- SOURCE FILE: ./src//ui/view/100.getViewportController.sql 

DELIMITER //

DROP FUNCTION IF EXISTS `getViewportController` //
CREATE FUNCTION `getViewportController`(in_table_name varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT '
# getViewportController

`getViewportController` return the JS Model Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 
    DECLARE result longtext default '
    Ext.define("Tualo.DataSets.controller.[{ds_name}]", {
        extend: "Tualo.DataSets.ViewController",
        alias: "controller.[{lowerprefix}][{table_name_lower}]_controller",
    });  
    ';
    SET result = `replaceDefaultDefinitionVars`(in_table_name,result);
    RETURN result;
END //
-- SOURCE FILE: ./src//ui/view/100.getViewportModel.sql 

DELIMITER //

DROP FUNCTION IF EXISTS `getViewportModel` //
CREATE FUNCTION `getViewportModel`(in_table_name varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT '
# getViewportModel

`getViewportModel` return the JS Model Definition

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 



    DECLARE title varchar(255);
    DECLARE show_previewformfields varchar(20);
    DECLARE allowform varchar(20);
    DECLARE primaryKeys longtext;
    DECLARE special_add_commands longtext;
    DECLARE special_add_buttons longtext;
    
    DECLARE special_add_panel varchar(255) default "";
    DECLARE stores longtext;

    DECLARE readable varchar(255);
    DECLARE writeable varchar(255);
    DECLARE appendable varchar(255);
    DECLARE deleteable varchar(255);


    DECLARE result longtext default '
    Ext.define("Tualo.DataSets.models.[{ds_name}]", {
        extend: "Ext.app.ViewModel",
        alias: "viewmodel.[{lowerprefix}][{table_name_lower}]_model",
        
        data: {
            dstitle: "[{title}]",
            dsname: "[{ds_name}]",
            tablename: "[{table_name_lower}]",
            referencedRecord: null,
            referencedList: false,
            previewform: [{show_previewformfields}],
            allowForm: [{allowform}],
            primaryKeys: [{primaryKeys}],
            record: null,
            viewtype: "list",
            total: 0,
            disableGrid: false,
            isNew: false,
            saving: false,
            hideHintButton: false,
            selectFirstRecord: true,
            selectRecordRecordNumber: 1,
            readable: [{readable}],
            writeable: [{writeable}],
            appendable: [{appendable}],
            deleteable: [{deleteable}],
            autoLoad: true,
            autoSync: false,
            modifiedRecords: 0,
            selfModifiedRecords: 0,
            subModifiedRecords: 0,
            subStores: null,
            special_add_commands: [{special_add_commands}],
            special_add_buttons: [{special_add_buttons}],
            special_add_panel: "[{special_add_panel}]",
            showAction: [{showactionbtn}],
            hideList: false,
            hideExport: false,
            hideTypeButtons: false,
            forceHeader: false
        },
        
        formulas: {
            
            hideHeader: function(get){
                if (get("forceHeader")){ return false; }
                if (get("referencedList")){
                    return get("viewtype")=="list";
                }
                return false;
            },
            hideSearchbar: function(get){
                if (get("forceHeader")){ return false; }
                return get("referencedList");
            },
            headerPosition: function(get){
                return (get("referencedList")?"top":"top");
            },
            userCls: function(get){
                return get("isNew")?"new_cmp_ds":"";
            },

            listhidden: function(get){
                return get("viewtype")!="list"
            },

            formhidden: function(get){
                return get("viewtype")!="form"
            },

            hideGridBtn: function(get){
                return get("formhidden") || get("hideTypeButtons")
            },

            hideFormBtn: function(get){
                return !get("formhidden") || get("hideTypeButtons")
            },


            hideForm: function(get){
                return (get("allowForm")==0)||(get("allowForm")===false);
            },

            disableForm: function(get){
                return get("saving")
            },

            disableSearch: function(get){
                return get("saving")
            },
            disableAdd:  function(get){
                return get("saving")||(!get("appendable"));
            },
            disableDelete:  function(get){
                return get("saving")
            },

            disableSave: function(get){
                return (get("saving")||(get("modifiedRecords")==0))&&(!get("isNew"));
            },

            disablePrev: function(get){
                if (Ext.isEmpty(get("record"))) return true;
                return get("saving")||(get("record").get("__rownumber")<=0);
            },

            disableNext: function(get){
                if (Ext.isEmpty(get("record"))) return true;
                return get("saving")||(get("record").get("__rownumber")>=get("total"));
            },

            

            hideSave: function(get){
                return (!get("writeable")) || (!get("showAction"))
            },


            hideAppend: function(get){
                return (!get("appendable")) || (!get("showAction"))
            },

            hideDelete: function(get){
                return (!get("deleteable")) || (!get("showAction"))
            },


            pagerText: function(get){
                if (Ext.isEmpty(get("record"))) return "";
                try{
                    return [get("record").get("__rownumber"),get("total")].join(" / ");
                }catch(e){ return "";}
            },

            title: function(get){
                var t = [get("dstitle")];

                try{
                    if (Ext.isEmpty(get("record"))){
                        t.push( "kein Datensatz gewählt" );
                    }else{
                        t.push(get("record").get("__displayfield"));
                    }
                    return t.join(" >> ");
                }catch(e){ return "";}
            }
            
            
        },
        stores: [{stores}]
    });
  
    ';
    SET SESSION group_concat_max_len=18446744073709551615;

    IF (result is null) THEN
        SET @errormsg = (concat('getViewportModel  null after definition'));
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;
    END IF;

    SET result = `replaceDefaultDefinitionVars`(in_table_name,result);


    IF (result is null) THEN
        SET @errormsg = (concat('getViewportModel  null after replaceDefaultDefinitionVars'));
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;
    END IF;



    -- access and titles
    SELECT 

        ifnull(`read`,0) `read`,
        ifnull(`write`,0) `write`,
        ifnull(`append`,0) `append`,
        ifnull(`delete`,0) `delete`,
        `ds`.`title` `title`,
        ifnull(`ds`.`allowform`,0) `allowform`,
        ifnull(`ds`.`special_add_panel`,'') `special_add_panel`

    INTO 
        readable,
        writeable,
        appendable,
        deleteable,
        title,
        allowform,
        special_add_panel
        
    FROM
        ds
        left join 
            (
                SELECT
                    ds_access.table_name,
                    max(`read`) `read`,
                    max(`write`) `write`,
                    max(`append`) `append`,
                    max(`delete`) `delete`
                FROM 
                    ds_access
                    join VIEW_SESSION_GROUPS
                        on VIEW_SESSION_GROUPS.group = ds_access.role
                WHERE 
                    ds_access.table_name = in_table_name
                group by ds_access.table_name
            ) access
        on ds.table_name = access.table_name
    WHERE  ds.table_name = in_table_name
    GROUP BY  
            ds.table_name
    ;

    -- ordered primary keys
    select 
        concat('[',
        ifnull( 
            group_concat(
                concat('"',ds_column.table_name,'__', ds_column.column_name,'"')
                order by column_name 
                separator ','
            )
        ,""),
        ']')
    into 
        primaryKeys
    from 
        ds_column
    where 
        ds_column.table_name = in_table_name
        and ds_column.existsreal = 1
        and ds_column.column_key like '%PRI%'
    ;

    
    -- preview form
    select 
        if(count(*)=0,"false","true")
    into show_previewformfields
    from
    (
        SELECT 
            ds_preview_form_label.table_name
        FROM 
            ds_preview_form_label
            join ds_column
            on (ds_preview_form_label.table_name,ds_preview_form_label.column_name) = (ds_column.table_name,ds_column.column_name)
            and ds_preview_form_label.active=1
            and ds_column.existsreal=1
            and ds_column.table_name= in_table_name
        group by 
            ds_preview_form_label.table_name
    ) x
    ;


    -- additional commands
    select 
    concat('[',
        ifnull(
            group_concat( concat('{"xtype": "',xtype,'"',if(label<>'',concat( ',"tooltip": ',quote(label),' ' ) ,''),'}') separator ',')
        ,'') 
    ,']') 
    into 
        special_add_commands
    from 
        `ds_addcommands` 
    where `table_name` = in_table_name and `location`='toolbar'
    group by table_name
    order by position
    ;
    
    if (special_add_commands IS NULL) THEN SET special_add_commands='[]'; END IF;
    if (show_previewformfields IS NULL) THEN SET show_previewformfields='false'; END IF;




    -- additional buttons
    select 
    concat('[',
        ifnull(
            group_concat( concat('{"xtype": "',xtype,'"',if(label<>'',concat( ',"tooltip": ',quote(label),' ,"text": ',quote(label),'' ) ,''),'}') order by position  separator ',')
        ,'') 
    ,']') 
    into 
        special_add_buttons
    from 
        `ds_addcommands` 
    where `table_name` = in_table_name and `location`='formbuttons'
    group by table_name
    
    ;
    
    if (special_add_buttons IS NULL) THEN SET special_add_buttons='[]'; END IF;



    SET result = REPLACE(result,'[{readable}]', ifnull( readable,0) );
    IF (result is null) THEN
        SET @errormsg = (concat('getViewportModel  null after readable ',ifnull(readable,'*') ));
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;
    END IF;
    SET result = REPLACE(result,'[{writeable}]', ifnull( writeable,0) );

    IF (result is null) THEN
        SET @errormsg = (concat('getViewportModel  null after writeable'));
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;
    END IF;

    SET result = REPLACE(result,'[{appendable}]', ifnull( appendable,0) );

    IF (result is null) THEN
        SET @errormsg = (concat('getViewportModel  null after appendable'));
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;
    END IF;

    SET result = REPLACE(result,'[{deleteable}]', ifnull( deleteable,0) );


    IF (result is null) THEN
        SET @errormsg = (concat('getViewportModel  null after deleteable'));
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;
    END IF;

    SET result = REPLACE(result,'[{title}]', ifnull(title,in_table_name) );


    IF (result is null) THEN
        SET @errormsg = (concat('getViewportModel  null after title'));
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;
    END IF;

    SET result = REPLACE(result,'[{allowform}]', ifnull( allowform,0) );


    IF (result is null) THEN
        SET @errormsg = (concat('getViewportModel  null after allowform'));
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;
    END IF;

    SET result = REPLACE(result,'[{primaryKeys}]', primaryKeys );


    IF (result is null) THEN
        SET @errormsg = (concat('getViewportModel  null after primaryKeys'));
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;
    END IF;

    SET result = REPLACE(result,'[{show_previewformfields}]', show_previewformfields );


    IF (result is null) THEN
        SET @errormsg = (concat('getViewportModel  null after show_previewformfields'));
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;
    END IF;

    SET result = REPLACE(result,'[{special_add_commands}]', special_add_commands );


    IF (result is null) THEN
        SET @errormsg = (concat('getViewportModel  null after special_add_commands'));
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;
    END IF;

    SET result = REPLACE(result,'[{special_add_buttons}]', special_add_buttons );


    IF (result is null) THEN
        SET @errormsg = (concat('getViewportModel  null after special_add_buttons'));
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;
    END IF;


    SET result = REPLACE(result,'[{special_add_panel}]', special_add_panel );


    IF (result is null) THEN
        SET @errormsg = (concat('getViewportModel  null after special_add_panel'));
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @errormsg, MYSQL_ERRNO = 1001;
    END IF;



    SET result = REPLACE(result,'[{stores}]', getViewportModelStores(in_table_name) );




    RETURN result;
END //

-- select getViewportModel('ds') \G
-- SOURCE FILE: ./src//ui/view/100.getViewportModelStores.sql 




DELIMITER //

DROP FUNCTION IF EXISTS `getViewportModelStores` //
CREATE FUNCTION `getViewportModelStores`(in_table_name varchar(64))
RETURNS longtext
READS SQL DATA
COMMENT '
# getViewportModelStores

`getViewportModelStores` return the stores definition for the viewport model

# Parameter
    * `in_table_name` the table name for the store

'
BEGIN 

    DECLARE result longtext default '
    {
        "list": {
            "type": "[{lowerprefix}][{table_name_lower}]_store",
            "autoLoad": true,
            "bind": {
                "autoSync": "{autoSync}"
            },
            "listeners": {
                "beforeload":"onBeforeStoreLoad",
                "load": "onStoreLoad",
                "update": "onStoreUpdate",
                "write": "onStoreWrite",
                "beforesync": "onBeforeSync"
            } 
        },
        "quicksearch": {
            "type": "[{lowerprefix}][{table_name_lower}]_store",
            "autoLoad": false,
            "autoSync": false,
            "listeners": {
                "beforeload":"onQuicksearchBeforeStoreLoad"
            }
        }
    }
    ';
    
    SET result = `replaceDefaultDefinitionVars`(in_table_name,result);
    
    RETURN result;
END //
